"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xlsx@0.18.5";
exports.ids = ["vendor-chunks/xlsx@0.18.5"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/xlsx@0.18.5/node_modules/xlsx/xlsx.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/.pnpm/xlsx@0.18.5/node_modules/xlsx/xlsx.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CFB: () => (/* binding */ CFB),\n/* harmony export */   SSF: () => (/* binding */ SSF),\n/* harmony export */   parse_xlscfb: () => (/* binding */ parse_xlscfb),\n/* harmony export */   parse_zip: () => (/* binding */ parse_zip),\n/* harmony export */   read: () => (/* binding */ readSync),\n/* harmony export */   readFile: () => (/* binding */ readFileSync),\n/* harmony export */   readFileSync: () => (/* binding */ readFileSync),\n/* harmony export */   set_cptable: () => (/* binding */ set_cptable),\n/* harmony export */   set_fs: () => (/* binding */ set_fs),\n/* harmony export */   stream: () => (/* binding */ __stream),\n/* harmony export */   utils: () => (/* binding */ utils),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   write: () => (/* binding */ writeSync),\n/* harmony export */   writeFile: () => (/* binding */ writeFileSync),\n/* harmony export */   writeFileAsync: () => (/* binding */ writeFileAsync),\n/* harmony export */   writeFileSync: () => (/* binding */ writeFileSync),\n/* harmony export */   writeFileXLSX: () => (/* binding */ writeFileSyncXLSX),\n/* harmony export */   writeXLSX: () => (/* binding */ writeSyncXLSX)\n/* harmony export */ });\n/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported XLSX */ /*global process:false, Buffer:false, ArrayBuffer:false, DataView:false, Deno:false */ var XLSX = {};\nXLSX.version = \"0.18.5\";\nvar current_codepage = 1200, current_ansi = 1252;\nvar VALID_ANSI = [\n    874,\n    932,\n    936,\n    949,\n    950,\n    1250,\n    1251,\n    1252,\n    1253,\n    1254,\n    1255,\n    1256,\n    1257,\n    1258,\n    10000\n];\n/* ECMA-376 Part I 18.4.1 charset to codepage mapping */ var CS2CP = {\n    /*::[*/ 0: 1252,\n    /* ANSI */ /*::[*/ 1: 65001,\n    /* DEFAULT */ /*::[*/ 2: 65001,\n    /* SYMBOL */ /*::[*/ 77: 10000,\n    /* MAC */ /*::[*/ 128: 932,\n    /* SHIFTJIS */ /*::[*/ 129: 949,\n    /* HANGUL */ /*::[*/ 130: 1361,\n    /* JOHAB */ /*::[*/ 134: 936,\n    /* GB2312 */ /*::[*/ 136: 950,\n    /* CHINESEBIG5 */ /*::[*/ 161: 1253,\n    /* GREEK */ /*::[*/ 162: 1254,\n    /* TURKISH */ /*::[*/ 163: 1258,\n    /* VIETNAMESE */ /*::[*/ 177: 1255,\n    /* HEBREW */ /*::[*/ 178: 1256,\n    /* ARABIC */ /*::[*/ 186: 1257,\n    /* BALTIC */ /*::[*/ 204: 1251,\n    /* RUSSIAN */ /*::[*/ 222: 874,\n    /* THAI */ /*::[*/ 238: 1250,\n    /* EASTEUROPE */ /*::[*/ 255: 1252,\n    /* OEM */ /*::[*/ 69: 6969 /* MISC */ \n} /*:any*/ ;\nvar set_ansi = function(cp /*:number*/ ) {\n    if (VALID_ANSI.indexOf(cp) == -1) return;\n    current_ansi = CS2CP[0] = cp;\n};\nfunction reset_ansi() {\n    set_ansi(1252);\n}\nvar set_cp = function(cp /*:number*/ ) {\n    current_codepage = cp;\n    set_ansi(cp);\n};\nfunction reset_cp() {\n    set_cp(1200);\n    reset_ansi();\n}\nfunction char_codes(data /*:string*/ ) /*:Array<number>*/ {\n    var o /*:Array<number>*/  = [];\n    for(var i = 0, len = data.length; i < len; ++i)o[i] = data.charCodeAt(i);\n    return o;\n}\nfunction utf16leread(data /*:string*/ ) /*:string*/ {\n    var o /*:Array<string>*/  = [];\n    for(var i = 0; i < data.length >> 1; ++i)o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));\n    return o.join(\"\");\n}\nfunction utf16beread(data /*:string*/ ) /*:string*/ {\n    var o /*:Array<string>*/  = [];\n    for(var i = 0; i < data.length >> 1; ++i)o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));\n    return o.join(\"\");\n}\nvar debom = function(data /*:string*/ ) /*:string*/ {\n    var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);\n    if (c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));\n    if (c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));\n    if (c1 == 0xFEFF) return data.slice(1);\n    return data;\n};\nvar _getchar = function _gc1(x /*:number*/ ) /*:string*/ {\n    return String.fromCharCode(x);\n};\nvar _getansi = function _ga1(x /*:number*/ ) /*:string*/ {\n    return String.fromCharCode(x);\n};\nvar $cptable;\nfunction set_cptable(cptable) {\n    $cptable = cptable;\n    set_cp = function(cp /*:number*/ ) {\n        current_codepage = cp;\n        set_ansi(cp);\n    };\n    debom = function(data /*:string*/ ) {\n        if (data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) {\n            return $cptable.utils.decode(1200, char_codes(data.slice(2)));\n        }\n        return data;\n    };\n    _getchar = function _gc2(x /*:number*/ ) /*:string*/ {\n        if (current_codepage === 1200) return String.fromCharCode(x);\n        return $cptable.utils.decode(current_codepage, [\n            x & 255,\n            x >> 8\n        ])[0];\n    };\n    _getansi = function _ga2(x /*:number*/ ) /*:string*/ {\n        return $cptable.utils.decode(current_ansi, [\n            x\n        ])[0];\n    };\n    cpdoit();\n}\n\nvar DENSE = null;\nvar DIF_XL = true;\nvar Base64_map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nfunction Base64_encode(input) {\n    var o = \"\";\n    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;\n    for(var i = 0; i < input.length;){\n        c1 = input.charCodeAt(i++);\n        e1 = c1 >> 2;\n        c2 = input.charCodeAt(i++);\n        e2 = (c1 & 3) << 4 | c2 >> 4;\n        c3 = input.charCodeAt(i++);\n        e3 = (c2 & 15) << 2 | c3 >> 6;\n        e4 = c3 & 63;\n        if (isNaN(c2)) {\n            e3 = e4 = 64;\n        } else if (isNaN(c3)) {\n            e4 = 64;\n        }\n        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);\n    }\n    return o;\n}\nfunction Base64_decode(input) {\n    var o = \"\";\n    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;\n    input = input.replace(/[^\\w\\+\\/\\=]/g, \"\");\n    for(var i = 0; i < input.length;){\n        e1 = Base64_map.indexOf(input.charAt(i++));\n        e2 = Base64_map.indexOf(input.charAt(i++));\n        c1 = e1 << 2 | e2 >> 4;\n        o += String.fromCharCode(c1);\n        e3 = Base64_map.indexOf(input.charAt(i++));\n        c2 = (e2 & 15) << 4 | e3 >> 2;\n        if (e3 !== 64) {\n            o += String.fromCharCode(c2);\n        }\n        e4 = Base64_map.indexOf(input.charAt(i++));\n        c3 = (e3 & 3) << 6 | e4;\n        if (e4 !== 64) {\n            o += String.fromCharCode(c3);\n        }\n    }\n    return o;\n}\nvar has_buf = /*#__PURE__*/ function() {\n    return typeof Buffer !== \"undefined\" && typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && !!process.versions.node;\n}();\nvar Buffer_from = /*#__PURE__*/ function() {\n    if (typeof Buffer !== \"undefined\") {\n        var nbfs = !Buffer.from;\n        if (!nbfs) try {\n            Buffer.from(\"foo\", \"utf8\");\n        } catch (e) {\n            nbfs = true;\n        }\n        return nbfs ? function(buf, enc) {\n            return enc ? new Buffer(buf, enc) : new Buffer(buf);\n        } : Buffer.from.bind(Buffer);\n    }\n    return function() {};\n}();\nfunction new_raw_buf(len /*:number*/ ) {\n    /* jshint -W056 */ if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);\n    return typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n/* jshint +W056 */ }\nfunction new_unsafe_buf(len /*:number*/ ) {\n    /* jshint -W056 */ if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);\n    return typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n/* jshint +W056 */ }\nvar s2a = function s2a(s /*:string*/ ) /*:any*/ {\n    if (has_buf) return Buffer_from(s, \"binary\");\n    return s.split(\"\").map(function(x /*:string*/ ) /*:number*/ {\n        return x.charCodeAt(0) & 0xff;\n    });\n};\nfunction s2ab(s /*:string*/ ) /*:any*/ {\n    if (typeof ArrayBuffer === \"undefined\") return s2a(s);\n    var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);\n    for(var i = 0; i != s.length; ++i)view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n}\nfunction a2s(data /*:any*/ ) /*:string*/ {\n    if (Array.isArray(data)) return data.map(function(c) {\n        return String.fromCharCode(c);\n    }).join(\"\");\n    var o /*:Array<string>*/  = [];\n    for(var i = 0; i < data.length; ++i)o[i] = String.fromCharCode(data[i]);\n    return o.join(\"\");\n}\nfunction a2u(data /*:Array<number>*/ ) /*:Uint8Array*/ {\n    if (typeof Uint8Array === \"undefined\") throw new Error(\"Unsupported\");\n    return new Uint8Array(data);\n}\nfunction ab2a(data /*:ArrayBuffer|Uint8Array*/ ) /*:Array<number>*/ {\n    if (typeof ArrayBuffer == \"undefined\") throw new Error(\"Unsupported\");\n    if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));\n    /*:: if(data instanceof ArrayBuffer) throw new Error(\"unreachable\"); */ var o = new Array(data.length);\n    for(var i = 0; i < data.length; ++i)o[i] = data[i];\n    return o;\n}\nvar bconcat = has_buf ? function(bufs) {\n    return Buffer.concat(bufs.map(function(buf) {\n        return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);\n    }));\n} : function(bufs) {\n    if (typeof Uint8Array !== \"undefined\") {\n        var i = 0, maxlen = 0;\n        for(i = 0; i < bufs.length; ++i)maxlen += bufs[i].length;\n        var o = new Uint8Array(maxlen);\n        var len = 0;\n        for(i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i){\n            len = bufs[i].length;\n            if (bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);\n            else if (typeof bufs[i] == \"string\") {\n                throw \"wtf\";\n            } else o.set(new Uint8Array(bufs[i]), maxlen);\n        }\n        return o;\n    }\n    return [].concat.apply([], bufs.map(function(buf) {\n        return Array.isArray(buf) ? buf : [].slice.call(buf);\n    }));\n};\nfunction utf8decode(content /*:string*/ ) {\n    var out = [], widx = 0, L = content.length + 250;\n    var o = new_raw_buf(content.length + 255);\n    for(var ridx = 0; ridx < content.length; ++ridx){\n        var c = content.charCodeAt(ridx);\n        if (c < 0x80) o[widx++] = c;\n        else if (c < 0x800) {\n            o[widx++] = 192 | c >> 6 & 31;\n            o[widx++] = 128 | c & 63;\n        } else if (c >= 0xD800 && c < 0xE000) {\n            c = (c & 1023) + 64;\n            var d = content.charCodeAt(++ridx) & 1023;\n            o[widx++] = 240 | c >> 8 & 7;\n            o[widx++] = 128 | c >> 2 & 63;\n            o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;\n            o[widx++] = 128 | d & 63;\n        } else {\n            o[widx++] = 224 | c >> 12 & 15;\n            o[widx++] = 128 | c >> 6 & 63;\n            o[widx++] = 128 | c & 63;\n        }\n        if (widx > L) {\n            out.push(o.slice(0, widx));\n            widx = 0;\n            o = new_raw_buf(65535);\n            L = 65530;\n        }\n    }\n    out.push(o.slice(0, widx));\n    return bconcat(out);\n}\nvar chr0 = /\\u0000/g, chr1 = /[\\u0001-\\u0006]/g;\n/*::\ndeclare type Block = any;\ndeclare type BufArray = {\n\tnewblk(sz:number):Block;\n\tnext(sz:number):Block;\n\tend():any;\n\tpush(buf:Block):void;\n};\n\ntype RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};\n\ntype EvertType = {[string]:string};\ntype EvertNumType = {[string]:number};\ntype EvertArrType = {[string]:Array<string>};\n\ntype StringConv = {(string):string};\n\n*/ /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */ /*jshint -W041 */ function _strrev(x /*:string*/ ) /*:string*/ {\n    var o = \"\", i = x.length - 1;\n    while(i >= 0)o += x.charAt(i--);\n    return o;\n}\nfunction pad0(v /*:any*/ , d /*:number*/ ) /*:string*/ {\n    var t = \"\" + v;\n    return t.length >= d ? t : fill(\"0\", d - t.length) + t;\n}\nfunction pad_(v /*:any*/ , d /*:number*/ ) /*:string*/ {\n    var t = \"\" + v;\n    return t.length >= d ? t : fill(\" \", d - t.length) + t;\n}\nfunction rpad_(v /*:any*/ , d /*:number*/ ) /*:string*/ {\n    var t = \"\" + v;\n    return t.length >= d ? t : t + fill(\" \", d - t.length);\n}\nfunction pad0r1(v /*:any*/ , d /*:number*/ ) /*:string*/ {\n    var t = \"\" + Math.round(v);\n    return t.length >= d ? t : fill(\"0\", d - t.length) + t;\n}\nfunction pad0r2(v /*:any*/ , d /*:number*/ ) /*:string*/ {\n    var t = \"\" + v;\n    return t.length >= d ? t : fill(\"0\", d - t.length) + t;\n}\nvar p2_32 = /*#__PURE__*/ Math.pow(2, 32);\nfunction pad0r(v /*:any*/ , d /*:number*/ ) /*:string*/ {\n    if (v > p2_32 || v < -p2_32) return pad0r1(v, d);\n    var i = Math.round(v);\n    return pad0r2(i, d);\n}\n/* yes, in 2022 this is still faster than string compare */ function SSF_isgeneral(s /*:string*/ , i /*:?number*/ ) /*:boolean*/ {\n    i = i || 0;\n    return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;\n}\nvar days /*:Array<Array<string> >*/  = [\n    [\n        \"Sun\",\n        \"Sunday\"\n    ],\n    [\n        \"Mon\",\n        \"Monday\"\n    ],\n    [\n        \"Tue\",\n        \"Tuesday\"\n    ],\n    [\n        \"Wed\",\n        \"Wednesday\"\n    ],\n    [\n        \"Thu\",\n        \"Thursday\"\n    ],\n    [\n        \"Fri\",\n        \"Friday\"\n    ],\n    [\n        \"Sat\",\n        \"Saturday\"\n    ]\n];\nvar months /*:Array<Array<string> >*/  = [\n    [\n        \"J\",\n        \"Jan\",\n        \"January\"\n    ],\n    [\n        \"F\",\n        \"Feb\",\n        \"February\"\n    ],\n    [\n        \"M\",\n        \"Mar\",\n        \"March\"\n    ],\n    [\n        \"A\",\n        \"Apr\",\n        \"April\"\n    ],\n    [\n        \"M\",\n        \"May\",\n        \"May\"\n    ],\n    [\n        \"J\",\n        \"Jun\",\n        \"June\"\n    ],\n    [\n        \"J\",\n        \"Jul\",\n        \"July\"\n    ],\n    [\n        \"A\",\n        \"Aug\",\n        \"August\"\n    ],\n    [\n        \"S\",\n        \"Sep\",\n        \"September\"\n    ],\n    [\n        \"O\",\n        \"Oct\",\n        \"October\"\n    ],\n    [\n        \"N\",\n        \"Nov\",\n        \"November\"\n    ],\n    [\n        \"D\",\n        \"Dec\",\n        \"December\"\n    ]\n];\nfunction SSF_init_table(t /*:any*/ ) {\n    if (!t) t = {};\n    t[0] = \"General\";\n    t[1] = \"0\";\n    t[2] = \"0.00\";\n    t[3] = \"#,##0\";\n    t[4] = \"#,##0.00\";\n    t[9] = \"0%\";\n    t[10] = \"0.00%\";\n    t[11] = \"0.00E+00\";\n    t[12] = \"# ?/?\";\n    t[13] = \"# ??/??\";\n    t[14] = \"m/d/yy\";\n    t[15] = \"d-mmm-yy\";\n    t[16] = \"d-mmm\";\n    t[17] = \"mmm-yy\";\n    t[18] = \"h:mm AM/PM\";\n    t[19] = \"h:mm:ss AM/PM\";\n    t[20] = \"h:mm\";\n    t[21] = \"h:mm:ss\";\n    t[22] = \"m/d/yy h:mm\";\n    t[37] = \"#,##0 ;(#,##0)\";\n    t[38] = \"#,##0 ;[Red](#,##0)\";\n    t[39] = \"#,##0.00;(#,##0.00)\";\n    t[40] = \"#,##0.00;[Red](#,##0.00)\";\n    t[45] = \"mm:ss\";\n    t[46] = \"[h]:mm:ss\";\n    t[47] = \"mmss.0\";\n    t[48] = \"##0.0E+0\";\n    t[49] = \"@\";\n    t[56] = '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"';\n    return t;\n}\n/* repeated to satiate webpack */ var table_fmt = {\n    0: \"General\",\n    1: \"0\",\n    2: \"0.00\",\n    3: \"#,##0\",\n    4: \"#,##0.00\",\n    9: \"0%\",\n    10: \"0.00%\",\n    11: \"0.00E+00\",\n    12: \"# ?/?\",\n    13: \"# ??/??\",\n    14: \"m/d/yy\",\n    15: \"d-mmm-yy\",\n    16: \"d-mmm\",\n    17: \"mmm-yy\",\n    18: \"h:mm AM/PM\",\n    19: \"h:mm:ss AM/PM\",\n    20: \"h:mm\",\n    21: \"h:mm:ss\",\n    22: \"m/d/yy h:mm\",\n    37: \"#,##0 ;(#,##0)\",\n    38: \"#,##0 ;[Red](#,##0)\",\n    39: \"#,##0.00;(#,##0.00)\",\n    40: \"#,##0.00;[Red](#,##0.00)\",\n    45: \"mm:ss\",\n    46: \"[h]:mm:ss\",\n    47: \"mmss.0\",\n    48: \"##0.0E+0\",\n    49: \"@\",\n    56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"'\n};\n/* Defaults determined by systematically testing in Excel 2019 */ /* These formats appear to default to other formats in the table */ var SSF_default_map = {\n    5: 37,\n    6: 38,\n    7: 39,\n    8: 40,\n    23: 0,\n    24: 0,\n    25: 0,\n    26: 0,\n    27: 14,\n    28: 14,\n    29: 14,\n    30: 14,\n    31: 14,\n    50: 14,\n    51: 14,\n    52: 14,\n    53: 14,\n    54: 14,\n    55: 14,\n    56: 14,\n    57: 14,\n    58: 14,\n    59: 1,\n    60: 2,\n    61: 3,\n    62: 4,\n    67: 9,\n    68: 10,\n    69: 12,\n    70: 13,\n    71: 14,\n    72: 14,\n    73: 15,\n    74: 16,\n    75: 17,\n    76: 20,\n    77: 21,\n    78: 22,\n    79: 45,\n    80: 46,\n    81: 47,\n    82: 0 // 82 ->  0 ... 65536 -> 0 (omitted)\n};\n/* These formats technically refer to Accounting formats with no equivalent */ var SSF_default_str = {\n    //  5 -- Currency,   0 decimal, black negative\n    5: '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n    63: '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n    //  6 -- Currency,   0 decimal, red   negative\n    6: '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n    64: '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n    //  7 -- Currency,   2 decimal, black negative\n    7: '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n    65: '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n    //  8 -- Currency,   2 decimal, red   negative\n    8: '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n    66: '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n    // 41 -- Accounting, 0 decimal, No Symbol\n    41: '_(* #,##0_);_(* \\\\(#,##0\\\\);_(* \"-\"_);_(@_)',\n    // 42 -- Accounting, 0 decimal, $  Symbol\n    42: '_(\"$\"* #,##0_);_(\"$\"* \\\\(#,##0\\\\);_(\"$\"* \"-\"_);_(@_)',\n    // 43 -- Accounting, 2 decimal, No Symbol\n    43: '_(* #,##0.00_);_(* \\\\(#,##0.00\\\\);_(* \"-\"??_);_(@_)',\n    // 44 -- Accounting, 2 decimal, $  Symbol\n    44: '_(\"$\"* #,##0.00_);_(\"$\"* \\\\(#,##0.00\\\\);_(\"$\"* \"-\"??_);_(@_)'\n};\nfunction SSF_frac(x /*:number*/ , D /*:number*/ , mixed /*:?boolean*/ ) /*:Array<number>*/ {\n    var sgn = x < 0 ? -1 : 1;\n    var B = x * sgn;\n    var P_2 = 0, P_1 = 1, P = 0;\n    var Q_2 = 1, Q_1 = 0, Q = 0;\n    var A = Math.floor(B);\n    while(Q_1 < D){\n        A = Math.floor(B);\n        P = A * P_1 + P_2;\n        Q = A * Q_1 + Q_2;\n        if (B - A < 0.00000005) break;\n        B = 1 / (B - A);\n        P_2 = P_1;\n        P_1 = P;\n        Q_2 = Q_1;\n        Q_1 = Q;\n    }\n    if (Q > D) {\n        if (Q_1 > D) {\n            Q = Q_2;\n            P = P_2;\n        } else {\n            Q = Q_1;\n            P = P_1;\n        }\n    }\n    if (!mixed) return [\n        0,\n        sgn * P,\n        Q\n    ];\n    var q = Math.floor(sgn * P / Q);\n    return [\n        q,\n        sgn * P - q * Q,\n        Q\n    ];\n}\nfunction SSF_parse_date_code(v /*:number*/ , opts /*:?any*/ , b2 /*:?boolean*/ ) {\n    if (v > 2958465 || v < 0) return null;\n    var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0;\n    var dout = [];\n    var out = {\n        D: date,\n        T: time,\n        u: 86400 * (v - date) - time,\n        y: 0,\n        m: 0,\n        d: 0,\n        H: 0,\n        M: 0,\n        S: 0,\n        q: 0\n    };\n    if (Math.abs(out.u) < 1e-6) out.u = 0;\n    if (opts && opts.date1904) date += 1462;\n    if (out.u > 0.9999) {\n        out.u = 0;\n        if (++time == 86400) {\n            out.T = time = 0;\n            ++date;\n            ++out.D;\n        }\n    }\n    if (date === 60) {\n        dout = b2 ? [\n            1317,\n            10,\n            29\n        ] : [\n            1900,\n            2,\n            29\n        ];\n        dow = 3;\n    } else if (date === 0) {\n        dout = b2 ? [\n            1317,\n            8,\n            29\n        ] : [\n            1900,\n            1,\n            0\n        ];\n        dow = 6;\n    } else {\n        if (date > 60) --date;\n        /* 1 = Jan 1 1900 in Gregorian */ var d = new Date(1900, 0, 1);\n        d.setDate(d.getDate() + date - 1);\n        dout = [\n            d.getFullYear(),\n            d.getMonth() + 1,\n            d.getDate()\n        ];\n        dow = d.getDay();\n        if (date < 60) dow = (dow + 6) % 7;\n        if (b2) dow = SSF_fix_hijri(d, dout);\n    }\n    out.y = dout[0];\n    out.m = dout[1];\n    out.d = dout[2];\n    out.S = time % 60;\n    time = Math.floor(time / 60);\n    out.M = time % 60;\n    time = Math.floor(time / 60);\n    out.H = time;\n    out.q = dow;\n    return out;\n}\nvar SSFbasedate = /*#__PURE__*/ new Date(1899, 11, 31, 0, 0, 0);\nvar SSFdnthresh = /*#__PURE__*/ SSFbasedate.getTime();\nvar SSFbase1904 = /*#__PURE__*/ new Date(1900, 2, 1, 0, 0, 0);\nfunction datenum_local(v /*:Date*/ , date1904 /*:?boolean*/ ) /*:number*/ {\n    var epoch = /*#__PURE__*/ v.getTime();\n    if (date1904) epoch -= 1461 * 24 * 60 * 60 * 1000;\n    else if (v >= SSFbase1904) epoch += 24 * 60 * 60 * 1000;\n    return (epoch - (SSFdnthresh + /*#__PURE__*/ (v.getTimezoneOffset() - /*#__PURE__*/ SSFbasedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);\n}\n/* ECMA-376 18.8.30 numFmt*/ /* Note: `toPrecision` uses standard form when prec > E and E >= -6 */ /* exponent >= -9 and <= 9 */ function SSF_strip_decimal(o /*:string*/ ) /*:string*/ {\n    return o.indexOf(\".\") == -1 ? o : o.replace(/(?:\\.0*|(\\.\\d*[1-9])0+)$/, \"$1\");\n}\n/* General Exponential always shows 2 digits exp and trims the mantissa */ function SSF_normalize_exp(o /*:string*/ ) /*:string*/ {\n    if (o.indexOf(\"E\") == -1) return o;\n    return o.replace(/(?:\\.0*|(\\.\\d*[1-9])0+)[Ee]/, \"$1E\").replace(/(E[+-])(\\d)$/, \"$10$2\");\n}\n/* exponent >= -9 and <= 9 */ function SSF_small_exp(v /*:number*/ ) /*:string*/ {\n    var w = v < 0 ? 12 : 11;\n    var o = SSF_strip_decimal(v.toFixed(12));\n    if (o.length <= w) return o;\n    o = v.toPrecision(10);\n    if (o.length <= w) return o;\n    return v.toExponential(5);\n}\n/* exponent >= 11 or <= -10 likely exponential */ function SSF_large_exp(v /*:number*/ ) /*:string*/ {\n    var o = SSF_strip_decimal(v.toFixed(11));\n    return o.length > (v < 0 ? 12 : 11) || o === \"0\" || o === \"-0\" ? v.toPrecision(6) : o;\n}\nfunction SSF_general_num(v /*:number*/ ) /*:string*/ {\n    var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;\n    if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);\n    else if (Math.abs(V) <= 9) o = SSF_small_exp(v);\n    else if (V === 10) o = v.toFixed(10).substr(0, 12);\n    else o = SSF_large_exp(v);\n    return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));\n}\n/*\n\t\"General\" rules:\n\t- text is passed through (\"@\")\n\t- booleans are rendered as TRUE/FALSE\n\t- \"up to 11 characters\" displayed for numbers\n\t- Default date format (code 14) used for Dates\n\n\tThe longest 32-bit integer text is \"-2147483648\", exactly 11 chars\n\tTODO: technically the display depends on the width of the cell\n*/ function SSF_general(v /*:any*/ , opts /*:any*/ ) {\n    switch(typeof v){\n        case \"string\":\n            return v;\n        case \"boolean\":\n            return v ? \"TRUE\" : \"FALSE\";\n        case \"number\":\n            return (v | 0) === v ? v.toString(10) : SSF_general_num(v);\n        case \"undefined\":\n            return \"\";\n        case \"object\":\n            if (v == null) return \"\";\n            if (v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);\n    }\n    throw new Error(\"unsupported value in General format: \" + v);\n}\nfunction SSF_fix_hijri(date /*:Date*/ , o /*:[number, number, number]*/ ) {\n    /* TODO: properly adjust y/m/d and  */ o[0] -= 581;\n    var dow = date.getDay();\n    if (date < 60) dow = (dow + 6) % 7;\n    return dow;\n}\n//var THAI_DIGITS = \"\\u0E50\\u0E51\\u0E52\\u0E53\\u0E54\\u0E55\\u0E56\\u0E57\\u0E58\\u0E59\".split(\"\");\nfunction SSF_write_date(type /*:number*/ , fmt /*:string*/ , val, ss0 /*:?number*/ ) /*:string*/ {\n    var o = \"\", ss = 0, tt = 0, y = val.y, out, outl = 0;\n    switch(type){\n        case 98:\n            /* 'b' buddhist year */ y = val.y + 543;\n        /* falls through */ case 121:\n            /* 'y' year */ switch(fmt.length){\n                case 1:\n                case 2:\n                    out = y % 100;\n                    outl = 2;\n                    break;\n                default:\n                    out = y % 10000;\n                    outl = 4;\n                    break;\n            }\n            break;\n        case 109:\n            /* 'm' month */ switch(fmt.length){\n                case 1:\n                case 2:\n                    out = val.m;\n                    outl = fmt.length;\n                    break;\n                case 3:\n                    return months[val.m - 1][1];\n                case 5:\n                    return months[val.m - 1][0];\n                default:\n                    return months[val.m - 1][2];\n            }\n            break;\n        case 100:\n            /* 'd' day */ switch(fmt.length){\n                case 1:\n                case 2:\n                    out = val.d;\n                    outl = fmt.length;\n                    break;\n                case 3:\n                    return days[val.q][0];\n                default:\n                    return days[val.q][1];\n            }\n            break;\n        case 104:\n            /* 'h' 12-hour */ switch(fmt.length){\n                case 1:\n                case 2:\n                    out = 1 + (val.H + 11) % 12;\n                    outl = fmt.length;\n                    break;\n                default:\n                    throw \"bad hour format: \" + fmt;\n            }\n            break;\n        case 72:\n            /* 'H' 24-hour */ switch(fmt.length){\n                case 1:\n                case 2:\n                    out = val.H;\n                    outl = fmt.length;\n                    break;\n                default:\n                    throw \"bad hour format: \" + fmt;\n            }\n            break;\n        case 77:\n            /* 'M' minutes */ switch(fmt.length){\n                case 1:\n                case 2:\n                    out = val.M;\n                    outl = fmt.length;\n                    break;\n                default:\n                    throw \"bad minute format: \" + fmt;\n            }\n            break;\n        case 115:\n            /* 's' seconds */ if (fmt != \"s\" && fmt != \"ss\" && fmt != \".0\" && fmt != \".00\" && fmt != \".000\") throw \"bad second format: \" + fmt;\n            if (val.u === 0 && (fmt == \"s\" || fmt == \"ss\")) return pad0(val.S, fmt.length);\n            /*::if(!ss0) ss0 = 0; */ if (ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;\n            else tt = ss0 === 1 ? 10 : 1;\n            ss = Math.round(tt * (val.S + val.u));\n            if (ss >= 60 * tt) ss = 0;\n            if (fmt === \"s\") return ss === 0 ? \"0\" : \"\" + ss / tt;\n            o = pad0(ss, 2 + ss0);\n            if (fmt === \"ss\") return o.substr(0, 2);\n            return \".\" + o.substr(2, fmt.length - 1);\n        case 90:\n            /* 'Z' absolute time */ switch(fmt){\n                case \"[h]\":\n                case \"[hh]\":\n                    out = val.D * 24 + val.H;\n                    break;\n                case \"[m]\":\n                case \"[mm]\":\n                    out = (val.D * 24 + val.H) * 60 + val.M;\n                    break;\n                case \"[s]\":\n                case \"[ss]\":\n                    out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);\n                    break;\n                default:\n                    throw \"bad abstime format: \" + fmt;\n            }\n            outl = fmt.length === 3 ? 1 : 2;\n            break;\n        case 101:\n            /* 'e' era */ out = y;\n            outl = 1;\n            break;\n    }\n    var outstr = outl > 0 ? pad0(out, outl) : \"\";\n    return outstr;\n}\n/*jshint -W086 */ /*jshint +W086 */ function commaify(s /*:string*/ ) /*:string*/ {\n    var w = 3;\n    if (s.length <= w) return s;\n    var j = s.length % w, o = s.substr(0, j);\n    for(; j != s.length; j += w)o += (o.length > 0 ? \",\" : \"\") + s.substr(j, w);\n    return o;\n}\nvar pct1 = /%/g;\nfunction write_num_pct(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    var sfmt = fmt.replace(pct1, \"\"), mul = fmt.length - sfmt.length;\n    return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill(\"%\", mul);\n}\nfunction write_num_cm(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    var idx = fmt.length - 1;\n    while(fmt.charCodeAt(idx - 1) === 44)--idx;\n    return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));\n}\nfunction write_num_exp(fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    var o /*:string*/ ;\n    var idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n    if (fmt.match(/^#+0.0E\\+0$/)) {\n        if (val == 0) return \"0.0E+0\";\n        else if (val < 0) return \"-\" + write_num_exp(fmt, -val);\n        var period = fmt.indexOf(\".\");\n        if (period === -1) period = fmt.indexOf(\"E\");\n        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;\n        if (ee < 0) ee += period;\n        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);\n        if (o.indexOf(\"e\") === -1) {\n            var fakee = Math.floor(Math.log(val) * Math.LOG10E);\n            if (o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length + ee);\n            else o += \"E+\" + (fakee - ee);\n            while(o.substr(0, 2) === \"0.\"){\n                o = o.charAt(0) + o.substr(2, period) + \".\" + o.substr(2 + period);\n                o = o.replace(/^0+([1-9])/, \"$1\").replace(/^0+\\./, \"0.\");\n            }\n            o = o.replace(/\\+-/, \"-\");\n        }\n        o = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/, function($$, $1, $2, $3) {\n            return $1 + $2 + $3.substr(0, (period + ee) % period) + \".\" + $3.substr(ee) + \"E\";\n        });\n    } else o = val.toExponential(idx);\n    if (fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0, o.length - 1) + \"0\" + o.charAt(o.length - 1);\n    if (fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/, \"e\");\n    return o.replace(\"e\", \"E\");\n}\nvar frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\nfunction write_num_f1(r /*:Array<string>*/ , aval /*:number*/ , sign /*:string*/ ) /*:string*/ {\n    var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);\n    var myn = rr - base * den, myd = den;\n    return sign + (base === 0 ? \"\" : \"\" + base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + \"/\" + r[3] + pad0(myd, r[4].length));\n}\nfunction write_num_f2(r /*:Array<string>*/ , aval /*:number*/ , sign /*:string*/ ) /*:string*/ {\n    return sign + (aval === 0 ? \"\" : \"\" + aval) + fill(\" \", r[1].length + 2 + r[4].length);\n}\nvar dec1 = /^#*0*\\.([0#]+)/;\nvar closeparen = /\\).*[0#]/;\nvar phone = /\\(###\\) ###\\\\?-####/;\nfunction hashq(str /*:string*/ ) /*:string*/ {\n    var o = \"\", cc;\n    for(var i = 0; i != str.length; ++i)switch(cc = str.charCodeAt(i)){\n        case 35:\n            break;\n        case 63:\n            o += \" \";\n            break;\n        case 48:\n            o += \"0\";\n            break;\n        default:\n            o += String.fromCharCode(cc);\n    }\n    return o;\n}\nfunction rnd(val /*:number*/ , d /*:number*/ ) /*:string*/ {\n    var dd = Math.pow(10, d);\n    return \"\" + Math.round(val * dd) / dd;\n}\nfunction dec(val /*:number*/ , d /*:number*/ ) /*:number*/ {\n    var _frac = val - Math.floor(val), dd = Math.pow(10, d);\n    if (d < (\"\" + Math.round(_frac * dd)).length) return 0;\n    return Math.round(_frac * dd);\n}\nfunction carry(val /*:number*/ , d /*:number*/ ) /*:number*/ {\n    if (d < (\"\" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {\n        return 1;\n    }\n    return 0;\n}\nfunction flr(val /*:number*/ ) /*:string*/ {\n    if (val < 2147483647 && val > -2147483648) return \"\" + (val >= 0 ? val | 0 : val - 1 | 0);\n    return \"\" + Math.floor(val);\n}\nfunction write_num_flt(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n        var ffmt = fmt.replace(/\\( */, \"\").replace(/ \\)/, \"\").replace(/\\)/, \"\");\n        if (val >= 0) return write_num_flt(\"n\", ffmt, val);\n        return \"(\" + write_num_flt(\"n\", ffmt, -val) + \")\";\n    }\n    if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n    if (fmt.indexOf(\"%\") !== -1) return write_num_pct(type, fmt, val);\n    if (fmt.indexOf(\"E\") !== -1) return write_num_exp(fmt, val);\n    if (fmt.charCodeAt(0) === 36) return \"$\" + write_num_flt(type, fmt.substr(fmt.charAt(1) == \" \" ? 2 : 1), val);\n    var o;\n    var r /*:?Array<string>*/ , ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n    if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);\n    if (fmt.match(/^[#?]+$/)) {\n        o = pad0r(val, 0);\n        if (o === \"0\") o = \"\";\n        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;\n    }\n    if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);\n    if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf(\"0\"));\n    if (r = fmt.match(dec1)) {\n        o = rnd(val, r[1].length).replace(/^([^\\.]+)$/, \"$1.\" + hashq(r[1])).replace(/\\.$/, \".\" + hashq(r[1])).replace(/\\.(\\d*)$/, function($$, $1) {\n            return \".\" + $1 + fill(\"0\", hashq(/*::(*/ r /*::||[\"\"])*/ [1]).length - $1.length);\n        });\n        return fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./, \".\");\n    }\n    fmt = fmt.replace(/^#+([0.])/, \"$1\");\n    if (r = fmt.match(/^(0*)\\.(#*)$/)) {\n        return sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/, \".$1\").replace(/^(-?\\d*)$/, \"$1.\").replace(/^0\\./, r[1].length ? \"0.\" : \".\");\n    }\n    if (r = fmt.match(/^#{1,3},##0(\\.?)$/)) return sign + commaify(pad0r(aval, 0));\n    if (r = fmt.match(/^#,##0\\.([#0]*0)$/)) {\n        return val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\" + (Math.floor(val) + carry(val, r[1].length))) + \".\" + pad0(dec(val, r[1].length), r[1].length);\n    }\n    if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, \"\"), val);\n    if (r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) {\n        o = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g, \"\"), val));\n        ri = 0;\n        return _strrev(_strrev(fmt.replace(/\\\\/g, \"\")).replace(/[0#]/g, function(x) {\n            return ri < o.length ? o.charAt(ri++) : x === \"0\" ? \"0\" : \"\";\n        }));\n    }\n    if (fmt.match(phone)) {\n        o = write_num_flt(type, \"##########\", val);\n        return \"(\" + o.substr(0, 3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n    }\n    var oa = \"\";\n    if (r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n        ri = Math.min(/*::String(*/ r[4]/*::)*/ .length, 7);\n        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);\n        o = \"\" + sign;\n        oa = write_num(\"n\", /*::String(*/ r[1], ff[1]);\n        if (oa.charAt(oa.length - 1) == \" \") oa = oa.substr(0, oa.length - 1) + \"0\";\n        o += oa + /*::String(*/ r[2] + \"/\" + /*::String(*/ r[3] /*::)*/ ;\n        oa = rpad_(ff[2], ri);\n        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;\n        o += oa;\n        return o;\n    }\n    if (r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n        ri = Math.min(Math.max(r[1].length, r[4].length), 7);\n        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);\n        return sign + (ff[0] || (ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1], ri) + r[2] + \"/\" + r[3] + rpad_(ff[2], ri) : fill(\" \", 2 * ri + 1 + r[2].length + r[3].length));\n    }\n    if (r = fmt.match(/^[#0?]+$/)) {\n        o = pad0r(val, 0);\n        if (fmt.length <= o.length) return o;\n        return hashq(fmt.substr(0, fmt.length - o.length)) + o;\n    }\n    if (r = fmt.match(/^([#0?]+)\\.([#0]+)$/)) {\n        o = \"\" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, \"$1\");\n        ri = o.indexOf(\".\");\n        var lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));\n    }\n    if (r = fmt.match(/^00,000\\.([#0]*0)$/)) {\n        ri = dec(val, r[1].length);\n        return val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/, \"0$&\").replace(/^\\d*$/, function($$) {\n            return \"00,\" + ($$.length < 3 ? pad0(0, 3 - $$.length) : \"\") + $$;\n        }) + \".\" + pad0(ri, r[1].length);\n    }\n    switch(fmt){\n        case \"###,##0.00\":\n            return write_num_flt(type, \"#,##0.00\", val);\n        case \"###,###\":\n        case \"##,###\":\n        case \"#,###\":\n            var x = commaify(pad0r(aval, 0));\n            return x !== \"0\" ? sign + x : \"\";\n        case \"###,###.00\":\n            return write_num_flt(type, \"###,##0.00\", val).replace(/^0\\./, \".\");\n        case \"#,###.00\":\n            return write_num_flt(type, \"#,##0.00\", val).replace(/^0\\./, \".\");\n        default:\n    }\n    throw new Error(\"unsupported format |\" + fmt + \"|\");\n}\nfunction write_num_cm2(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    var idx = fmt.length - 1;\n    while(fmt.charCodeAt(idx - 1) === 44)--idx;\n    return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));\n}\nfunction write_num_pct2(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    var sfmt = fmt.replace(pct1, \"\"), mul = fmt.length - sfmt.length;\n    return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill(\"%\", mul);\n}\nfunction write_num_exp2(fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    var o /*:string*/ ;\n    var idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n    if (fmt.match(/^#+0.0E\\+0$/)) {\n        if (val == 0) return \"0.0E+0\";\n        else if (val < 0) return \"-\" + write_num_exp2(fmt, -val);\n        var period = fmt.indexOf(\".\");\n        if (period === -1) period = fmt.indexOf(\"E\");\n        var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;\n        if (ee < 0) ee += period;\n        o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);\n        if (!o.match(/[Ee]/)) {\n            var fakee = Math.floor(Math.log(val) * Math.LOG10E);\n            if (o.indexOf(\".\") === -1) o = o.charAt(0) + \".\" + o.substr(1) + \"E+\" + (fakee - o.length + ee);\n            else o += \"E+\" + (fakee - ee);\n            o = o.replace(/\\+-/, \"-\");\n        }\n        o = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/, function($$, $1, $2, $3) {\n            return $1 + $2 + $3.substr(0, (period + ee) % period) + \".\" + $3.substr(ee) + \"E\";\n        });\n    } else o = val.toExponential(idx);\n    if (fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0, o.length - 1) + \"0\" + o.charAt(o.length - 1);\n    if (fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/, \"e\");\n    return o.replace(\"e\", \"E\");\n}\nfunction write_num_int(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n        var ffmt = fmt.replace(/\\( */, \"\").replace(/ \\)/, \"\").replace(/\\)/, \"\");\n        if (val >= 0) return write_num_int(\"n\", ffmt, val);\n        return \"(\" + write_num_int(\"n\", ffmt, -val) + \")\";\n    }\n    if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n    if (fmt.indexOf(\"%\") !== -1) return write_num_pct2(type, fmt, val);\n    if (fmt.indexOf(\"E\") !== -1) return write_num_exp2(fmt, val);\n    if (fmt.charCodeAt(0) === 36) return \"$\" + write_num_int(type, fmt.substr(fmt.charAt(1) == \" \" ? 2 : 1), val);\n    var o;\n    var r /*:?Array<string>*/ , ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n    if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);\n    if (fmt.match(/^[#?]+$/)) {\n        o = \"\" + val;\n        if (val === 0) o = \"\";\n        return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;\n    }\n    if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);\n    if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf(\"0\"));\n    if (r = fmt.match(dec1)) {\n        /*:: if(!Array.isArray(r)) throw new Error(\"unreachable\"); */ o = (\"\" + val).replace(/^([^\\.]+)$/, \"$1.\" + hashq(r[1])).replace(/\\.$/, \".\" + hashq(r[1]));\n        o = o.replace(/\\.(\\d*)$/, function($$, $1) {\n            /*:: if(!Array.isArray(r)) throw new Error(\"unreachable\"); */ return \".\" + $1 + fill(\"0\", hashq(r[1]).length - $1.length);\n        });\n        return fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./, \".\");\n    }\n    fmt = fmt.replace(/^#+([0.])/, \"$1\");\n    if (r = fmt.match(/^(0*)\\.(#*)$/)) {\n        return sign + (\"\" + aval).replace(/\\.(\\d*[1-9])0*$/, \".$1\").replace(/^(-?\\d*)$/, \"$1.\").replace(/^0\\./, r[1].length ? \"0.\" : \".\");\n    }\n    if (r = fmt.match(/^#{1,3},##0(\\.?)$/)) return sign + commaify(\"\" + aval);\n    if (r = fmt.match(/^#,##0\\.([#0]*0)$/)) {\n        return val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\" + val) + \".\" + fill(\"0\", r[1].length);\n    }\n    if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, \"\"), val);\n    if (r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) {\n        o = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g, \"\"), val));\n        ri = 0;\n        return _strrev(_strrev(fmt.replace(/\\\\/g, \"\")).replace(/[0#]/g, function(x) {\n            return ri < o.length ? o.charAt(ri++) : x === \"0\" ? \"0\" : \"\";\n        }));\n    }\n    if (fmt.match(phone)) {\n        o = write_num_int(type, \"##########\", val);\n        return \"(\" + o.substr(0, 3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n    }\n    var oa = \"\";\n    if (r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n        ri = Math.min(/*::String(*/ r[4]/*::)*/ .length, 7);\n        ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);\n        o = \"\" + sign;\n        oa = write_num(\"n\", /*::String(*/ r[1], ff[1]);\n        if (oa.charAt(oa.length - 1) == \" \") oa = oa.substr(0, oa.length - 1) + \"0\";\n        o += oa + /*::String(*/ r[2] + \"/\" + /*::String(*/ r[3] /*::)*/ ;\n        oa = rpad_(ff[2], ri);\n        if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;\n        o += oa;\n        return o;\n    }\n    if (r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) {\n        ri = Math.min(Math.max(r[1].length, r[4].length), 7);\n        ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);\n        return sign + (ff[0] || (ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1], ri) + r[2] + \"/\" + r[3] + rpad_(ff[2], ri) : fill(\" \", 2 * ri + 1 + r[2].length + r[3].length));\n    }\n    if (r = fmt.match(/^[#0?]+$/)) {\n        o = \"\" + val;\n        if (fmt.length <= o.length) return o;\n        return hashq(fmt.substr(0, fmt.length - o.length)) + o;\n    }\n    if (r = fmt.match(/^([#0]+)\\.([#0]+)$/)) {\n        o = \"\" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, \"$1\");\n        ri = o.indexOf(\".\");\n        var lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n        return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));\n    }\n    if (r = fmt.match(/^00,000\\.([#0]*0)$/)) {\n        return val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\" + val).replace(/^\\d,\\d{3}$/, \"0$&\").replace(/^\\d*$/, function($$) {\n            return \"00,\" + ($$.length < 3 ? pad0(0, 3 - $$.length) : \"\") + $$;\n        }) + \".\" + pad0(0, r[1].length);\n    }\n    switch(fmt){\n        case \"###,###\":\n        case \"##,###\":\n        case \"#,###\":\n            var x = commaify(\"\" + aval);\n            return x !== \"0\" ? sign + x : \"\";\n        default:\n            if (fmt.match(/\\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(\".\")), val) + hashq(fmt.slice(fmt.lastIndexOf(\".\")));\n    }\n    throw new Error(\"unsupported format |\" + fmt + \"|\");\n}\nfunction write_num(type /*:string*/ , fmt /*:string*/ , val /*:number*/ ) /*:string*/ {\n    return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n}\nfunction SSF_split_fmt(fmt /*:string*/ ) /*:Array<string>*/ {\n    var out /*:Array<string>*/  = [];\n    var in_str = false /*, cc*/ ;\n    for(var i = 0, j = 0; i < fmt.length; ++i)switch(/*cc=*/ fmt.charCodeAt(i)){\n        case 34:\n            /* '\"' */ in_str = !in_str;\n            break;\n        case 95:\n        case 42:\n        case 92:\n            /* '_' '*' '\\\\' */ ++i;\n            break;\n        case 59:\n            /* ';' */ out[out.length] = fmt.substr(j, i - j);\n            j = i + 1;\n    }\n    out[out.length] = fmt.substr(j);\n    if (in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n    return out;\n}\nvar SSF_abstime = /\\[[HhMmSs\\u0E0A\\u0E19\\u0E17]*\\]/;\nfunction fmt_is_date(fmt /*:string*/ ) /*:boolean*/ {\n    var i = 0, /*cc = 0,*/ c = \"\", o = \"\";\n    while(i < fmt.length){\n        switch(c = fmt.charAt(i)){\n            case \"G\":\n                if (SSF_isgeneral(fmt, i)) i += 6;\n                i++;\n                break;\n            case '\"':\n                for(; /*cc=*/ fmt.charCodeAt(++i) !== 34 && i < fmt.length;){}\n                ++i;\n                break;\n            case \"\\\\\":\n                i += 2;\n                break;\n            case \"_\":\n                i += 2;\n                break;\n            case \"@\":\n                ++i;\n                break;\n            case \"B\":\n            case \"b\":\n                if (fmt.charAt(i + 1) === \"1\" || fmt.charAt(i + 1) === \"2\") return true;\n            /* falls through */ case \"M\":\n            case \"D\":\n            case \"Y\":\n            case \"H\":\n            case \"S\":\n            case \"E\":\n            /* falls through */ case \"m\":\n            case \"d\":\n            case \"y\":\n            case \"h\":\n            case \"s\":\n            case \"e\":\n            case \"g\":\n                return true;\n            case \"A\":\n            case \"a\":\n            case \"上\":\n                if (fmt.substr(i, 3).toUpperCase() === \"A/P\") return true;\n                if (fmt.substr(i, 5).toUpperCase() === \"AM/PM\") return true;\n                if (fmt.substr(i, 5).toUpperCase() === \"上午/下午\") return true;\n                ++i;\n                break;\n            case \"[\":\n                o = c;\n                while(fmt.charAt(i++) !== \"]\" && i < fmt.length)o += fmt.charAt(i);\n                if (o.match(SSF_abstime)) return true;\n                break;\n            case \".\":\n            /* falls through */ case \"0\":\n            case \"#\":\n                while(i < fmt.length && (\"0#?.,E+-%\".indexOf(c = fmt.charAt(++i)) > -1 || c == \"\\\\\" && fmt.charAt(i + 1) == \"-\" && \"0#\".indexOf(fmt.charAt(i + 2)) > -1)){}\n                break;\n            case \"?\":\n                while(fmt.charAt(++i) === c){}\n                break;\n            case \"*\":\n                ++i;\n                if (fmt.charAt(i) == \" \" || fmt.charAt(i) == \"*\") ++i;\n                break;\n            case \"(\":\n            case \")\":\n                ++i;\n                break;\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                while(i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1){}\n                break;\n            case \" \":\n                ++i;\n                break;\n            default:\n                ++i;\n                break;\n        }\n    }\n    return false;\n}\nfunction eval_fmt(fmt /*:string*/ , v /*:any*/ , opts /*:any*/ , flen /*:number*/ ) {\n    var out = [], o = \"\", i = 0, c = \"\", lst = \"t\", dt, j, cc;\n    var hr = \"H\";\n    /* Tokenize */ while(i < fmt.length){\n        switch(c = fmt.charAt(i)){\n            case \"G\":\n                /* General */ if (!SSF_isgeneral(fmt, i)) throw new Error(\"unrecognized character \" + c + \" in \" + fmt);\n                out[out.length] = {\n                    t: \"G\",\n                    v: \"General\"\n                };\n                i += 7;\n                break;\n            case '\"':\n                /* Literal text */ for(o = \"\"; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;)o += String.fromCharCode(cc);\n                out[out.length] = {\n                    t: \"t\",\n                    v: o\n                };\n                ++i;\n                break;\n            case \"\\\\\":\n                var w = fmt.charAt(++i), t = w === \"(\" || w === \")\" ? w : \"t\";\n                out[out.length] = {\n                    t: t,\n                    v: w\n                };\n                ++i;\n                break;\n            case \"_\":\n                out[out.length] = {\n                    t: \"t\",\n                    v: \" \"\n                };\n                i += 2;\n                break;\n            case \"@\":\n                /* Text Placeholder */ out[out.length] = {\n                    t: \"T\",\n                    v: v\n                };\n                ++i;\n                break;\n            case \"B\":\n            case \"b\":\n                if (fmt.charAt(i + 1) === \"1\" || fmt.charAt(i + 1) === \"2\") {\n                    if (dt == null) {\n                        dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === \"2\");\n                        if (dt == null) return \"\";\n                    }\n                    out[out.length] = {\n                        t: \"X\",\n                        v: fmt.substr(i, 2)\n                    };\n                    lst = c;\n                    i += 2;\n                    break;\n                }\n            /* falls through */ case \"M\":\n            case \"D\":\n            case \"Y\":\n            case \"H\":\n            case \"S\":\n            case \"E\":\n                c = c.toLowerCase();\n            /* falls through */ case \"m\":\n            case \"d\":\n            case \"y\":\n            case \"h\":\n            case \"s\":\n            case \"e\":\n            case \"g\":\n                if (v < 0) return \"\";\n                if (dt == null) {\n                    dt = SSF_parse_date_code(v, opts);\n                    if (dt == null) return \"\";\n                }\n                o = c;\n                while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c)o += c;\n                if (c === \"m\" && lst.toLowerCase() === \"h\") c = \"M\";\n                if (c === \"h\") c = hr;\n                out[out.length] = {\n                    t: c,\n                    v: o\n                };\n                lst = c;\n                break;\n            case \"A\":\n            case \"a\":\n            case \"上\":\n                var q = {\n                    t: c,\n                    v: c\n                };\n                if (dt == null) dt = SSF_parse_date_code(v, opts);\n                if (fmt.substr(i, 3).toUpperCase() === \"A/P\") {\n                    if (dt != null) q.v = dt.H >= 12 ? \"P\" : \"A\";\n                    q.t = \"T\";\n                    hr = \"h\";\n                    i += 3;\n                } else if (fmt.substr(i, 5).toUpperCase() === \"AM/PM\") {\n                    if (dt != null) q.v = dt.H >= 12 ? \"PM\" : \"AM\";\n                    q.t = \"T\";\n                    i += 5;\n                    hr = \"h\";\n                } else if (fmt.substr(i, 5).toUpperCase() === \"上午/下午\") {\n                    if (dt != null) q.v = dt.H >= 12 ? \"下午\" : \"上午\";\n                    q.t = \"T\";\n                    i += 5;\n                    hr = \"h\";\n                } else {\n                    q.t = \"t\";\n                    ++i;\n                }\n                if (dt == null && q.t === \"T\") return \"\";\n                out[out.length] = q;\n                lst = c;\n                break;\n            case \"[\":\n                o = c;\n                while(fmt.charAt(i++) !== \"]\" && i < fmt.length)o += fmt.charAt(i);\n                if (o.slice(-1) !== \"]\") throw 'unterminated \"[\" block: |' + o + \"|\";\n                if (o.match(SSF_abstime)) {\n                    if (dt == null) {\n                        dt = SSF_parse_date_code(v, opts);\n                        if (dt == null) return \"\";\n                    }\n                    out[out.length] = {\n                        t: \"Z\",\n                        v: o.toLowerCase()\n                    };\n                    lst = o.charAt(1);\n                } else if (o.indexOf(\"$\") > -1) {\n                    o = (o.match(/\\$([^-\\[\\]]*)/) || [])[1] || \"$\";\n                    if (!fmt_is_date(fmt)) out[out.length] = {\n                        t: \"t\",\n                        v: o\n                    };\n                }\n                break;\n            /* Numbers */ case \".\":\n                if (dt != null) {\n                    o = c;\n                    while(++i < fmt.length && (c = fmt.charAt(i)) === \"0\")o += c;\n                    out[out.length] = {\n                        t: \"s\",\n                        v: o\n                    };\n                    break;\n                }\n            /* falls through */ case \"0\":\n            case \"#\":\n                o = c;\n                while(++i < fmt.length && \"0#?.,E+-%\".indexOf(c = fmt.charAt(i)) > -1)o += c;\n                out[out.length] = {\n                    t: \"n\",\n                    v: o\n                };\n                break;\n            case \"?\":\n                o = c;\n                while(fmt.charAt(++i) === c)o += c;\n                out[out.length] = {\n                    t: c,\n                    v: o\n                };\n                lst = c;\n                break;\n            case \"*\":\n                ++i;\n                if (fmt.charAt(i) == \" \" || fmt.charAt(i) == \"*\") ++i;\n                break; // **\n            case \"(\":\n            case \")\":\n                out[out.length] = {\n                    t: flen === 1 ? \"t\" : c,\n                    v: c\n                };\n                ++i;\n                break;\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                o = c;\n                while(i < fmt.length && \"0123456789\".indexOf(fmt.charAt(++i)) > -1)o += fmt.charAt(i);\n                out[out.length] = {\n                    t: \"D\",\n                    v: o\n                };\n                break;\n            case \" \":\n                out[out.length] = {\n                    t: c,\n                    v: c\n                };\n                ++i;\n                break;\n            case \"$\":\n                out[out.length] = {\n                    t: \"t\",\n                    v: \"$\"\n                };\n                ++i;\n                break;\n            default:\n                if (\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP\".indexOf(c) === -1) throw new Error(\"unrecognized character \" + c + \" in \" + fmt);\n                out[out.length] = {\n                    t: \"t\",\n                    v: c\n                };\n                ++i;\n                break;\n        }\n    }\n    /* Scan for date/time parts */ var bt = 0, ss0 = 0, ssm;\n    for(i = out.length - 1, lst = \"t\"; i >= 0; --i){\n        switch(out[i].t){\n            case \"h\":\n            case \"H\":\n                out[i].t = hr;\n                lst = \"h\";\n                if (bt < 1) bt = 1;\n                break;\n            case \"s\":\n                if (ssm = out[i].v.match(/\\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);\n                if (bt < 3) bt = 3;\n            /* falls through */ case \"d\":\n            case \"y\":\n            case \"M\":\n            case \"e\":\n                lst = out[i].t;\n                break;\n            case \"m\":\n                if (lst === \"s\") {\n                    out[i].t = \"M\";\n                    if (bt < 2) bt = 2;\n                }\n                break;\n            case \"X\":\n                break;\n            case \"Z\":\n                if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n                if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n                if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n        }\n    }\n    /* time rounding depends on presence of minute / second / usec fields */ switch(bt){\n        case 0:\n            break;\n        case 1:\n            /*::if(!dt) break;*/ if (dt.u >= 0.5) {\n                dt.u = 0;\n                ++dt.S;\n            }\n            if (dt.S >= 60) {\n                dt.S = 0;\n                ++dt.M;\n            }\n            if (dt.M >= 60) {\n                dt.M = 0;\n                ++dt.H;\n            }\n            break;\n        case 2:\n            /*::if(!dt) break;*/ if (dt.u >= 0.5) {\n                dt.u = 0;\n                ++dt.S;\n            }\n            if (dt.S >= 60) {\n                dt.S = 0;\n                ++dt.M;\n            }\n            break;\n    }\n    /* replace fields */ var nstr = \"\", jj;\n    for(i = 0; i < out.length; ++i){\n        switch(out[i].t){\n            case \"t\":\n            case \"T\":\n            case \" \":\n            case \"D\":\n                break;\n            case \"X\":\n                out[i].v = \"\";\n                out[i].t = \";\";\n                break;\n            case \"d\":\n            case \"m\":\n            case \"y\":\n            case \"h\":\n            case \"H\":\n            case \"M\":\n            case \"s\":\n            case \"e\":\n            case \"b\":\n            case \"Z\":\n                /*::if(!dt) throw \"unreachable\"; */ out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n                out[i].t = \"t\";\n                break;\n            case \"n\":\n            case \"?\":\n                jj = i + 1;\n                while(out[jj] != null && ((c = out[jj].t) === \"?\" || c === \"D\" || (c === \" \" || c === \"t\") && out[jj + 1] != null && (out[jj + 1].t === \"?\" || out[jj + 1].t === \"t\" && out[jj + 1].v === \"/\") || out[i].t === \"(\" && (c === \" \" || c === \"n\" || c === \")\") || c === \"t\" && (out[jj].v === \"/\" || out[jj].v === \" \" && out[jj + 1] != null && out[jj + 1].t == \"?\"))){\n                    out[i].v += out[jj].v;\n                    out[jj] = {\n                        v: \"\",\n                        t: \";\"\n                    };\n                    ++jj;\n                }\n                nstr += out[i].v;\n                i = jj - 1;\n                break;\n            case \"G\":\n                out[i].t = \"t\";\n                out[i].v = SSF_general(v, opts);\n                break;\n        }\n    }\n    var vv = \"\", myv, ostr;\n    if (nstr.length > 0) {\n        if (nstr.charCodeAt(0) == 40) /* '(' */ {\n            myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;\n            ostr = write_num(\"n\", nstr, myv);\n        } else {\n            myv = v < 0 && flen > 1 ? -v : v;\n            ostr = write_num(\"n\", nstr, myv);\n            if (myv < 0 && out[0] && out[0].t == \"t\") {\n                ostr = ostr.substr(1);\n                out[0].v = \"-\" + out[0].v;\n            }\n        }\n        jj = ostr.length - 1;\n        var decpt = out.length;\n        for(i = 0; i < out.length; ++i)if (out[i] != null && out[i].t != \"t\" && out[i].v.indexOf(\".\") > -1) {\n            decpt = i;\n            break;\n        }\n        var lasti = out.length;\n        if (decpt === out.length && ostr.indexOf(\"E\") === -1) {\n            for(i = out.length - 1; i >= 0; --i){\n                if (out[i] == null || \"n?\".indexOf(out[i].t) === -1) continue;\n                if (jj >= out[i].v.length - 1) {\n                    jj -= out[i].v.length;\n                    out[i].v = ostr.substr(jj + 1, out[i].v.length);\n                } else if (jj < 0) out[i].v = \"\";\n                else {\n                    out[i].v = ostr.substr(0, jj + 1);\n                    jj = -1;\n                }\n                out[i].t = \"t\";\n                lasti = i;\n            }\n            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;\n        } else if (decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n            jj = ostr.indexOf(\".\") - 1;\n            for(i = decpt; i >= 0; --i){\n                if (out[i] == null || \"n?\".indexOf(out[i].t) === -1) continue;\n                j = out[i].v.indexOf(\".\") > -1 && i === decpt ? out[i].v.indexOf(\".\") - 1 : out[i].v.length - 1;\n                vv = out[i].v.substr(j + 1);\n                for(; j >= 0; --j){\n                    if (jj >= 0 && (out[i].v.charAt(j) === \"0\" || out[i].v.charAt(j) === \"#\")) vv = ostr.charAt(jj--) + vv;\n                }\n                out[i].v = vv;\n                out[i].t = \"t\";\n                lasti = i;\n            }\n            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;\n            jj = ostr.indexOf(\".\") + 1;\n            for(i = decpt; i < out.length; ++i){\n                if (out[i] == null || \"n?(\".indexOf(out[i].t) === -1 && i !== decpt) continue;\n                j = out[i].v.indexOf(\".\") > -1 && i === decpt ? out[i].v.indexOf(\".\") + 1 : 0;\n                vv = out[i].v.substr(0, j);\n                for(; j < out[i].v.length; ++j){\n                    if (jj < ostr.length) vv += ostr.charAt(jj++);\n                }\n                out[i].v = vv;\n                out[i].t = \"t\";\n                lasti = i;\n            }\n        }\n    }\n    for(i = 0; i < out.length; ++i)if (out[i] != null && \"n?\".indexOf(out[i].t) > -1) {\n        myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === \"-\" ? -v : v;\n        out[i].v = write_num(out[i].t, out[i].v, myv);\n        out[i].t = \"t\";\n    }\n    var retval = \"\";\n    for(i = 0; i !== out.length; ++i)if (out[i] != null) retval += out[i].v;\n    return retval;\n}\nvar cfregex2 = /\\[(=|>[=]?|<[>=]?)(-?\\d+(?:\\.\\d*)?)\\]/;\nfunction chkcond(v, rr) {\n    if (rr == null) return false;\n    var thresh = parseFloat(rr[2]);\n    switch(rr[1]){\n        case \"=\":\n            if (v == thresh) return true;\n            break;\n        case \">\":\n            if (v > thresh) return true;\n            break;\n        case \"<\":\n            if (v < thresh) return true;\n            break;\n        case \"<>\":\n            if (v != thresh) return true;\n            break;\n        case \">=\":\n            if (v >= thresh) return true;\n            break;\n        case \"<=\":\n            if (v <= thresh) return true;\n            break;\n    }\n    return false;\n}\nfunction choose_fmt(f /*:string*/ , v /*:any*/ ) {\n    var fmt = SSF_split_fmt(f);\n    var l = fmt.length, lat = fmt[l - 1].indexOf(\"@\");\n    if (l < 4 && lat > -1) --l;\n    if (fmt.length > 4) throw new Error(\"cannot find right format for |\" + fmt.join(\"|\") + \"|\");\n    if (typeof v !== \"number\") return [\n        4,\n        fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : \"@\"\n    ];\n    switch(fmt.length){\n        case 1:\n            fmt = lat > -1 ? [\n                \"General\",\n                \"General\",\n                \"General\",\n                fmt[0]\n            ] : [\n                fmt[0],\n                fmt[0],\n                fmt[0],\n                \"@\"\n            ];\n            break;\n        case 2:\n            fmt = lat > -1 ? [\n                fmt[0],\n                fmt[0],\n                fmt[0],\n                fmt[1]\n            ] : [\n                fmt[0],\n                fmt[1],\n                fmt[0],\n                \"@\"\n            ];\n            break;\n        case 3:\n            fmt = lat > -1 ? [\n                fmt[0],\n                fmt[1],\n                fmt[0],\n                fmt[2]\n            ] : [\n                fmt[0],\n                fmt[1],\n                fmt[2],\n                \"@\"\n            ];\n            break;\n        case 4:\n            break;\n    }\n    var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n    if (fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [\n        l,\n        ff\n    ];\n    if (fmt[0].match(/\\[[=<>]/) != null || fmt[1].match(/\\[[=<>]/) != null) {\n        var m1 = fmt[0].match(cfregex2);\n        var m2 = fmt[1].match(cfregex2);\n        return chkcond(v, m1) ? [\n            l,\n            fmt[0]\n        ] : chkcond(v, m2) ? [\n            l,\n            fmt[1]\n        ] : [\n            l,\n            fmt[m1 != null && m2 != null ? 2 : 1]\n        ];\n    }\n    return [\n        l,\n        ff\n    ];\n}\nfunction SSF_format(fmt /*:string|number*/ , v /*:any*/ , o /*:?any*/ ) {\n    if (o == null) o = {};\n    var sfmt = \"\";\n    switch(typeof fmt){\n        case \"string\":\n            if (fmt == \"m/d/yy\" && o.dateNF) sfmt = o.dateNF;\n            else sfmt = fmt;\n            break;\n        case \"number\":\n            if (fmt == 14 && o.dateNF) sfmt = o.dateNF;\n            else sfmt = (o.table != null ? o.table /*:any*/  : table_fmt)[fmt];\n            if (sfmt == null) sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];\n            if (sfmt == null) sfmt = SSF_default_str[fmt] || \"General\";\n            break;\n    }\n    if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);\n    if (v instanceof Date) v = datenum_local(v, o.date1904);\n    var f = choose_fmt(sfmt, v);\n    if (SSF_isgeneral(f[1])) return SSF_general(v, o);\n    if (v === true) v = \"TRUE\";\n    else if (v === false) v = \"FALSE\";\n    else if (v === \"\" || v == null) return \"\";\n    return eval_fmt(f[1], v, o, f[0]);\n}\nfunction SSF_load(fmt /*:string*/ , idx /*:?number*/ ) /*:number*/ {\n    if (typeof idx != \"number\") {\n        idx = +idx || -1;\n        /*::if(typeof idx != 'number') return 0x188; */ for(var i = 0; i < 0x0188; ++i){\n            /*::if(typeof idx != 'number') return 0x188; */ if (table_fmt[i] == undefined) {\n                if (idx < 0) idx = i;\n                continue;\n            }\n            if (table_fmt[i] == fmt) {\n                idx = i;\n                break;\n            }\n        }\n        /*::if(typeof idx != 'number') return 0x188; */ if (idx < 0) idx = 0x187;\n    }\n    /*::if(typeof idx != 'number') return 0x188; */ table_fmt[idx] = fmt;\n    return idx;\n}\nfunction SSF_load_table(tbl /*:SSFTable*/ ) /*:void*/ {\n    for(var i = 0; i != 0x0188; ++i)if (tbl[i] !== undefined) SSF_load(tbl[i], i);\n}\nfunction make_ssf() {\n    table_fmt = SSF_init_table();\n}\nvar SSF = {\n    format: SSF_format,\n    load: SSF_load,\n    _table: table_fmt,\n    load_table: SSF_load_table,\n    parse_date_code: SSF_parse_date_code,\n    is_date: fmt_is_date,\n    get_table: function get_table() {\n        return SSF._table = table_fmt;\n    }\n};\nvar SSFImplicit /*{[number]:string}*/  = {\n    \"5\": '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n    \"6\": '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n    \"7\": '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n    \"8\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n    \"23\": \"General\",\n    \"24\": \"General\",\n    \"25\": \"General\",\n    \"26\": \"General\",\n    \"27\": \"m/d/yy\",\n    \"28\": \"m/d/yy\",\n    \"29\": \"m/d/yy\",\n    \"30\": \"m/d/yy\",\n    \"31\": \"m/d/yy\",\n    \"32\": \"h:mm:ss\",\n    \"33\": \"h:mm:ss\",\n    \"34\": \"h:mm:ss\",\n    \"35\": \"h:mm:ss\",\n    \"36\": \"m/d/yy\",\n    \"41\": '_(* #,##0_);_(* (#,##0);_(* \"-\"_);_(@_)',\n    \"42\": '_(\"$\"* #,##0_);_(\"$\"* (#,##0);_(\"$\"* \"-\"_);_(@_)',\n    \"43\": '_(* #,##0.00_);_(* (#,##0.00);_(* \"-\"??_);_(@_)',\n    \"44\": '_(\"$\"* #,##0.00_);_(\"$\"* (#,##0.00);_(\"$\"* \"-\"??_);_(@_)',\n    \"50\": \"m/d/yy\",\n    \"51\": \"m/d/yy\",\n    \"52\": \"m/d/yy\",\n    \"53\": \"m/d/yy\",\n    \"54\": \"m/d/yy\",\n    \"55\": \"m/d/yy\",\n    \"56\": \"m/d/yy\",\n    \"57\": \"m/d/yy\",\n    \"58\": \"m/d/yy\",\n    \"59\": \"0\",\n    \"60\": \"0.00\",\n    \"61\": \"#,##0\",\n    \"62\": \"#,##0.00\",\n    \"63\": '\"$\"#,##0_);\\\\(\"$\"#,##0\\\\)',\n    \"64\": '\"$\"#,##0_);[Red]\\\\(\"$\"#,##0\\\\)',\n    \"65\": '\"$\"#,##0.00_);\\\\(\"$\"#,##0.00\\\\)',\n    \"66\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n    \"67\": \"0%\",\n    \"68\": \"0.00%\",\n    \"69\": \"# ?/?\",\n    \"70\": \"# ??/??\",\n    \"71\": \"m/d/yy\",\n    \"72\": \"m/d/yy\",\n    \"73\": \"d-mmm-yy\",\n    \"74\": \"d-mmm\",\n    \"75\": \"mmm-yy\",\n    \"76\": \"h:mm\",\n    \"77\": \"h:mm:ss\",\n    \"78\": \"m/d/yy h:mm\",\n    \"79\": \"mm:ss\",\n    \"80\": \"[h]:mm:ss\",\n    \"81\": \"mmss.0\"\n} /*:any*/ ;\n/* dateNF parse TODO: move to SSF */ var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;\nfunction dateNF_regex(dateNF /*:string|number*/ ) /*:RegExp*/ {\n    var fmt = typeof dateNF == \"number\" ? table_fmt[dateNF] : dateNF;\n    fmt = fmt.replace(dateNFregex, \"(\\\\d+)\");\n    return new RegExp(\"^\" + fmt + \"$\");\n}\nfunction dateNF_fix(str /*:string*/ , dateNF /*:string*/ , match /*:Array<string>*/ ) /*:string*/ {\n    var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;\n    (dateNF.match(dateNFregex) || []).forEach(function(n, i) {\n        var v = parseInt(match[i + 1], 10);\n        switch(n.toLowerCase().charAt(0)){\n            case \"y\":\n                Y = v;\n                break;\n            case \"d\":\n                d = v;\n                break;\n            case \"h\":\n                H = v;\n                break;\n            case \"s\":\n                S = v;\n                break;\n            case \"m\":\n                if (H >= 0) M = v;\n                else m = v;\n                break;\n        }\n    });\n    if (S >= 0 && M == -1 && m >= 0) {\n        M = m;\n        m = -1;\n    }\n    var datestr = (\"\" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + \"-\" + (\"00\" + (m >= 1 ? m : 1)).slice(-2) + \"-\" + (\"00\" + (d >= 1 ? d : 1)).slice(-2);\n    if (datestr.length == 7) datestr = \"0\" + datestr;\n    if (datestr.length == 8) datestr = \"20\" + datestr;\n    var timestr = (\"00\" + (H >= 0 ? H : 0)).slice(-2) + \":\" + (\"00\" + (M >= 0 ? M : 0)).slice(-2) + \":\" + (\"00\" + (S >= 0 ? S : 0)).slice(-2);\n    if (H == -1 && M == -1 && S == -1) return datestr;\n    if (Y == -1 && m == -1 && d == -1) return timestr;\n    return datestr + \"T\" + timestr;\n}\n/*::\ndeclare var ReadShift:any;\ndeclare var CheckField:any;\ndeclare var prep_blob:any;\ndeclare var __readUInt32LE:any;\ndeclare var __readInt32LE:any;\ndeclare var __toBuffer:any;\ndeclare var __utf16le:any;\ndeclare var bconcat:any;\ndeclare var s2a:any;\ndeclare var chr0:any;\ndeclare var chr1:any;\ndeclare var has_buf:boolean;\ndeclare var new_buf:any;\ndeclare var new_raw_buf:any;\ndeclare var new_unsafe_buf:any;\ndeclare var Buffer_from:any;\n*/ /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*jshint eqnull:true */ /*exported CFB */ /*global Uint8Array:false, Uint16Array:false */ /*::\ntype SectorEntry = {\n\tname?:string;\n\tnodes?:Array<number>;\n\tdata:RawBytes;\n};\ntype SectorList = {\n\t[k:string|number]:SectorEntry;\n\tname:?string;\n\tfat_addrs:Array<number>;\n\tssz:number;\n}\ntype CFBFiles = {[n:string]:CFBEntry};\n*/ /* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported CRC32 */ var CRC32 = /*#__PURE__*/ function() {\n    var CRC32 = {};\n    CRC32.version = \"1.2.0\";\n    /* see perf/crc32table.js */ /*global Int32Array */ function signed_crc_table() /*:any*/ {\n        var c = 0, table /*:Array<number>*/  = new Array(256);\n        for(var n = 0; n != 256; ++n){\n            c = n;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n            table[n] = c;\n        }\n        return typeof Int32Array !== \"undefined\" ? new Int32Array(table) : table;\n    }\n    var T0 = signed_crc_table();\n    function slice_by_16_tables(T) {\n        var c = 0, v = 0, n = 0, table /*:Array<number>*/  = typeof Int32Array !== \"undefined\" ? new Int32Array(4096) : new Array(4096);\n        for(n = 0; n != 256; ++n)table[n] = T[n];\n        for(n = 0; n != 256; ++n){\n            v = T[n];\n            for(c = 256 + n; c < 4096; c += 256)v = table[c] = v >>> 8 ^ T[v & 0xFF];\n        }\n        var out = [];\n        for(n = 1; n != 16; ++n)out[n - 1] = typeof Int32Array !== \"undefined\" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n        return out;\n    }\n    var TT = slice_by_16_tables(T0);\n    var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];\n    var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];\n    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\n    function crc32_bstr(bstr /*:string*/ , seed /*:number*/ ) /*:number*/ {\n        var C = seed /*:: ? 0 : 0 */  ^ -1;\n        for(var i = 0, L = bstr.length; i < L;)C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 0xFF];\n        return ~C;\n    }\n    function crc32_buf(B /*:Uint8Array|Array<number>*/ , seed /*:number*/ ) /*:number*/ {\n        var C = seed /*:: ? 0 : 0 */  ^ -1, L = B.length - 15, i = 0;\n        for(; i < L;)C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n        L += 15;\n        while(i < L)C = C >>> 8 ^ T0[(C ^ B[i++]) & 0xFF];\n        return ~C;\n    }\n    function crc32_str(str /*:string*/ , seed /*:number*/ ) /*:number*/ {\n        var C = seed ^ -1;\n        for(var i = 0, L = str.length, c = 0, d = 0; i < L;){\n            c = str.charCodeAt(i++);\n            if (c < 0x80) {\n                C = C >>> 8 ^ T0[(C ^ c) & 0xFF];\n            } else if (c < 0x800) {\n                C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xFF];\n                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];\n            } else if (c >= 0xD800 && c < 0xE000) {\n                c = (c & 1023) + 64;\n                d = str.charCodeAt(i++) & 1023;\n                C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xFF];\n                C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xFF];\n                C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];\n                C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xFF];\n            } else {\n                C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xFF];\n                C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xFF];\n                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];\n            }\n        }\n        return ~C;\n    }\n    CRC32.table = T0;\n    CRC32.bstr = crc32_bstr;\n    CRC32.buf = crc32_buf;\n    CRC32.str = crc32_str;\n    return CRC32;\n}();\n/* [MS-CFB] v20171201 */ var CFB = /*#__PURE__*/ function _CFB() {\n    var exports = {};\n    exports.version = \"1.2.1\";\n    /* [MS-CFB] 2.6.4 */ function namecmp(l /*:string*/ , r /*:string*/ ) /*:number*/ {\n        var L = l.split(\"/\"), R = r.split(\"/\");\n        for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i){\n            if (c = L[i].length - R[i].length) return c;\n            if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n        }\n        return L.length - R.length;\n    }\n    function dirname(p /*:string*/ ) /*:string*/ {\n        if (p.charAt(p.length - 1) == \"/\") return p.slice(0, -1).indexOf(\"/\") === -1 ? p : dirname(p.slice(0, -1));\n        var c = p.lastIndexOf(\"/\");\n        return c === -1 ? p : p.slice(0, c + 1);\n    }\n    function filename(p /*:string*/ ) /*:string*/ {\n        if (p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n        var c = p.lastIndexOf(\"/\");\n        return c === -1 ? p : p.slice(c + 1);\n    }\n    /* -------------------------------------------------------------------------- */ /* DOS Date format:\n   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n   add 1980 to stored year\n   stored second should be doubled\n*/ /* write JS date to buf as a DOS date */ function write_dos_date(buf /*:CFBlob*/ , date /*:Date|string*/ ) {\n        if (typeof date === \"string\") date = new Date(date);\n        var hms /*:number*/  = date.getHours();\n        hms = hms << 6 | date.getMinutes();\n        hms = hms << 5 | date.getSeconds() >>> 1;\n        buf.write_shift(2, hms);\n        var ymd /*:number*/  = date.getFullYear() - 1980;\n        ymd = ymd << 4 | date.getMonth() + 1;\n        ymd = ymd << 5 | date.getDate();\n        buf.write_shift(2, ymd);\n    }\n    /* read four bytes from buf and interpret as a DOS date */ function parse_dos_date(buf /*:CFBlob*/ ) /*:Date*/ {\n        var hms = buf.read_shift(2) & 0xFFFF;\n        var ymd = buf.read_shift(2) & 0xFFFF;\n        var val = new Date();\n        var d = ymd & 0x1F;\n        ymd >>>= 5;\n        var m = ymd & 0x0F;\n        ymd >>>= 4;\n        val.setMilliseconds(0);\n        val.setFullYear(ymd + 1980);\n        val.setMonth(m - 1);\n        val.setDate(d);\n        var S = hms & 0x1F;\n        hms >>>= 5;\n        var M = hms & 0x3F;\n        hms >>>= 6;\n        val.setHours(hms);\n        val.setMinutes(M);\n        val.setSeconds(S << 1);\n        return val;\n    }\n    function parse_extra_field(blob /*:CFBlob*/ ) /*:any*/ {\n        prep_blob(blob, 0);\n        var o = /*::(*/ {} /*:: :any)*/ ;\n        var flags = 0;\n        while(blob.l <= blob.length - 4){\n            var type = blob.read_shift(2);\n            var sz = blob.read_shift(2), tgt = blob.l + sz;\n            var p = {};\n            switch(type){\n                /* UNIX-style Timestamps */ case 0x5455:\n                    {\n                        flags = blob.read_shift(1);\n                        if (flags & 1) p.mtime = blob.read_shift(4);\n                        /* for some reason, CD flag corresponds to LFH */ if (sz > 5) {\n                            if (flags & 2) p.atime = blob.read_shift(4);\n                            if (flags & 4) p.ctime = blob.read_shift(4);\n                        }\n                        if (p.mtime) p.mt = new Date(p.mtime * 1000);\n                    }\n                    break;\n            }\n            blob.l = tgt;\n            o[type] = p;\n        }\n        return o;\n    }\n    var fs /*:: = require('fs'); */ ;\n    function get_fs() {\n        return fs || (fs = {});\n    }\n    function parse(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {\n        if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\n        if ((file[0] | 0x20) == 0x6d && (file[1] | 0x20) == 0x69) return parse_mad(file, options);\n        if (file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\n        var mver = 3;\n        var ssz = 512;\n        var nmfs = 0; // number of mini FAT sectors\n        var difat_sec_cnt = 0;\n        var dir_start = 0;\n        var minifat_start = 0;\n        var difat_start = 0;\n        var fat_addrs /*:Array<number>*/  = []; // locations of FAT sectors\n        /* [MS-CFB] 2.2 Compound File Header */ var blob /*:CFBlob*/  = /*::(*/ file.slice(0, 512) /*:: :any)*/ ;\n        prep_blob(blob, 0);\n        /* major version */ var mv = check_get_mver(blob);\n        mver = mv[0];\n        switch(mver){\n            case 3:\n                ssz = 512;\n                break;\n            case 4:\n                ssz = 4096;\n                break;\n            case 0:\n                if (mv[1] == 0) return parse_zip(file, options);\n            /* falls through */ default:\n                throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n        }\n        /* reprocess header */ if (ssz !== 512) {\n            blob = /*::(*/ file.slice(0, ssz) /*:: :any)*/ ;\n            prep_blob(blob, 28 /* blob.l */ );\n        }\n        /* Save header for final object */ var header /*:RawBytes*/  = file.slice(0, ssz);\n        check_shifts(blob, mver);\n        // Number of Directory Sectors\n        var dir_cnt /*:number*/  = blob.read_shift(4, \"i\");\n        if (mver === 3 && dir_cnt !== 0) throw new Error(\"# Directory Sectors: Expected 0 saw \" + dir_cnt);\n        // Number of FAT Sectors\n        blob.l += 4;\n        // First Directory Sector Location\n        dir_start = blob.read_shift(4, \"i\");\n        // Transaction Signature\n        blob.l += 4;\n        // Mini Stream Cutoff Size\n        blob.chk(\"00100000\", \"Mini Stream Cutoff Size: \");\n        // First Mini FAT Sector Location\n        minifat_start = blob.read_shift(4, \"i\");\n        // Number of Mini FAT Sectors\n        nmfs = blob.read_shift(4, \"i\");\n        // First DIFAT sector location\n        difat_start = blob.read_shift(4, \"i\");\n        // Number of DIFAT Sectors\n        difat_sec_cnt = blob.read_shift(4, \"i\");\n        // Grab FAT Sector Locations\n        for(var q = -1, j = 0; j < 109; ++j){\n            q = blob.read_shift(4, \"i\");\n            if (q < 0) break;\n            fat_addrs[j] = q;\n        }\n        /** Break the file up into sectors */ var sectors /*:Array<RawBytes>*/  = sectorify(file, ssz);\n        sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n        /** Chains */ var sector_list /*:SectorList*/  = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n        sector_list[dir_start].name = \"!Directory\";\n        if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\n        sector_list[fat_addrs[0]].name = \"!FAT\";\n        sector_list.fat_addrs = fat_addrs;\n        sector_list.ssz = ssz;\n        /* [MS-CFB] 2.6.1 Compound File Directory Entry */ var files /*:CFBFiles*/  = {}, Paths /*:Array<string>*/  = [], FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];\n        read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n        build_full_paths(FileIndex, FullPaths, Paths);\n        Paths.shift();\n        var o = {\n            FileIndex: FileIndex,\n            FullPaths: FullPaths\n        };\n        // $FlowIgnore\n        if (options && options.raw) o.raw = {\n            header: header,\n            sectors: sectors\n        };\n        return o;\n    } // parse\n    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */ function check_get_mver(blob /*:CFBlob*/ ) /*:[number, number]*/ {\n        if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [\n            0,\n            0\n        ];\n        // header signature 8\n        blob.chk(HEADER_SIGNATURE, \"Header Signature: \");\n        // clsid 16\n        //blob.chk(HEADER_CLSID, 'CLSID: ');\n        blob.l += 16;\n        // minor version 2\n        var mver /*:number*/  = blob.read_shift(2, \"u\");\n        return [\n            blob.read_shift(2, \"u\"),\n            mver\n        ];\n    }\n    function check_shifts(blob /*:CFBlob*/ , mver /*:number*/ ) /*:void*/ {\n        var shift = 0x09;\n        // Byte Order\n        //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n        blob.l += 2;\n        // Sector Shift\n        switch(shift = blob.read_shift(2)){\n            case 0x09:\n                if (mver != 3) throw new Error(\"Sector Shift: Expected 9 saw \" + shift);\n                break;\n            case 0x0c:\n                if (mver != 4) throw new Error(\"Sector Shift: Expected 12 saw \" + shift);\n                break;\n            default:\n                throw new Error(\"Sector Shift: Expected 9 or 12 saw \" + shift);\n        }\n        // Mini Sector Shift\n        blob.chk(\"0600\", \"Mini Sector Shift: \");\n        // Reserved\n        blob.chk(\"000000000000\", \"Reserved: \");\n    }\n    /** Break the file up into sectors */ function sectorify(file /*:RawBytes*/ , ssz /*:number*/ ) /*:Array<RawBytes>*/ {\n        var nsectors = Math.ceil(file.length / ssz) - 1;\n        var sectors /*:Array<RawBytes>*/  = [];\n        for(var i = 1; i < nsectors; ++i)sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);\n        sectors[nsectors - 1] = file.slice(nsectors * ssz);\n        return sectors;\n    }\n    /* [MS-CFB] 2.6.4 Red-Black Tree */ function build_full_paths(FI /*:CFBFileIndex*/ , FP /*:Array<string>*/ , Paths /*:Array<string>*/ ) /*:void*/ {\n        var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;\n        var dad /*:Array<number>*/  = [], q /*:Array<number>*/  = [];\n        for(; i < pl; ++i){\n            dad[i] = q[i] = i;\n            FP[i] = Paths[i];\n        }\n        for(; j < q.length; ++j){\n            i = q[j];\n            L = FI[i].L;\n            R = FI[i].R;\n            C = FI[i].C;\n            if (dad[i] === i) {\n                if (L !== -1 /*NOSTREAM*/  && dad[L] !== L) dad[i] = dad[L];\n                if (R !== -1 && dad[R] !== R) dad[i] = dad[R];\n            }\n            if (C !== -1 /*NOSTREAM*/ ) dad[C] = i;\n            if (L !== -1 && i != dad[i]) {\n                dad[L] = dad[i];\n                if (q.lastIndexOf(L) < j) q.push(L);\n            }\n            if (R !== -1 && i != dad[i]) {\n                dad[R] = dad[i];\n                if (q.lastIndexOf(R) < j) q.push(R);\n            }\n        }\n        for(i = 1; i < pl; ++i)if (dad[i] === i) {\n            if (R !== -1 /*NOSTREAM*/  && dad[R] !== R) dad[i] = dad[R];\n            else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];\n        }\n        for(i = 1; i < pl; ++i){\n            if (FI[i].type === 0 /* unknown */ ) continue;\n            j = i;\n            if (j != dad[j]) do {\n                j = dad[j];\n                FP[i] = FP[j] + \"/\" + FP[i];\n            }while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n            dad[i] = -1;\n        }\n        FP[0] += \"/\";\n        for(i = 1; i < pl; ++i){\n            if (FI[i].type !== 2 /* stream */ ) FP[i] += \"/\";\n        }\n    }\n    function get_mfat_entry(entry /*:CFBEntry*/ , payload /*:RawBytes*/ , mini /*:?RawBytes*/ ) /*:CFBlob*/ {\n        var start = entry.start, size = entry.size;\n        //return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);\n        var o = [];\n        var idx = start;\n        while(mini && size > 0 && idx >= 0){\n            o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n            size -= MSSZ;\n            idx = __readInt32LE(mini, idx * 4);\n        }\n        if (o.length === 0) return new_buf(0);\n        return bconcat(o).slice(0, entry.size);\n    }\n    /** Chase down the rest of the DIFAT chain to build a comprehensive list\n    DIFAT chains by storing the next sector number as the last 32 bits */ function sleuth_fat(idx /*:number*/ , cnt /*:number*/ , sectors /*:Array<RawBytes>*/ , ssz /*:number*/ , fat_addrs) /*:void*/ {\n        var q /*:number*/  = ENDOFCHAIN;\n        if (idx === ENDOFCHAIN) {\n            if (cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n        } else if (idx !== -1 /*FREESECT*/ ) {\n            var sector = sectors[idx], m = (ssz >>> 2) - 1;\n            if (!sector) return;\n            for(var i = 0; i < m; ++i){\n                if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;\n                fat_addrs.push(q);\n            }\n            sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);\n        }\n    }\n    /** Follow the linked list of sectors for a given starting point */ function get_sector_list(sectors /*:Array<RawBytes>*/ , start /*:number*/ , fat_addrs /*:Array<number>*/ , ssz /*:number*/ , chkd /*:?Array<boolean>*/ ) /*:SectorEntry*/ {\n        var buf /*:Array<number>*/  = [], buf_chain /*:Array<any>*/  = [];\n        if (!chkd) chkd = [];\n        var modulus = ssz - 1, j = 0, jj = 0;\n        for(j = start; j >= 0;){\n            chkd[j] = true;\n            buf[buf.length] = j;\n            buf_chain.push(sectors[j]);\n            var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n            jj = j * 4 & modulus;\n            if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n            if (!sectors[addr]) break;\n            j = __readInt32LE(sectors[addr], jj);\n        }\n        return {\n            nodes: buf,\n            data: __toBuffer([\n                buf_chain\n            ])\n        };\n    }\n    /** Chase down the sector linked lists */ function make_sector_list(sectors /*:Array<RawBytes>*/ , dir_start /*:number*/ , fat_addrs /*:Array<number>*/ , ssz /*:number*/ ) /*:SectorList*/ {\n        var sl = sectors.length, sector_list /*:SectorList*/  = [];\n        var chkd /*:Array<boolean>*/  = [], buf /*:Array<number>*/  = [], buf_chain /*:Array<RawBytes>*/  = [];\n        var modulus = ssz - 1, i = 0, j = 0, k = 0, jj = 0;\n        for(i = 0; i < sl; ++i){\n            buf = [];\n            k = i + dir_start;\n            if (k >= sl) k -= sl;\n            if (chkd[k]) continue;\n            buf_chain = [];\n            var seen = [];\n            for(j = k; j >= 0;){\n                seen[j] = true;\n                chkd[j] = true;\n                buf[buf.length] = j;\n                buf_chain.push(sectors[j]);\n                var addr /*:number*/  = fat_addrs[Math.floor(j * 4 / ssz)];\n                jj = j * 4 & modulus;\n                if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n                if (!sectors[addr]) break;\n                j = __readInt32LE(sectors[addr], jj);\n                if (seen[j]) break;\n            }\n            sector_list[k] = {\n                nodes: buf,\n                data: __toBuffer([\n                    buf_chain\n                ])\n            } /*:SectorEntry*/ ;\n        }\n        return sector_list;\n    }\n    /* [MS-CFB] 2.6.1 Compound File Directory Entry */ function read_directory(dir_start /*:number*/ , sector_list /*:SectorList*/ , sectors /*:Array<RawBytes>*/ , Paths /*:Array<string>*/ , nmfs, files, FileIndex, mini) {\n        var minifat_store = 0, pl = Paths.length ? 2 : 0;\n        var sector = sector_list[dir_start].data;\n        var i = 0, namelen = 0, name;\n        for(; i < sector.length; i += 128){\n            var blob /*:CFBlob*/  = /*::(*/ sector.slice(i, i + 128) /*:: :any)*/ ;\n            prep_blob(blob, 64);\n            namelen = blob.read_shift(2);\n            name = __utf16le(blob, 0, namelen - pl);\n            Paths.push(name);\n            var o /*:CFBEntry*/  = {\n                name: name,\n                type: blob.read_shift(1),\n                color: blob.read_shift(1),\n                L: blob.read_shift(4, \"i\"),\n                R: blob.read_shift(4, \"i\"),\n                C: blob.read_shift(4, \"i\"),\n                clsid: blob.read_shift(16),\n                state: blob.read_shift(4, \"i\"),\n                start: 0,\n                size: 0\n            };\n            var ctime /*:number*/  = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n            if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);\n            var mtime /*:number*/  = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n            if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);\n            o.start = blob.read_shift(4, \"i\");\n            o.size = blob.read_shift(4, \"i\");\n            if (o.size < 0 && o.start < 0) {\n                o.size = o.type = 0;\n                o.start = ENDOFCHAIN;\n                o.name = \"\";\n            }\n            if (o.type === 5) {\n                minifat_store = o.start;\n                if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n            /*minifat_size = o.size;*/ } else if (o.size >= 4096 /* MSCSZ */ ) {\n                o.storage = \"fat\";\n                if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n                sector_list[o.start].name = o.name;\n                o.content = sector_list[o.start].data.slice(0, o.size);\n            } else {\n                o.storage = \"minifat\";\n                if (o.size < 0) o.size = 0;\n                else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n                    o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);\n                }\n            }\n            if (o.content) prep_blob(o.content, 0);\n            files[name] = o;\n            FileIndex.push(o);\n        }\n    }\n    function read_date(blob /*:RawBytes|CFBlob*/ , offset /*:number*/ ) /*:Date*/ {\n        return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);\n    }\n    function read_file(filename /*:string*/ , options /*:CFBReadOpts*/ ) {\n        get_fs();\n        return parse(fs.readFileSync(filename), options);\n    }\n    function read(blob /*:RawBytes|string*/ , options /*:CFBReadOpts*/ ) {\n        var type = options && options.type;\n        if (!type) {\n            if (has_buf && Buffer.isBuffer(blob)) type = \"buffer\";\n        }\n        switch(type || \"base64\"){\n            case \"file\":\n                /*:: if(typeof blob !== 'string') throw \"Must pass a filename when type='file'\"; */ return read_file(blob, options);\n            case \"base64\":\n                /*:: if(typeof blob !== 'string') throw \"Must pass a base64-encoded binary string when type='file'\"; */ return parse(s2a(Base64_decode(blob)), options);\n            case \"binary\":\n                /*:: if(typeof blob !== 'string') throw \"Must pass a binary string when type='file'\"; */ return parse(s2a(blob), options);\n        }\n        return parse(/*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */ blob, options);\n    }\n    function init_cfb(cfb /*:CFBContainer*/ , opts /*:?any*/ ) /*:void*/ {\n        var o = opts || {}, root = o.root || \"Root Entry\";\n        if (!cfb.FullPaths) cfb.FullPaths = [];\n        if (!cfb.FileIndex) cfb.FileIndex = [];\n        if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n        if (cfb.FullPaths.length === 0) {\n            cfb.FullPaths[0] = root + \"/\";\n            cfb.FileIndex[0] = {\n                name: root,\n                type: 5\n            } /*:any*/ ;\n        }\n        if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n        seed_cfb(cfb);\n    }\n    function seed_cfb(cfb /*:CFBContainer*/ ) /*:void*/ {\n        var nm = \"\\x01Sh33tJ5\";\n        if (CFB.find(cfb, \"/\" + nm)) return;\n        var p = new_buf(4);\n        p[0] = 55;\n        p[1] = p[3] = 50;\n        p[2] = 54;\n        cfb.FileIndex.push({\n            name: nm,\n            type: 2,\n            content: p,\n            size: 4,\n            L: 69,\n            R: 69,\n            C: 69\n        } /*:any*/ );\n        cfb.FullPaths.push(cfb.FullPaths[0] + nm);\n        rebuild_cfb(cfb);\n    }\n    function rebuild_cfb(cfb /*:CFBContainer*/ , f /*:?boolean*/ ) /*:void*/ {\n        init_cfb(cfb);\n        var gc = false, s = false;\n        for(var i = cfb.FullPaths.length - 1; i >= 0; --i){\n            var _file = cfb.FileIndex[i];\n            switch(_file.type){\n                case 0:\n                    if (s) gc = true;\n                    else {\n                        cfb.FileIndex.pop();\n                        cfb.FullPaths.pop();\n                    }\n                    break;\n                case 1:\n                case 2:\n                case 5:\n                    s = true;\n                    if (isNaN(_file.R * _file.L * _file.C)) gc = true;\n                    if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n                    break;\n                default:\n                    gc = true;\n                    break;\n            }\n        }\n        if (!gc && !f) return;\n        var now = new Date(1987, 1, 19), j = 0;\n        // Track which names exist\n        var fullPaths = Object.create ? Object.create(null) : {};\n        var data /*:Array<[string, CFBEntry]>*/  = [];\n        for(i = 0; i < cfb.FullPaths.length; ++i){\n            fullPaths[cfb.FullPaths[i]] = true;\n            if (cfb.FileIndex[i].type === 0) continue;\n            data.push([\n                cfb.FullPaths[i],\n                cfb.FileIndex[i]\n            ]);\n        }\n        for(i = 0; i < data.length; ++i){\n            var dad = dirname(data[i][0]);\n            s = fullPaths[dad];\n            if (!s) {\n                data.push([\n                    dad,\n                    {\n                        name: filename(dad).replace(\"/\", \"\"),\n                        type: 1,\n                        clsid: HEADER_CLSID,\n                        ct: now,\n                        mt: now,\n                        content: null\n                    } /*:any*/ \n                ]);\n                // Add name to set\n                fullPaths[dad] = true;\n            }\n        }\n        data.sort(function(x, y) {\n            return namecmp(x[0], y[0]);\n        });\n        cfb.FullPaths = [];\n        cfb.FileIndex = [];\n        for(i = 0; i < data.length; ++i){\n            cfb.FullPaths[i] = data[i][0];\n            cfb.FileIndex[i] = data[i][1];\n        }\n        for(i = 0; i < data.length; ++i){\n            var elt = cfb.FileIndex[i];\n            var nm = cfb.FullPaths[i];\n            elt.name = filename(nm).replace(\"/\", \"\");\n            elt.L = elt.R = elt.C = -(elt.color = 1);\n            elt.size = elt.content ? elt.content.length : 0;\n            elt.start = 0;\n            elt.clsid = elt.clsid || HEADER_CLSID;\n            if (i === 0) {\n                elt.C = data.length > 1 ? 1 : -1;\n                elt.size = 0;\n                elt.type = 5;\n            } else if (nm.slice(-1) == \"/\") {\n                for(j = i + 1; j < data.length; ++j)if (dirname(cfb.FullPaths[j]) == nm) break;\n                elt.C = j >= data.length ? -1 : j;\n                for(j = i + 1; j < data.length; ++j)if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;\n                elt.R = j >= data.length ? -1 : j;\n                elt.type = 1;\n            } else {\n                if (dirname(cfb.FullPaths[i + 1] || \"\") == dirname(nm)) elt.R = i + 1;\n                elt.type = 2;\n            }\n        }\n    }\n    function _write(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes|string*/ {\n        var _opts = options || {};\n        /* MAD is order-sensitive, skip rebuild and sort */ if (_opts.fileType == \"mad\") return write_mad(cfb, _opts);\n        rebuild_cfb(cfb);\n        switch(_opts.fileType){\n            case \"zip\":\n                return write_zip(cfb, _opts);\n        }\n        var L = function(cfb /*:CFBContainer*/ ) /*:Array<number>*/ {\n            var mini_size = 0, fat_size = 0;\n            for(var i = 0; i < cfb.FileIndex.length; ++i){\n                var file = cfb.FileIndex[i];\n                if (!file.content) continue;\n                /*:: if(file.content == null) throw new Error(\"unreachable\"); */ var flen = file.content.length;\n                if (flen > 0) {\n                    if (flen < 0x1000) mini_size += flen + 0x3F >> 6;\n                    else fat_size += flen + 0x01FF >> 9;\n                }\n            }\n            var dir_cnt = cfb.FullPaths.length + 3 >> 2;\n            var mini_cnt = mini_size + 7 >> 3;\n            var mfat_cnt = mini_size + 0x7F >> 7;\n            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n            var fat_cnt = fat_base + 0x7F >> 7;\n            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n            while(fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt)difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n            var L = [\n                1,\n                difat_cnt,\n                fat_cnt,\n                mfat_cnt,\n                dir_cnt,\n                fat_size,\n                mini_size,\n                0\n            ];\n            cfb.FileIndex[0].size = mini_size << 6;\n            L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);\n            return L;\n        }(cfb);\n        var o = new_buf(L[7] << 9);\n        var i = 0, T = 0;\n        {\n            for(i = 0; i < 8; ++i)o.write_shift(1, HEADER_SIG[i]);\n            for(i = 0; i < 8; ++i)o.write_shift(2, 0);\n            o.write_shift(2, 0x003E);\n            o.write_shift(2, 0x0003);\n            o.write_shift(2, 0xFFFE);\n            o.write_shift(2, 0x0009);\n            o.write_shift(2, 0x0006);\n            for(i = 0; i < 3; ++i)o.write_shift(2, 0);\n            o.write_shift(4, 0);\n            o.write_shift(4, L[2]);\n            o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n            o.write_shift(4, 0);\n            o.write_shift(4, 1 << 12);\n            o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);\n            o.write_shift(4, L[3]);\n            o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);\n            o.write_shift(4, L[1]);\n            for(i = 0; i < 109; ++i)o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n        }\n        if (L[1]) {\n            for(T = 0; T < L[1]; ++T){\n                for(; i < 236 + T * 127; ++i)o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n                o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n            }\n        }\n        var chainit = function(w /*:number*/ ) /*:void*/ {\n            for(T += w; i < T - 1; ++i)o.write_shift(-4, i + 1);\n            if (w) {\n                ++i;\n                o.write_shift(-4, ENDOFCHAIN);\n            }\n        };\n        T = i = 0;\n        for(T += L[1]; i < T; ++i)o.write_shift(-4, consts.DIFSECT);\n        for(T += L[2]; i < T; ++i)o.write_shift(-4, consts.FATSECT);\n        chainit(L[3]);\n        chainit(L[4]);\n        var j /*:number*/  = 0, flen /*:number*/  = 0;\n        var file /*:CFBEntry*/  = cfb.FileIndex[0];\n        for(; j < cfb.FileIndex.length; ++j){\n            file = cfb.FileIndex[j];\n            if (!file.content) continue;\n            /*:: if(file.content == null) throw new Error(\"unreachable\"); */ flen = file.content.length;\n            if (flen < 0x1000) continue;\n            file.start = T;\n            chainit(flen + 0x01FF >> 9);\n        }\n        chainit(L[6] + 7 >> 3);\n        while(o.l & 0x1FF)o.write_shift(-4, consts.ENDOFCHAIN);\n        T = i = 0;\n        for(j = 0; j < cfb.FileIndex.length; ++j){\n            file = cfb.FileIndex[j];\n            if (!file.content) continue;\n            /*:: if(file.content == null) throw new Error(\"unreachable\"); */ flen = file.content.length;\n            if (!flen || flen >= 0x1000) continue;\n            file.start = T;\n            chainit(flen + 0x3F >> 6);\n        }\n        while(o.l & 0x1FF)o.write_shift(-4, consts.ENDOFCHAIN);\n        for(i = 0; i < L[4] << 2; ++i){\n            var nm = cfb.FullPaths[i];\n            if (!nm || nm.length === 0) {\n                for(j = 0; j < 17; ++j)o.write_shift(4, 0);\n                for(j = 0; j < 3; ++j)o.write_shift(4, -1);\n                for(j = 0; j < 12; ++j)o.write_shift(4, 0);\n                continue;\n            }\n            file = cfb.FileIndex[i];\n            if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n            var _nm /*:string*/  = i === 0 && _opts.root || file.name;\n            flen = 2 * (_nm.length + 1);\n            o.write_shift(64, _nm, \"utf16le\");\n            o.write_shift(2, flen);\n            o.write_shift(1, file.type);\n            o.write_shift(1, file.color);\n            o.write_shift(-4, file.L);\n            o.write_shift(-4, file.R);\n            o.write_shift(-4, file.C);\n            if (!file.clsid) for(j = 0; j < 4; ++j)o.write_shift(4, 0);\n            else o.write_shift(16, file.clsid, \"hex\");\n            o.write_shift(4, file.state || 0);\n            o.write_shift(4, 0);\n            o.write_shift(4, 0);\n            o.write_shift(4, 0);\n            o.write_shift(4, 0);\n            o.write_shift(4, file.start);\n            o.write_shift(4, file.size);\n            o.write_shift(4, 0);\n        }\n        for(i = 1; i < cfb.FileIndex.length; ++i){\n            file = cfb.FileIndex[i];\n            /*:: if(!file.content) throw new Error(\"unreachable\"); */ if (file.size >= 0x1000) {\n                o.l = file.start + 1 << 9;\n                if (has_buf && Buffer.isBuffer(file.content)) {\n                    file.content.copy(o, o.l, 0, file.size);\n                    // o is a 0-filled Buffer so just set next offset\n                    o.l += file.size + 511 & -512;\n                } else {\n                    for(j = 0; j < file.size; ++j)o.write_shift(1, file.content[j]);\n                    for(; j & 0x1FF; ++j)o.write_shift(1, 0);\n                }\n            }\n        }\n        for(i = 1; i < cfb.FileIndex.length; ++i){\n            file = cfb.FileIndex[i];\n            /*:: if(!file.content) throw new Error(\"unreachable\"); */ if (file.size > 0 && file.size < 0x1000) {\n                if (has_buf && Buffer.isBuffer(file.content)) {\n                    file.content.copy(o, o.l, 0, file.size);\n                    // o is a 0-filled Buffer so just set next offset\n                    o.l += file.size + 63 & -64;\n                } else {\n                    for(j = 0; j < file.size; ++j)o.write_shift(1, file.content[j]);\n                    for(; j & 0x3F; ++j)o.write_shift(1, 0);\n                }\n            }\n        }\n        if (has_buf) {\n            o.l = o.length;\n        } else {\n            // When using Buffer, already 0-filled\n            while(o.l < o.length)o.write_shift(1, 0);\n        }\n        return o;\n    }\n    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */ function find(cfb /*:CFBContainer*/ , path /*:string*/ ) /*:?CFBEntry*/ {\n        var UCFullPaths /*:Array<string>*/  = cfb.FullPaths.map(function(x) {\n            return x.toUpperCase();\n        });\n        var UCPaths /*:Array<string>*/  = UCFullPaths.map(function(x) {\n            var y = x.split(\"/\");\n            return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)];\n        });\n        var k /*:boolean*/  = false;\n        if (path.charCodeAt(0) === 47 /* \"/\" */ ) {\n            k = true;\n            path = UCFullPaths[0].slice(0, -1) + path;\n        } else k = path.indexOf(\"/\") !== -1;\n        var UCPath /*:string*/  = path.toUpperCase();\n        var w /*:number*/  = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n        if (w !== -1) return cfb.FileIndex[w];\n        var m = !UCPath.match(chr1);\n        UCPath = UCPath.replace(chr0, \"\");\n        if (m) UCPath = UCPath.replace(chr1, \"!\");\n        for(w = 0; w < UCFullPaths.length; ++w){\n            if ((m ? UCFullPaths[w].replace(chr1, \"!\") : UCFullPaths[w]).replace(chr0, \"\") == UCPath) return cfb.FileIndex[w];\n            if ((m ? UCPaths[w].replace(chr1, \"!\") : UCPaths[w]).replace(chr0, \"\") == UCPath) return cfb.FileIndex[w];\n        }\n        return null;\n    }\n    /** CFB Constants */ var MSSZ = 64; /* Mini Sector Size = 1<<6 */ \n    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n    /* 2.1 Compound File Sector Numbers and Types */ var ENDOFCHAIN = -2;\n    /* 2.2 Compound File Header */ var HEADER_SIGNATURE = \"d0cf11e0a1b11ae1\";\n    var HEADER_SIG = [\n        0xD0,\n        0xCF,\n        0x11,\n        0xE0,\n        0xA1,\n        0xB1,\n        0x1A,\n        0xE1\n    ];\n    var HEADER_CLSID = \"00000000000000000000000000000000\";\n    var consts = {\n        /* 2.1 Compund File Sector Numbers and Types */ MAXREGSECT: -6,\n        DIFSECT: -4,\n        FATSECT: -3,\n        ENDOFCHAIN: ENDOFCHAIN,\n        FREESECT: -1,\n        /* 2.2 Compound File Header */ HEADER_SIGNATURE: HEADER_SIGNATURE,\n        HEADER_MINOR_VERSION: \"3e00\",\n        MAXREGSID: -6,\n        NOSTREAM: -1,\n        HEADER_CLSID: HEADER_CLSID,\n        /* 2.6.1 Compound File Directory Entry */ EntryTypes: [\n            \"unknown\",\n            \"storage\",\n            \"stream\",\n            \"lockbytes\",\n            \"property\",\n            \"root\"\n        ]\n    };\n    function write_file(cfb /*:CFBContainer*/ , filename /*:string*/ , options /*:CFBWriteOpts*/ ) /*:void*/ {\n        get_fs();\n        var o = _write(cfb, options);\n        /*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error(\"unreachable\"); */ fs.writeFileSync(filename, o);\n    }\n    function a2s(o /*:RawBytes*/ ) /*:string*/ {\n        var out = new Array(o.length);\n        for(var i = 0; i < o.length; ++i)out[i] = String.fromCharCode(o[i]);\n        return out.join(\"\");\n    }\n    function write(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes|string*/ {\n        var o = _write(cfb, options);\n        switch(options && options.type || \"buffer\"){\n            case \"file\":\n                get_fs();\n                fs.writeFileSync(options.filename, o /*:any*/ );\n                return o;\n            case \"binary\":\n                return typeof o == \"string\" ? o : a2s(o);\n            case \"base64\":\n                return Base64_encode(typeof o == \"string\" ? o : a2s(o));\n            case \"buffer\":\n                if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);\n            /* falls through */ case \"array\":\n                return typeof o == \"string\" ? s2a(o) : o;\n        }\n        return o;\n    }\n    /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */ var _zlib;\n    function use_zlib(zlib) {\n        try {\n            var InflateRaw = zlib.InflateRaw;\n            var InflRaw = new InflateRaw();\n            InflRaw._processChunk(new Uint8Array([\n                3,\n                0\n            ]), InflRaw._finishFlushFlag);\n            if (InflRaw.bytesRead) _zlib = zlib;\n            else throw new Error(\"zlib does not expose bytesRead\");\n        } catch (e) {\n            console.error(\"cannot use native zlib: \" + (e.message || e));\n        }\n    }\n    function _inflateRawSync(payload, usz) {\n        if (!_zlib) return _inflate(payload, usz);\n        var InflateRaw = _zlib.InflateRaw;\n        var InflRaw = new InflateRaw();\n        var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n        payload.l += InflRaw.bytesRead;\n        return out;\n    }\n    function _deflateRawSync(payload) {\n        return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n    }\n    var CLEN_ORDER = [\n        16,\n        17,\n        18,\n        0,\n        8,\n        7,\n        9,\n        6,\n        10,\n        5,\n        11,\n        4,\n        12,\n        3,\n        13,\n        2,\n        14,\n        1,\n        15\n    ];\n    /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */ var LEN_LN = [\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        13,\n        15,\n        17,\n        19,\n        23,\n        27,\n        31,\n        35,\n        43,\n        51,\n        59,\n        67,\n        83,\n        99,\n        115,\n        131,\n        163,\n        195,\n        227,\n        258\n    ];\n    /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */ var DST_LN = [\n        1,\n        2,\n        3,\n        4,\n        5,\n        7,\n        9,\n        13,\n        17,\n        25,\n        33,\n        49,\n        65,\n        97,\n        129,\n        193,\n        257,\n        385,\n        513,\n        769,\n        1025,\n        1537,\n        2049,\n        3073,\n        4097,\n        6145,\n        8193,\n        12289,\n        16385,\n        24577\n    ];\n    function bit_swap_8(n) {\n        var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;\n        return (t >> 16 | t >> 8 | t) & 0xFF;\n    }\n    var use_typed_arrays = typeof Uint8Array !== \"undefined\";\n    var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];\n    for(var q = 0; q < 1 << 8; ++q)bitswap8[q] = bit_swap_8(q);\n    function bit_swap_n(n, b) {\n        var rev = bitswap8[n & 0xFF];\n        if (b <= 8) return rev >>> 8 - b;\n        rev = rev << 8 | bitswap8[n >> 8 & 0xFF];\n        if (b <= 16) return rev >>> 16 - b;\n        rev = rev << 8 | bitswap8[n >> 16 & 0xFF];\n        return rev >>> 24 - b;\n    }\n    /* helpers for unaligned bit reads */ function read_bits_2(buf, bl) {\n        var w = bl & 7, h = bl >>> 3;\n        return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;\n    }\n    function read_bits_3(buf, bl) {\n        var w = bl & 7, h = bl >>> 3;\n        return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;\n    }\n    function read_bits_4(buf, bl) {\n        var w = bl & 7, h = bl >>> 3;\n        return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;\n    }\n    function read_bits_5(buf, bl) {\n        var w = bl & 7, h = bl >>> 3;\n        return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;\n    }\n    function read_bits_7(buf, bl) {\n        var w = bl & 7, h = bl >>> 3;\n        return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;\n    }\n    /* works up to n = 3 * 8 + 1 = 25 */ function read_bits_n(buf, bl, n) {\n        var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;\n        var v = buf[h] >>> w;\n        if (n < 8 - w) return v & f;\n        v |= buf[h + 1] << 8 - w;\n        if (n < 16 - w) return v & f;\n        v |= buf[h + 2] << 16 - w;\n        if (n < 24 - w) return v & f;\n        v |= buf[h + 3] << 24 - w;\n        return v & f;\n    }\n    /* helpers for unaligned bit writes */ function write_bits_3(buf, bl, v) {\n        var w = bl & 7, h = bl >>> 3;\n        if (w <= 5) buf[h] |= (v & 7) << w;\n        else {\n            buf[h] |= v << w & 0xFF;\n            buf[h + 1] = (v & 7) >> 8 - w;\n        }\n        return bl + 3;\n    }\n    function write_bits_1(buf, bl, v) {\n        var w = bl & 7, h = bl >>> 3;\n        v = (v & 1) << w;\n        buf[h] |= v;\n        return bl + 1;\n    }\n    function write_bits_8(buf, bl, v) {\n        var w = bl & 7, h = bl >>> 3;\n        v <<= w;\n        buf[h] |= v & 0xFF;\n        v >>>= 8;\n        buf[h + 1] = v;\n        return bl + 8;\n    }\n    function write_bits_16(buf, bl, v) {\n        var w = bl & 7, h = bl >>> 3;\n        v <<= w;\n        buf[h] |= v & 0xFF;\n        v >>>= 8;\n        buf[h + 1] = v & 0xFF;\n        buf[h + 2] = v >>> 8;\n        return bl + 16;\n    }\n    /* until ArrayBuffer#realloc is a thing, fake a realloc */ function realloc(b, sz /*:number*/ ) {\n        var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i = 0;\n        if (L >= sz) return b;\n        if (has_buf) {\n            var o = new_unsafe_buf(M);\n            // $FlowIgnore\n            if (b.copy) b.copy(o);\n            else for(; i < b.length; ++i)o[i] = b[i];\n            return o;\n        } else if (use_typed_arrays) {\n            var a = new Uint8Array(M);\n            if (a.set) a.set(b);\n            else for(; i < L; ++i)a[i] = b[i];\n            return a;\n        }\n        b.length = M;\n        return b;\n    }\n    /* zero-filled arrays for older browsers */ function zero_fill_array(n) {\n        var o = new Array(n);\n        for(var i = 0; i < n; ++i)o[i] = 0;\n        return o;\n    }\n    /* build tree (used for literals and lengths) */ function build_tree(clens, cmap, MAX /*:number*/ ) /*:number*/ {\n        var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;\n        var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n        for(i = 0; i < 32; ++i)bl_count[i] = 0;\n        for(i = L; i < MAX; ++i)clens[i] = 0;\n        L = clens.length;\n        var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n        /* build code tree */ for(i = 0; i < L; ++i){\n            bl_count[w = clens[i]]++;\n            if (maxlen < w) maxlen = w;\n            ctree[i] = 0;\n        }\n        bl_count[0] = 0;\n        for(i = 1; i <= maxlen; ++i)bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;\n        for(i = 0; i < L; ++i){\n            ccode = clens[i];\n            if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;\n        }\n        /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */ var cleni = 0;\n        for(i = 0; i < L; ++i){\n            cleni = clens[i];\n            if (cleni != 0) {\n                ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;\n                for(j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j)cmap[ccode | j << cleni] = cleni & 15 | i << 4;\n            }\n        }\n        return maxlen;\n    }\n    /* Fixed Huffman */ var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\n    var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n    if (!use_typed_arrays) {\n        for(var i = 0; i < 512; ++i)fix_lmap[i] = 0;\n        for(i = 0; i < 32; ++i)fix_dmap[i] = 0;\n    }\n    (function() {\n        var dlens /*:Array<number>*/  = [];\n        var i = 0;\n        for(; i < 32; i++)dlens.push(5);\n        build_tree(dlens, fix_dmap, 32);\n        var clens /*:Array<number>*/  = [];\n        i = 0;\n        for(; i <= 143; i++)clens.push(8);\n        for(; i <= 255; i++)clens.push(9);\n        for(; i <= 279; i++)clens.push(7);\n        for(; i <= 287; i++)clens.push(8);\n        build_tree(clens, fix_lmap, 288);\n    })();\n    var _deflateRaw = /*#__PURE__*/ function _deflateRawIIFE() {\n        var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];\n        var j = 0, k = 0;\n        for(; j < DST_LN.length - 1; ++j){\n            for(; k < DST_LN[j + 1]; ++k)DST_LN_RE[k] = j;\n        }\n        for(; k < 32768; ++k)DST_LN_RE[k] = 29;\n        var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];\n        for(j = 0, k = 0; j < LEN_LN.length - 1; ++j){\n            for(; k < LEN_LN[j + 1]; ++k)LEN_LN_RE[k] = j;\n        }\n        function write_stored(data, out) {\n            var boff = 0;\n            while(boff < data.length){\n                var L = Math.min(0xFFFF, data.length - boff);\n                var h = boff + L == data.length;\n                out.write_shift(1, +h);\n                out.write_shift(2, L);\n                out.write_shift(2, ~L & 0xFFFF);\n                while(L-- > 0)out[out.l++] = data[boff++];\n            }\n            return out.l;\n        }\n        /* Fixed Huffman */ function write_huff_fixed(data, out) {\n            var bl = 0;\n            var boff = 0;\n            var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];\n            while(boff < data.length){\n                var L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);\n                /* write a stored block for short data */ if (L < 10) {\n                    bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line\n                    if (bl & 7) bl += 8 - (bl & 7);\n                    out.l = bl / 8 | 0;\n                    out.write_shift(2, L);\n                    out.write_shift(2, ~L & 0xFFFF);\n                    while(L-- > 0)out[out.l++] = data[boff++];\n                    bl = out.l * 8;\n                    continue;\n                }\n                bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line\n                var hash = 0;\n                while(L-- > 0){\n                    var d = data[boff];\n                    hash = (hash << 5 ^ d) & 0x7FFF;\n                    var match = -1, mlen = 0;\n                    if (match = addrs[hash]) {\n                        match |= boff & ~0x7FFF;\n                        if (match > boff) match -= 0x8000;\n                        if (match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250)++mlen;\n                    }\n                    if (mlen > 2) {\n                        /* Copy Token  */ d = LEN_LN_RE[mlen];\n                        if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;\n                        else {\n                            write_bits_8(out, bl, 3);\n                            bl += 5;\n                            write_bits_8(out, bl, bitswap8[d - 23] >> 5);\n                            bl += 3;\n                        }\n                        var len_eb = d < 8 ? 0 : d - 4 >> 2;\n                        if (len_eb > 0) {\n                            write_bits_16(out, bl, mlen - LEN_LN[d]);\n                            bl += len_eb;\n                        }\n                        d = DST_LN_RE[boff - match];\n                        bl = write_bits_8(out, bl, bitswap8[d] >> 3);\n                        bl -= 3;\n                        var dst_eb = d < 4 ? 0 : d - 2 >> 1;\n                        if (dst_eb > 0) {\n                            write_bits_16(out, bl, boff - match - DST_LN[d]);\n                            bl += dst_eb;\n                        }\n                        for(var q = 0; q < mlen; ++q){\n                            addrs[hash] = boff & 0x7FFF;\n                            hash = (hash << 5 ^ data[boff]) & 0x7FFF;\n                            ++boff;\n                        }\n                        L -= mlen - 1;\n                    } else {\n                        /* Literal Token */ if (d <= 143) d = d + 48;\n                        else bl = write_bits_1(out, bl, 1);\n                        bl = write_bits_8(out, bl, bitswap8[d]);\n                        addrs[hash] = boff & 0x7FFF;\n                        ++boff;\n                    }\n                }\n                bl = write_bits_8(out, bl, 0) - 1;\n            }\n            out.l = (bl + 7) / 8 | 0;\n            return out.l;\n        }\n        return function _deflateRaw(data, out) {\n            if (data.length < 8) return write_stored(data, out);\n            return write_huff_fixed(data, out);\n        };\n    }();\n    function _deflate(data) {\n        var buf = new_buf(50 + Math.floor(data.length * 1.1));\n        var off = _deflateRaw(data, buf);\n        return buf.slice(0, off);\n    }\n    /* modified inflate function also moves original read head */ var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n    var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);\n    var dyn_len_1 = 1, dyn_len_2 = 1;\n    /* 5.5.3 Expanding Huffman Codes */ function dyn(data, boff /*:number*/ ) {\n        /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */ var _HLIT = read_bits_5(data, boff) + 257;\n        boff += 5;\n        var _HDIST = read_bits_5(data, boff) + 1;\n        boff += 5;\n        var _HCLEN = read_bits_4(data, boff) + 4;\n        boff += 4;\n        var w = 0;\n        /* grab and store code lengths */ var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n        var ctree = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        var maxlen = 1;\n        var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n        var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n        var L = clens.length; /* 19 */ \n        for(var i = 0; i < _HCLEN; ++i){\n            clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n            if (maxlen < w) maxlen = w;\n            bl_count[w]++;\n            boff += 3;\n        }\n        /* build code tree */ var ccode = 0;\n        bl_count[0] = 0;\n        for(i = 1; i <= maxlen; ++i)next_code[i] = ccode = ccode + bl_count[i - 1] << 1;\n        for(i = 0; i < L; ++i)if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n        /* cmap[7 bits from stream] = (off&7) + (lit<<3) */ var cleni = 0;\n        for(i = 0; i < L; ++i){\n            cleni = clens[i];\n            if (cleni != 0) {\n                ccode = bitswap8[ctree[i]] >> 8 - cleni;\n                for(var j = (1 << 7 - cleni) - 1; j >= 0; --j)dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;\n            }\n        }\n        /* read literal and dist codes at once */ var hcodes /*:Array<number>*/  = [];\n        maxlen = 1;\n        for(; hcodes.length < _HLIT + _HDIST;){\n            ccode = dyn_cmap[read_bits_7(data, boff)];\n            boff += ccode & 7;\n            switch(ccode >>>= 3){\n                case 16:\n                    w = 3 + read_bits_2(data, boff);\n                    boff += 2;\n                    ccode = hcodes[hcodes.length - 1];\n                    while(w-- > 0)hcodes.push(ccode);\n                    break;\n                case 17:\n                    w = 3 + read_bits_3(data, boff);\n                    boff += 3;\n                    while(w-- > 0)hcodes.push(0);\n                    break;\n                case 18:\n                    w = 11 + read_bits_7(data, boff);\n                    boff += 7;\n                    while(w-- > 0)hcodes.push(0);\n                    break;\n                default:\n                    hcodes.push(ccode);\n                    if (maxlen < ccode) maxlen = ccode;\n                    break;\n            }\n        }\n        /* build literal / length trees */ var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);\n        for(i = _HLIT; i < 286; ++i)h1[i] = 0;\n        for(i = _HDIST; i < 30; ++i)h2[i] = 0;\n        dyn_len_1 = build_tree(h1, dyn_lmap, 286);\n        dyn_len_2 = build_tree(h2, dyn_dmap, 30);\n        return boff;\n    }\n    /* return [ data, bytesRead ] */ function inflate(data, usz /*:number*/ ) {\n        /* shortcircuit for empty buffer [0x03, 0x00] */ if (data[0] == 3 && !(data[1] & 0x3)) {\n            return [\n                new_raw_buf(usz),\n                2\n            ];\n        }\n        /* bit offset */ var boff = 0;\n        /* header includes final bit and type bits */ var header = 0;\n        var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);\n        var woff = 0;\n        var OL = outbuf.length >>> 0;\n        var max_len_1 = 0, max_len_2 = 0;\n        while((header & 1) == 0){\n            header = read_bits_3(data, boff);\n            boff += 3;\n            if (header >>> 1 == 0) {\n                /* Stored block */ if (boff & 7) boff += 8 - (boff & 7);\n                /* 2 bytes sz, 2 bytes bit inverse */ var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;\n                boff += 32;\n                /* push sz bytes */ if (sz > 0) {\n                    if (!usz && OL < woff + sz) {\n                        outbuf = realloc(outbuf, woff + sz);\n                        OL = outbuf.length;\n                    }\n                    while(sz-- > 0){\n                        outbuf[woff++] = data[boff >>> 3];\n                        boff += 8;\n                    }\n                }\n                continue;\n            } else if (header >> 1 == 1) {\n                /* Fixed Huffman */ max_len_1 = 9;\n                max_len_2 = 5;\n            } else {\n                /* Dynamic Huffman */ boff = dyn(data, boff);\n                max_len_1 = dyn_len_1;\n                max_len_2 = dyn_len_2;\n            }\n            for(;;){\n                if (!usz && OL < woff + 32767) {\n                    outbuf = realloc(outbuf, woff + 32767);\n                    OL = outbuf.length;\n                }\n                /* ingest code and move read head */ var bits = read_bits_n(data, boff, max_len_1);\n                var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n                boff += code & 15;\n                code >>>= 4;\n                /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */ if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;\n                else if (code == 256) break;\n                else {\n                    code -= 257;\n                    var len_eb = code < 8 ? 0 : code - 4 >> 2;\n                    if (len_eb > 5) len_eb = 0;\n                    var tgt = woff + LEN_LN[code];\n                    /* length extra bits */ if (len_eb > 0) {\n                        tgt += read_bits_n(data, boff, len_eb);\n                        boff += len_eb;\n                    }\n                    /* dist code */ bits = read_bits_n(data, boff, max_len_2);\n                    code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n                    boff += code & 15;\n                    code >>>= 4;\n                    var dst_eb = code < 4 ? 0 : code - 2 >> 1;\n                    var dst = DST_LN[code];\n                    /* dist extra bits */ if (dst_eb > 0) {\n                        dst += read_bits_n(data, boff, dst_eb);\n                        boff += dst_eb;\n                    }\n                    /* in the common case, manual byte copy is faster than TA set / Buffer copy */ if (!usz && OL < tgt) {\n                        outbuf = realloc(outbuf, tgt + 100);\n                        OL = outbuf.length;\n                    }\n                    while(woff < tgt){\n                        outbuf[woff] = outbuf[woff - dst];\n                        ++woff;\n                    }\n                }\n            }\n        }\n        if (usz) return [\n            outbuf,\n            boff + 7 >>> 3\n        ];\n        return [\n            outbuf.slice(0, woff),\n            boff + 7 >>> 3\n        ];\n    }\n    function _inflate(payload, usz) {\n        var data = payload.slice(payload.l || 0);\n        var out = inflate(data, usz);\n        payload.l += out[1];\n        return out[0];\n    }\n    function warn_or_throw(wrn, msg) {\n        if (wrn) {\n            if (typeof console !== \"undefined\") console.error(msg);\n        } else throw new Error(msg);\n    }\n    function parse_zip(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {\n        var blob /*:CFBlob*/  = /*::(*/ file /*:: :any)*/ ;\n        prep_blob(blob, 0);\n        var FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];\n        var o = {\n            FileIndex: FileIndex,\n            FullPaths: FullPaths\n        };\n        init_cfb(o, {\n            root: options.root\n        });\n        /* find end of central directory, start just after signature */ var i = blob.length - 4;\n        while((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0)--i;\n        blob.l = i + 4;\n        /* parse end of central directory */ blob.l += 4;\n        var fcnt = blob.read_shift(2);\n        blob.l += 6;\n        var start_cd = blob.read_shift(4);\n        /* parse central directory */ blob.l = start_cd;\n        for(i = 0; i < fcnt; ++i){\n            /* trust local file header instead of CD entry */ blob.l += 20;\n            var csz = blob.read_shift(4);\n            var usz = blob.read_shift(4);\n            var namelen = blob.read_shift(2);\n            var efsz = blob.read_shift(2);\n            var fcsz = blob.read_shift(2);\n            blob.l += 8;\n            var offset = blob.read_shift(4);\n            var EF = parse_extra_field(/*::(*/ blob.slice(blob.l + namelen, blob.l + namelen + efsz));\n            blob.l += namelen + efsz + fcsz;\n            var L = blob.l;\n            blob.l = offset + 4;\n            parse_local_file(blob, csz, usz, o, EF);\n            blob.l = L;\n        }\n        return o;\n    }\n    /* head starts just after local file header signature */ function parse_local_file(blob /*:CFBlob*/ , csz /*:number*/ , usz /*:number*/ , o /*:CFBContainer*/ , EF) {\n        /* [local file header] */ blob.l += 2;\n        var flags = blob.read_shift(2);\n        var meth = blob.read_shift(2);\n        var date = parse_dos_date(blob);\n        if (flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n        var crc32 = blob.read_shift(4);\n        var _csz = blob.read_shift(4);\n        var _usz = blob.read_shift(4);\n        var namelen = blob.read_shift(2);\n        var efsz = blob.read_shift(2);\n        // TODO: flags & (1<<11) // UTF8\n        var name = \"\";\n        for(var i = 0; i < namelen; ++i)name += String.fromCharCode(blob[blob.l++]);\n        if (efsz) {\n            var ef = parse_extra_field(/*::(*/ blob.slice(blob.l, blob.l + efsz));\n            if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;\n            if (((EF || {})[0x5455] || {}).mt) date = EF[0x5455].mt;\n        }\n        blob.l += efsz;\n        /* [encryption header] */ /* [file data] */ var data = blob.slice(blob.l, blob.l + _csz);\n        switch(meth){\n            case 8:\n                data = _inflateRawSync(blob, _usz);\n                break;\n            case 0:\n                break; // TODO: scan for magic number\n            default:\n                throw new Error(\"Unsupported ZIP Compression method \" + meth);\n        }\n        /* [data descriptor] */ var wrn = false;\n        if (flags & 8) {\n            crc32 = blob.read_shift(4);\n            if (crc32 == 0x08074b50) {\n                crc32 = blob.read_shift(4);\n                wrn = true;\n            }\n            _csz = blob.read_shift(4);\n            _usz = blob.read_shift(4);\n        }\n        if (_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n        if (_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz);\n        //var _crc32 = CRC32.buf(data, 0);\n        //if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n        cfb_add(o, name, data, {\n            unsafe: true,\n            mt: date\n        });\n    }\n    function write_zip(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:RawBytes*/ {\n        var _opts = options || {};\n        var out = [], cdirs = [];\n        var o /*:CFBlob*/  = new_buf(1);\n        var method = _opts.compression ? 8 : 0, flags = 0;\n        var desc = false;\n        if (desc) flags |= 8;\n        var i = 0, j = 0;\n        var start_cd = 0, fcnt = 0;\n        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n        var crcs = [];\n        var sz_cd = 0;\n        for(i = 1; i < cfb.FullPaths.length; ++i){\n            fp = cfb.FullPaths[i].slice(root.length);\n            fi = cfb.FileIndex[i];\n            if (!fi.size || !fi.content || fp == \"\\x01Sh33tJ5\") continue;\n            var start = start_cd;\n            /* TODO: CP437 filename */ var namebuf = new_buf(fp.length);\n            for(j = 0; j < fp.length; ++j)namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n            namebuf = namebuf.slice(0, namebuf.l);\n            crcs[fcnt] = CRC32.buf(/*::((*/ fi.content /*::||[]):any)*/ , 0);\n            var outbuf = fi.content /*::||[]*/ ;\n            if (method == 8) outbuf = _deflateRawSync(outbuf);\n            /* local file header */ o = new_buf(30);\n            o.write_shift(4, 0x04034b50);\n            o.write_shift(2, 20);\n            o.write_shift(2, flags);\n            o.write_shift(2, method);\n            /* TODO: last mod file time/date */ if (fi.mt) write_dos_date(o, fi.mt);\n            else o.write_shift(4, 0);\n            o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);\n            o.write_shift(4, flags & 8 ? 0 : outbuf.length);\n            o.write_shift(4, flags & 8 ? 0 : /*::(*/ fi.content /*::||[])*/ .length);\n            o.write_shift(2, namebuf.length);\n            o.write_shift(2, 0);\n            start_cd += o.length;\n            out.push(o);\n            start_cd += namebuf.length;\n            out.push(namebuf);\n            /* TODO: extra fields? */ /* TODO: encryption header ? */ start_cd += outbuf.length;\n            out.push(outbuf);\n            /* data descriptor */ if (flags & 8) {\n                o = new_buf(12);\n                o.write_shift(-4, crcs[fcnt]);\n                o.write_shift(4, outbuf.length);\n                o.write_shift(4, /*::(*/ fi.content /*::||[])*/ .length);\n                start_cd += o.l;\n                out.push(o);\n            }\n            /* central directory */ o = new_buf(46);\n            o.write_shift(4, 0x02014b50);\n            o.write_shift(2, 0);\n            o.write_shift(2, 20);\n            o.write_shift(2, flags);\n            o.write_shift(2, method);\n            o.write_shift(4, 0); /* TODO: last mod file time/date */ \n            o.write_shift(-4, crcs[fcnt]);\n            o.write_shift(4, outbuf.length);\n            o.write_shift(4, /*::(*/ fi.content /*::||[])*/ .length);\n            o.write_shift(2, namebuf.length);\n            o.write_shift(2, 0);\n            o.write_shift(2, 0);\n            o.write_shift(2, 0);\n            o.write_shift(2, 0);\n            o.write_shift(4, 0);\n            o.write_shift(4, start);\n            sz_cd += o.l;\n            cdirs.push(o);\n            sz_cd += namebuf.length;\n            cdirs.push(namebuf);\n            ++fcnt;\n        }\n        /* end of central directory */ o = new_buf(22);\n        o.write_shift(4, 0x06054b50);\n        o.write_shift(2, 0);\n        o.write_shift(2, 0);\n        o.write_shift(2, fcnt);\n        o.write_shift(2, fcnt);\n        o.write_shift(4, sz_cd);\n        o.write_shift(4, start_cd);\n        o.write_shift(2, 0);\n        return bconcat([\n            bconcat(out /*:any*/ ),\n            bconcat(cdirs),\n            o\n        ]);\n    }\n    var ContentTypeMap = {\n        \"htm\": \"text/html\",\n        \"xml\": \"text/xml\",\n        \"gif\": \"image/gif\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"mso\": \"application/x-mso\",\n        \"thmx\": \"application/vnd.ms-officetheme\",\n        \"sh33tj5\": \"application/octet-stream\"\n    } /*:any*/ ;\n    function get_content_type(fi /*:CFBEntry*/ , fp /*:string*/ ) /*:string*/ {\n        if (fi.ctype) return fi.ctype;\n        var ext = fi.name || \"\", m = ext.match(/\\.([^\\.]+)$/);\n        if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n        if (fp) {\n            m = (ext = fp).match(/[\\.\\\\]([^\\.\\\\])+$/);\n            if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n        }\n        return \"application/octet-stream\";\n    }\n    /* 76 character chunks TODO: intertwine encoding */ function write_base64_76(bstr /*:string*/ ) /*:string*/ {\n        var data = Base64_encode(bstr);\n        var o = [];\n        for(var i = 0; i < data.length; i += 76)o.push(data.slice(i, i + 76));\n        return o.join(\"\\r\\n\") + \"\\r\\n\";\n    }\n    /*\nRules for QP:\n\t- escape =## applies for all non-display characters and literal \"=\"\n\t- space or tab at end of line must be encoded\n\t- \\r\\n newlines can be preserved, but bare \\r and \\n must be escaped\n\t- lines must not exceed 76 characters, use soft breaks =\\r\\n\n\nTODO: Some files from word appear to write line extensions with bare equals:\n\n```\n<table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=\n=\"70%\"\n```\n*/ function write_quoted_printable(text /*:string*/ ) /*:string*/ {\n        var encoded = text.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF=]/g, function(c) {\n            var w = c.charCodeAt(0).toString(16).toUpperCase();\n            return \"=\" + (w.length == 1 ? \"0\" + w : w);\n        });\n        encoded = encoded.replace(/ $/mg, \"=20\").replace(/\\t$/mg, \"=09\");\n        if (encoded.charAt(0) == \"\\n\") encoded = \"=0D\" + encoded.slice(1);\n        encoded = encoded.replace(/\\r(?!\\n)/mg, \"=0D\").replace(/\\n\\n/mg, \"\\n=0A\").replace(/([^\\r\\n])\\n/mg, \"$1=0A\");\n        var o /*:Array<string>*/  = [], split = encoded.split(\"\\r\\n\");\n        for(var si = 0; si < split.length; ++si){\n            var str = split[si];\n            if (str.length == 0) {\n                o.push(\"\");\n                continue;\n            }\n            for(var i = 0; i < str.length;){\n                var end = 76;\n                var tmp = str.slice(i, i + end);\n                if (tmp.charAt(end - 1) == \"=\") end--;\n                else if (tmp.charAt(end - 2) == \"=\") end -= 2;\n                else if (tmp.charAt(end - 3) == \"=\") end -= 3;\n                tmp = str.slice(i, i + end);\n                i += end;\n                if (i < str.length) tmp += \"=\";\n                o.push(tmp);\n            }\n        }\n        return o.join(\"\\r\\n\");\n    }\n    function parse_quoted_printable(data /*:Array<string>*/ ) /*:RawBytes*/ {\n        var o = [];\n        /* unify long lines */ for(var di = 0; di < data.length; ++di){\n            var line = data[di];\n            while(di <= data.length && line.charAt(line.length - 1) == \"=\")line = line.slice(0, line.length - 1) + data[++di];\n            o.push(line);\n        }\n        /* decode */ for(var oi = 0; oi < o.length; ++oi)o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {\n            return String.fromCharCode(parseInt($$.slice(1), 16));\n        });\n        return s2a(o.join(\"\\r\\n\"));\n    }\n    function parse_mime(cfb /*:CFBContainer*/ , data /*:Array<string>*/ , root /*:string*/ ) /*:void*/ {\n        var fname = \"\", cte = \"\", ctype = \"\", fdata;\n        var di = 0;\n        for(; di < 10; ++di){\n            var line = data[di];\n            if (!line || line.match(/^\\s*$/)) break;\n            var m = line.match(/^(.*?):\\s*([^\\s].*)$/);\n            if (m) switch(m[1].toLowerCase()){\n                case \"content-location\":\n                    fname = m[2].trim();\n                    break;\n                case \"content-type\":\n                    ctype = m[2].trim();\n                    break;\n                case \"content-transfer-encoding\":\n                    cte = m[2].trim();\n                    break;\n            }\n        }\n        ++di;\n        switch(cte.toLowerCase()){\n            case \"base64\":\n                fdata = s2a(Base64_decode(data.slice(di).join(\"\")));\n                break;\n            case \"quoted-printable\":\n                fdata = parse_quoted_printable(data.slice(di));\n                break;\n            default:\n                throw new Error(\"Unsupported Content-Transfer-Encoding \" + cte);\n        }\n        var file = cfb_add(cfb, fname.slice(root.length), fdata, {\n            unsafe: true\n        });\n        if (ctype) file.ctype = ctype;\n    }\n    function parse_mad(file /*:RawBytes*/ , options /*:CFBReadOpts*/ ) /*:CFBContainer*/ {\n        if (a2s(file.slice(0, 13)).toLowerCase() != \"mime-version:\") throw new Error(\"Unsupported MAD header\");\n        var root = options && options.root || \"\";\n        // $FlowIgnore\n        var data = (has_buf && Buffer.isBuffer(file) ? file.toString(\"binary\") : a2s(file)).split(\"\\r\\n\");\n        var di = 0, row = \"\";\n        /* if root is not specified, scan for the common prefix */ for(di = 0; di < data.length; ++di){\n            row = data[di];\n            if (!/^Content-Location:/i.test(row)) continue;\n            row = row.slice(row.indexOf(\"file\"));\n            if (!root) root = row.slice(0, row.lastIndexOf(\"/\") + 1);\n            if (row.slice(0, root.length) == root) continue;\n            while(root.length > 0){\n                root = root.slice(0, root.length - 1);\n                root = root.slice(0, root.lastIndexOf(\"/\") + 1);\n                if (row.slice(0, root.length) == root) break;\n            }\n        }\n        var mboundary = (data[1] || \"\").match(/boundary=\"(.*?)\"/);\n        if (!mboundary) throw new Error(\"MAD cannot find boundary\");\n        var boundary = \"--\" + (mboundary[1] || \"\");\n        var FileIndex /*:CFBFileIndex*/  = [], FullPaths /*:Array<string>*/  = [];\n        var o = {\n            FileIndex: FileIndex,\n            FullPaths: FullPaths\n        };\n        init_cfb(o);\n        var start_di, fcnt = 0;\n        for(di = 0; di < data.length; ++di){\n            var line = data[di];\n            if (line !== boundary && line !== boundary + \"--\") continue;\n            if (fcnt++) parse_mime(o, data.slice(start_di, di), root);\n            start_di = di;\n        }\n        return o;\n    }\n    function write_mad(cfb /*:CFBContainer*/ , options /*:CFBWriteOpts*/ ) /*:string*/ {\n        var opts = options || {};\n        var boundary = opts.boundary || \"SheetJS\";\n        boundary = \"------=\" + boundary;\n        var out = [\n            \"MIME-Version: 1.0\",\n            'Content-Type: multipart/related; boundary=\"' + boundary.slice(2) + '\"',\n            \"\",\n            \"\",\n            \"\"\n        ];\n        var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n        for(var i = 1; i < cfb.FullPaths.length; ++i){\n            fp = cfb.FullPaths[i].slice(root.length);\n            fi = cfb.FileIndex[i];\n            if (!fi.size || !fi.content || fp == \"\\x01Sh33tJ5\") continue;\n            /* Normalize filename */ fp = fp.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF]/g, function(c) {\n                return \"_x\" + c.charCodeAt(0).toString(16) + \"_\";\n            }).replace(/[\\u0080-\\uFFFF]/g, function(u) {\n                return \"_u\" + u.charCodeAt(0).toString(16) + \"_\";\n            });\n            /* Extract content as binary string */ var ca = fi.content;\n            // $FlowIgnore\n            var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString(\"binary\") : a2s(ca);\n            /* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */ var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;\n            for(var csl = 0; csl <= L; ++csl)if ((cc = cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;\n            var qp = dispcnt >= L * 4 / 5;\n            out.push(boundary);\n            out.push(\"Content-Location: \" + (opts.root || \"file:///C:/SheetJS/\") + fp);\n            out.push(\"Content-Transfer-Encoding: \" + (qp ? \"quoted-printable\" : \"base64\"));\n            out.push(\"Content-Type: \" + get_content_type(fi, fp));\n            out.push(\"\");\n            out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));\n        }\n        out.push(boundary + \"--\\r\\n\");\n        return out.join(\"\\r\\n\");\n    }\n    function cfb_new(opts /*:?any*/ ) /*:CFBContainer*/ {\n        var o /*:CFBContainer*/  = {} /*:any*/ ;\n        init_cfb(o, opts);\n        return o;\n    }\n    function cfb_add(cfb /*:CFBContainer*/ , name /*:string*/ , content /*:?RawBytes*/ , opts /*:?any*/ ) /*:CFBEntry*/ {\n        var unsafe = opts && opts.unsafe;\n        if (!unsafe) init_cfb(cfb);\n        var file = !unsafe && CFB.find(cfb, name);\n        if (!file) {\n            var fpath /*:string*/  = cfb.FullPaths[0];\n            if (name.slice(0, fpath.length) == fpath) fpath = name;\n            else {\n                if (fpath.slice(-1) != \"/\") fpath += \"/\";\n                fpath = (fpath + name).replace(\"//\", \"/\");\n            }\n            file = {\n                name: filename(name),\n                type: 2\n            } /*:any*/ ;\n            cfb.FileIndex.push(file);\n            cfb.FullPaths.push(fpath);\n            if (!unsafe) CFB.utils.cfb_gc(cfb);\n        }\n        /*:: if(!file) throw new Error(\"unreachable\"); */ file.content = content /*:any*/ ;\n        file.size = content ? content.length : 0;\n        if (opts) {\n            if (opts.CLSID) file.clsid = opts.CLSID;\n            if (opts.mt) file.mt = opts.mt;\n            if (opts.ct) file.ct = opts.ct;\n        }\n        return file;\n    }\n    function cfb_del(cfb /*:CFBContainer*/ , name /*:string*/ ) /*:boolean*/ {\n        init_cfb(cfb);\n        var file = CFB.find(cfb, name);\n        if (file) {\n            for(var j = 0; j < cfb.FileIndex.length; ++j)if (cfb.FileIndex[j] == file) {\n                cfb.FileIndex.splice(j, 1);\n                cfb.FullPaths.splice(j, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n    function cfb_mov(cfb /*:CFBContainer*/ , old_name /*:string*/ , new_name /*:string*/ ) /*:boolean*/ {\n        init_cfb(cfb);\n        var file = CFB.find(cfb, old_name);\n        if (file) {\n            for(var j = 0; j < cfb.FileIndex.length; ++j)if (cfb.FileIndex[j] == file) {\n                cfb.FileIndex[j].name = filename(new_name);\n                cfb.FullPaths[j] = new_name;\n                return true;\n            }\n        }\n        return false;\n    }\n    function cfb_gc(cfb /*:CFBContainer*/ ) /*:void*/ {\n        rebuild_cfb(cfb, true);\n    }\n    exports.find = find;\n    exports.read = read;\n    exports.parse = parse;\n    exports.write = write;\n    exports.writeFile = write_file;\n    exports.utils = {\n        cfb_new: cfb_new,\n        cfb_add: cfb_add,\n        cfb_del: cfb_del,\n        cfb_mov: cfb_mov,\n        cfb_gc: cfb_gc,\n        ReadShift: ReadShift,\n        CheckField: CheckField,\n        prep_blob: prep_blob,\n        bconcat: bconcat,\n        use_zlib: use_zlib,\n        _deflateRaw: _deflate,\n        _inflateRaw: _inflate,\n        consts: consts\n    };\n    return exports;\n}();\nlet _fs = void 0;\nfunction set_fs(fs) {\n    _fs = fs;\n}\n\n/* normalize data for blob ctor */ function blobify(data) {\n    if (typeof data === \"string\") return s2ab(data);\n    if (Array.isArray(data)) return a2u(data);\n    return data;\n}\n/* write or download file */ function write_dl(fname /*:string*/ , payload /*:any*/ , enc /*:?string*/ ) {\n    /*global IE_SaveFile, Blob, navigator, saveAs, document, File, chrome */ if (typeof _fs !== \"undefined\" && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);\n    if (typeof Deno !== \"undefined\") {\n        /* in this spot, it's safe to assume typed arrays and TextEncoder/TextDecoder exist */ if (enc && typeof payload == \"string\") switch(enc){\n            case \"utf8\":\n                payload = new TextEncoder(enc).encode(payload);\n                break;\n            case \"binary\":\n                payload = s2ab(payload);\n                break;\n            /* TODO: binary equivalent */ default:\n                throw new Error(\"Unsupported encoding \" + enc);\n        }\n        return Deno.writeFileSync(fname, payload);\n    }\n    var data = enc == \"utf8\" ? utf8write(payload) : payload;\n    /*:: declare var IE_SaveFile: any; */ if (typeof IE_SaveFile !== \"undefined\") return IE_SaveFile(data, fname);\n    if (typeof Blob !== \"undefined\") {\n        var blob = new Blob([\n            blobify(data)\n        ], {\n            type: \"application/octet-stream\"\n        });\n        /*:: declare var navigator: any; */ if (typeof navigator !== \"undefined\" && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);\n        /*:: declare var saveAs: any; */ if (typeof saveAs !== \"undefined\") return saveAs(blob, fname);\n        if (typeof URL !== \"undefined\" && typeof document !== \"undefined\" && document.createElement && URL.createObjectURL) {\n            var url = URL.createObjectURL(blob);\n            /*:: declare var chrome: any; */ if (typeof chrome === \"object\" && typeof (chrome.downloads || {}).download == \"function\") {\n                if (URL.revokeObjectURL && typeof setTimeout !== \"undefined\") setTimeout(function() {\n                    URL.revokeObjectURL(url);\n                }, 60000);\n                return chrome.downloads.download({\n                    url: url,\n                    filename: fname,\n                    saveAs: true\n                });\n            }\n            var a = document.createElement(\"a\");\n            if (a.download != null) {\n                /*:: if(document.body == null) throw new Error(\"unreachable\"); */ a.download = fname;\n                a.href = url;\n                document.body.appendChild(a);\n                a.click();\n                /*:: if(document.body == null) throw new Error(\"unreachable\"); */ document.body.removeChild(a);\n                if (URL.revokeObjectURL && typeof setTimeout !== \"undefined\") setTimeout(function() {\n                    URL.revokeObjectURL(url);\n                }, 60000);\n                return url;\n            }\n        }\n    }\n    // $FlowIgnore\n    if (typeof $ !== \"undefined\" && typeof File !== \"undefined\" && typeof Folder !== \"undefined\") try {\n        // $FlowIgnore\n        var out = File(fname);\n        out.open(\"w\");\n        out.encoding = \"binary\";\n        if (Array.isArray(payload)) payload = a2s(payload);\n        out.write(payload);\n        out.close();\n        return payload;\n    } catch (e) {\n        if (!e.message || !e.message.match(/onstruct/)) throw e;\n    }\n    throw new Error(\"cannot save file \" + fname);\n}\n/* read binary data from file */ function read_binary(path /*:string*/ ) {\n    if (typeof _fs !== \"undefined\") return _fs.readFileSync(path);\n    if (typeof Deno !== \"undefined\") return Deno.readFileSync(path);\n    // $FlowIgnore\n    if (typeof $ !== \"undefined\" && typeof File !== \"undefined\" && typeof Folder !== \"undefined\") try {\n        // $FlowIgnore\n        var infile = File(path);\n        infile.open(\"r\");\n        infile.encoding = \"binary\";\n        var data = infile.read();\n        infile.close();\n        return data;\n    } catch (e) {\n        if (!e.message || !e.message.match(/onstruct/)) throw e;\n    }\n    throw new Error(\"Cannot access file \" + path);\n}\nfunction keys(o /*:any*/ ) /*:Array<any>*/ {\n    var ks = Object.keys(o), o2 = [];\n    for(var i = 0; i < ks.length; ++i)if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);\n    return o2;\n}\nfunction evert_key(obj /*:any*/ , key /*:string*/ ) /*:EvertType*/ {\n    var o = [], K = keys(obj);\n    for(var i = 0; i !== K.length; ++i)if (o[obj[K[i]][key]] == null) o[obj[K[i]][key]] = K[i];\n    return o;\n}\nfunction evert(obj /*:any*/ ) /*:EvertType*/ {\n    var o = [], K = keys(obj);\n    for(var i = 0; i !== K.length; ++i)o[obj[K[i]]] = K[i];\n    return o;\n}\nfunction evert_num(obj /*:any*/ ) /*:EvertNumType*/ {\n    var o = [], K = keys(obj);\n    for(var i = 0; i !== K.length; ++i)o[obj[K[i]]] = parseInt(K[i], 10);\n    return o;\n}\nfunction evert_arr(obj /*:any*/ ) /*:EvertArrType*/ {\n    var o /*:EvertArrType*/  = [], K = keys(obj);\n    for(var i = 0; i !== K.length; ++i){\n        if (o[obj[K[i]]] == null) o[obj[K[i]]] = [];\n        o[obj[K[i]]].push(K[i]);\n    }\n    return o;\n}\nvar basedate = /*#__PURE__*/ new Date(1899, 11, 30, 0, 0, 0); // 2209161600000\nfunction datenum(v /*:Date*/ , date1904 /*:?boolean*/ ) /*:number*/ {\n    var epoch = /*#__PURE__*/ v.getTime();\n    if (date1904) epoch -= 1462 * 24 * 60 * 60 * 1000;\n    var dnthresh = /*#__PURE__*/ basedate.getTime() + /*#__PURE__*/ (v.getTimezoneOffset() - /*#__PURE__*/ basedate.getTimezoneOffset()) * 60000;\n    return (epoch - dnthresh) / (24 * 60 * 60 * 1000);\n}\nvar refdate = /*#__PURE__*/ new Date();\nvar dnthresh = /*#__PURE__*/ basedate.getTime() + /*#__PURE__*/ (refdate.getTimezoneOffset() - /*#__PURE__*/ basedate.getTimezoneOffset()) * 60000;\nvar refoffset = /*#__PURE__*/ refdate.getTimezoneOffset();\nfunction numdate(v /*:number*/ ) /*:Date*/ {\n    var out = new Date();\n    out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);\n    if (out.getTimezoneOffset() !== refoffset) {\n        out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);\n    }\n    return out;\n}\n/* ISO 8601 Duration */ function parse_isodur(s) {\n    var sec = 0, mt = 0, time = false;\n    var m = s.match(/P([0-9\\.]+Y)?([0-9\\.]+M)?([0-9\\.]+D)?T([0-9\\.]+H)?([0-9\\.]+M)?([0-9\\.]+S)?/);\n    if (!m) throw new Error(\"|\" + s + \"| is not an ISO8601 Duration\");\n    for(var i = 1; i != m.length; ++i){\n        if (!m[i]) continue;\n        mt = 1;\n        if (i > 3) time = true;\n        switch(m[i].slice(m[i].length - 1)){\n            case \"Y\":\n                throw new Error(\"Unsupported ISO Duration Field: \" + m[i].slice(m[i].length - 1));\n            case \"D\":\n                mt *= 24;\n            /* falls through */ case \"H\":\n                mt *= 60;\n            /* falls through */ case \"M\":\n                if (!time) throw new Error(\"Unsupported ISO Duration Field: M\");\n                else mt *= 60;\n            /* falls through */ case \"S\":\n                break;\n        }\n        sec += mt * parseInt(m[i], 10);\n    }\n    return sec;\n}\nvar good_pd_date_1 = /*#__PURE__*/ new Date(\"2017-02-19T19:06:09.000Z\");\nvar good_pd_date = /*#__PURE__*/ isNaN(/*#__PURE__*/ good_pd_date_1.getFullYear()) ? /*#__PURE__*/ new Date(\"2/19/17\") : good_pd_date_1;\nvar good_pd = /*#__PURE__*/ good_pd_date.getFullYear() == 2017;\n/* parses a date as a local date */ function parseDate(str /*:string|Date*/ , fixdate /*:?number*/ ) /*:Date*/ {\n    var d = new Date(str);\n    if (good_pd) {\n        /*:: if(fixdate == null) fixdate = 0; */ if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);\n        else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);\n        return d;\n    }\n    if (str instanceof Date) return str;\n    if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {\n        var s = d.getFullYear();\n        if (str.indexOf(\"\" + s) > -1) return d;\n        d.setFullYear(d.getFullYear() + 100);\n        return d;\n    }\n    var n = str.match(/\\d+/g) || [\n        \"2017\",\n        \"2\",\n        \"19\",\n        \"0\",\n        \"0\",\n        \"0\"\n    ];\n    var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);\n    if (str.indexOf(\"Z\") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);\n    return out;\n}\nfunction cc2str(arr /*:Array<number>*/ , debomit) /*:string*/ {\n    if (has_buf && Buffer.isBuffer(arr)) {\n        if (debomit) {\n            if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString(\"utf16le\"));\n            if (arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString(\"binary\")));\n        }\n        return arr.toString(\"binary\");\n    }\n    if (typeof TextDecoder !== \"undefined\") try {\n        if (debomit) {\n            if (arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder(\"utf-16le\").decode(arr.slice(2)));\n            if (arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder(\"utf-16be\").decode(arr.slice(2)));\n        }\n        var rev = {\n            \"€\": \"\\x80\",\n            \"‚\": \"\\x82\",\n            \"ƒ\": \"\\x83\",\n            \"„\": \"\\x84\",\n            \"…\": \"\\x85\",\n            \"†\": \"\\x86\",\n            \"‡\": \"\\x87\",\n            \"ˆ\": \"\\x88\",\n            \"‰\": \"\\x89\",\n            \"Š\": \"\\x8a\",\n            \"‹\": \"\\x8b\",\n            \"Œ\": \"\\x8c\",\n            \"Ž\": \"\\x8e\",\n            \"‘\": \"\\x91\",\n            \"’\": \"\\x92\",\n            \"“\": \"\\x93\",\n            \"”\": \"\\x94\",\n            \"•\": \"\\x95\",\n            \"–\": \"\\x96\",\n            \"—\": \"\\x97\",\n            \"˜\": \"\\x98\",\n            \"™\": \"\\x99\",\n            \"š\": \"\\x9a\",\n            \"›\": \"\\x9b\",\n            \"œ\": \"\\x9c\",\n            \"ž\": \"\\x9e\",\n            \"Ÿ\": \"\\x9f\"\n        };\n        if (Array.isArray(arr)) arr = new Uint8Array(arr);\n        return new TextDecoder(\"latin1\").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) {\n            return rev[c] || c;\n        });\n    } catch (e) {}\n    var o = [];\n    for(var i = 0; i != arr.length; ++i)o.push(String.fromCharCode(arr[i]));\n    return o.join(\"\");\n}\nfunction dup(o /*:any*/ ) /*:any*/ {\n    if (typeof JSON != \"undefined\" && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));\n    if (typeof o != \"object\" || o == null) return o;\n    if (o instanceof Date) return new Date(o.getTime());\n    var out = {};\n    for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);\n    return out;\n}\nfunction fill(c /*:string*/ , l /*:number*/ ) /*:string*/ {\n    var o = \"\";\n    while(o.length < l)o += c;\n    return o;\n}\n/* TODO: stress test */ function fuzzynum(s /*:string*/ ) /*:number*/ {\n    var v /*:number*/  = Number(s);\n    if (!isNaN(v)) return isFinite(v) ? v : NaN;\n    if (!/\\d/.test(s)) return v;\n    var wt = 1;\n    var ss = s.replace(/([\\d]),([\\d])/g, \"$1$2\").replace(/[$]/g, \"\").replace(/[%]/g, function() {\n        wt *= 100;\n        return \"\";\n    });\n    if (!isNaN(v = Number(ss))) return v / wt;\n    ss = ss.replace(/[(](.*)[)]/, function($$, $1) {\n        wt = -wt;\n        return $1;\n    });\n    if (!isNaN(v = Number(ss))) return v / wt;\n    return v;\n}\nvar lower_months = [\n    \"january\",\n    \"february\",\n    \"march\",\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\",\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\"\n];\nfunction fuzzydate(s /*:string*/ ) /*:Date*/ {\n    var o = new Date(s), n = new Date(NaN);\n    var y = o.getYear(), m = o.getMonth(), d = o.getDate();\n    if (isNaN(d)) return n;\n    var lower = s.toLowerCase();\n    if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {\n        lower = lower.replace(/[^a-z]/g, \"\").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, \"\");\n        if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n;\n    } else if (lower.match(/[a-z]/)) return n;\n    if (y < 0 || y > 8099) return n;\n    if ((m > 0 || d > 1) && y != 101) return o;\n    if (s.match(/[^-0-9:,\\/\\\\]/)) return n;\n    return o;\n}\nvar split_regex = /*#__PURE__*/ function() {\n    var safe_split_regex = \"abacaba\".split(/(:?b)/i).length == 5;\n    return function split_regex(str /*:string*/ , re, def /*:string*/ ) /*:Array<string>*/ {\n        if (safe_split_regex || typeof re == \"string\") return str.split(re);\n        var p = str.split(re), o = [\n            p[0]\n        ];\n        for(var i = 1; i < p.length; ++i){\n            o.push(def);\n            o.push(p[i]);\n        }\n        return o;\n    };\n}();\nfunction getdatastr(data) /*:?string*/ {\n    if (!data) return null;\n    if (data.content && data.type) return cc2str(data.content, true);\n    if (data.data) return debom(data.data);\n    if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString(\"binary\"));\n    if (data.asBinary) return debom(data.asBinary());\n    if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));\n    return null;\n}\nfunction getdatabin(data) {\n    if (!data) return null;\n    if (data.data) return char_codes(data.data);\n    if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();\n    if (data._data && data._data.getContent) {\n        var o = data._data.getContent();\n        if (typeof o == \"string\") return char_codes(o);\n        return Array.prototype.slice.call(o);\n    }\n    if (data.content && data.type) return data.content;\n    return null;\n}\nfunction getdata(data) {\n    return data && data.name.slice(-4) === \".bin\" ? getdatabin(data) : getdatastr(data);\n}\n/* Part 2 Section 10.1.2 \"Mapping Content Types\" Names are case-insensitive */ /* OASIS does not comment on filename case sensitivity */ function safegetzipfile(zip, file /*:string*/ ) {\n    var k = zip.FullPaths || keys(zip.files);\n    var f = file.toLowerCase().replace(/[\\/]/g, \"\\\\\"), g = f.replace(/\\\\/g, \"/\");\n    for(var i = 0; i < k.length; ++i){\n        var n = k[i].replace(/^Root Entry[\\/]/, \"\").toLowerCase();\n        if (f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];\n    }\n    return null;\n}\nfunction getzipfile(zip, file /*:string*/ ) {\n    var o = safegetzipfile(zip, file);\n    if (o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n    return o;\n}\nfunction getzipdata(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:any*/ {\n    if (!safe) return getdata(getzipfile(zip, file));\n    if (!file) return null;\n    try {\n        return getzipdata(zip, file);\n    } catch (e) {\n        return null;\n    }\n}\nfunction getzipstr(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:?string*/ {\n    if (!safe) return getdatastr(getzipfile(zip, file));\n    if (!file) return null;\n    try {\n        return getzipstr(zip, file);\n    } catch (e) {\n        return null;\n    }\n}\nfunction getzipbin(zip, file /*:string*/ , safe /*:?boolean*/ ) /*:any*/ {\n    if (!safe) return getdatabin(getzipfile(zip, file));\n    if (!file) return null;\n    try {\n        return getzipbin(zip, file);\n    } catch (e) {\n        return null;\n    }\n}\nfunction zipentries(zip) {\n    var k = zip.FullPaths || keys(zip.files), o = [];\n    for(var i = 0; i < k.length; ++i)if (k[i].slice(-1) != \"/\") o.push(k[i].replace(/^Root Entry[\\/]/, \"\"));\n    return o.sort();\n}\nfunction zip_add_file(zip, path, content) {\n    if (zip.FullPaths) {\n        if (typeof content == \"string\") {\n            var res;\n            if (has_buf) res = Buffer_from(content);\n            else res = utf8decode(content);\n            return CFB.utils.cfb_add(zip, path, res);\n        }\n        CFB.utils.cfb_add(zip, path, content);\n    } else zip.file(path, content);\n}\nfunction zip_new() {\n    return CFB.utils.cfb_new();\n}\nfunction zip_read(d, o) {\n    switch(o.type){\n        case \"base64\":\n            return CFB.read(d, {\n                type: \"base64\"\n            });\n        case \"binary\":\n            return CFB.read(d, {\n                type: \"binary\"\n            });\n        case \"buffer\":\n        case \"array\":\n            return CFB.read(d, {\n                type: \"buffer\"\n            });\n    }\n    throw new Error(\"Unrecognized type \" + o.type);\n}\nfunction resolve_path(path /*:string*/ , base /*:string*/ ) /*:string*/ {\n    if (path.charAt(0) == \"/\") return path.slice(1);\n    var result = base.split(\"/\");\n    if (base.slice(-1) != \"/\") result.pop(); // folder path\n    var target = path.split(\"/\");\n    while(target.length !== 0){\n        var step = target.shift();\n        if (step === \"..\") result.pop();\n        else if (step !== \".\") result.push(step);\n    }\n    return result.join(\"/\");\n}\nvar XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r\\n';\nvar attregexg = /([^\"\\s?>\\/]+)\\s*=\\s*((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:')|([^'\">\\s]+))/g;\nvar tagregex1 = /<[\\/\\?]?[a-zA-Z0-9:_-]+(?:\\s+[^\"\\s?>\\/]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^'\">\\s=]+))*\\s*[\\/\\?]?>/mg, tagregex2 = /<[^>]*>/g;\nvar tagregex = /*#__PURE__*/ XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;\nvar nsregex = /<\\w*:/, nsregex2 = /<(\\/?)\\w+:/;\nfunction parsexmltag(tag /*:string*/ , skip_root /*:?boolean*/ , skip_LC /*:?boolean*/ ) /*:any*/ {\n    var z = {} /*:any*/ ;\n    var eq = 0, c = 0;\n    for(; eq !== tag.length; ++eq)if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n    if (!skip_root) z[0] = tag.slice(0, eq);\n    if (eq === tag.length) return z;\n    var m = tag.match(attregexg), j = 0, v = \"\", i = 0, q = \"\", cc = \"\", quot = 1;\n    if (m) for(i = 0; i != m.length; ++i){\n        cc = m[i];\n        for(c = 0; c != cc.length; ++c)if (cc.charCodeAt(c) === 61) break;\n        q = cc.slice(0, c).trim();\n        while(cc.charCodeAt(c + 1) == 32)++c;\n        quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;\n        v = cc.slice(c + 1 + quot, cc.length - quot);\n        for(j = 0; j != q.length; ++j)if (q.charCodeAt(j) === 58) break;\n        if (j === q.length) {\n            if (q.indexOf(\"_\") > 0) q = q.slice(0, q.indexOf(\"_\")); // from ods\n            z[q] = v;\n            if (!skip_LC) z[q.toLowerCase()] = v;\n        } else {\n            var k = (j === 5 && q.slice(0, 5) === \"xmlns\" ? \"xmlns\" : \"\") + q.slice(j + 1);\n            if (z[k] && q.slice(j - 3, j) == \"ext\") continue; // from ods\n            z[k] = v;\n            if (!skip_LC) z[k.toLowerCase()] = v;\n        }\n    }\n    return z;\n}\nfunction strip_ns(x /*:string*/ ) /*:string*/ {\n    return x.replace(nsregex2, \"<$1\");\n}\nvar encodings = {\n    \"&quot;\": '\"',\n    \"&apos;\": \"'\",\n    \"&gt;\": \">\",\n    \"&lt;\": \"<\",\n    \"&amp;\": \"&\"\n};\nvar rencoding = /*#__PURE__*/ evert(encodings);\n//var rencstr = \"&<>'\\\"\".split(\"\");\n// TODO: CP remap (need to read file version to determine OS)\nvar unescapexml /*:StringConv*/  = /*#__PURE__*/ function() {\n    /* 22.4.2.4 bstr (Basic String) */ var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\\da-fA-F]+));/ig, coderegex = /_x([\\da-fA-F]{4})_/ig;\n    return function unescapexml(text /*:string*/ ) /*:string*/ {\n        var s = text + \"\", i = s.indexOf(\"<![CDATA[\");\n        if (i == -1) return s.replace(encregex, function($$, $1) {\n            return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf(\"x\") > -1 ? 16 : 10)) || $$;\n        }).replace(coderegex, function(m, c) {\n            return String.fromCharCode(parseInt(c, 16));\n        });\n        var j = s.indexOf(\"]]>\");\n        return unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));\n    };\n}();\nvar decregex = /[&<>'\"]/g, charegex = /[\\u0000-\\u0008\\u000b-\\u001f]/g;\nfunction escapexml(text /*:string*/ ) /*:string*/ {\n    var s = text + \"\";\n    return s.replace(decregex, function(y) {\n        return rencoding[y];\n    }).replace(charegex, function(s) {\n        return \"_x\" + (\"000\" + s.charCodeAt(0).toString(16)).slice(-4) + \"_\";\n    });\n}\nfunction escapexmltag(text /*:string*/ ) /*:string*/ {\n    return escapexml(text).replace(/ /g, \"_x0020_\");\n}\nvar htmlcharegex = /[\\u0000-\\u001f]/g;\nfunction escapehtml(text /*:string*/ ) /*:string*/ {\n    var s = text + \"\";\n    return s.replace(decregex, function(y) {\n        return rencoding[y];\n    }).replace(/\\n/g, \"<br/>\").replace(htmlcharegex, function(s) {\n        return \"&#x\" + (\"000\" + s.charCodeAt(0).toString(16)).slice(-4) + \";\";\n    });\n}\nfunction escapexlml(text /*:string*/ ) /*:string*/ {\n    var s = text + \"\";\n    return s.replace(decregex, function(y) {\n        return rencoding[y];\n    }).replace(htmlcharegex, function(s) {\n        return \"&#x\" + s.charCodeAt(0).toString(16).toUpperCase() + \";\";\n    });\n}\n/* TODO: handle codepages */ var xlml_fixstr /*:StringConv*/  = /*#__PURE__*/ function() {\n    var entregex = /&#(\\d+);/g;\n    function entrepl($$ /*:string*/ , $1 /*:string*/ ) /*:string*/ {\n        return String.fromCharCode(parseInt($1, 10));\n    }\n    return function xlml_fixstr(str /*:string*/ ) /*:string*/ {\n        return str.replace(entregex, entrepl);\n    };\n}();\nfunction xlml_unfixstr(str /*:string*/ ) /*:string*/ {\n    return str.replace(/(\\r\\n|[\\r\\n])/g, \"&#10;\");\n}\nfunction parsexmlbool(value /*:any*/ ) /*:boolean*/ {\n    switch(value){\n        case 1:\n        case true:\n        case \"1\":\n        case \"true\":\n        case \"TRUE\":\n            return true;\n        /* case '0': case 'false': case 'FALSE':*/ default:\n            return false;\n    }\n}\nfunction utf8reada(orig /*:string*/ ) /*:string*/ {\n    var out = \"\", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;\n    while(i < orig.length){\n        c = orig.charCodeAt(i++);\n        if (c < 128) {\n            out += String.fromCharCode(c);\n            continue;\n        }\n        d = orig.charCodeAt(i++);\n        if (c > 191 && c < 224) {\n            f = (c & 31) << 6;\n            f |= d & 63;\n            out += String.fromCharCode(f);\n            continue;\n        }\n        e = orig.charCodeAt(i++);\n        if (c < 240) {\n            out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);\n            continue;\n        }\n        f = orig.charCodeAt(i++);\n        w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;\n        out += String.fromCharCode(0xD800 + (w >>> 10 & 1023));\n        out += String.fromCharCode(0xDC00 + (w & 1023));\n    }\n    return out;\n}\nfunction utf8readb(data) {\n    var out = new_raw_buf(2 * data.length), w, i, j = 1, k = 0, ww = 0, c;\n    for(i = 0; i < data.length; i += j){\n        j = 1;\n        if ((c = data.charCodeAt(i)) < 128) w = c;\n        else if (c < 224) {\n            w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);\n            j = 2;\n        } else if (c < 240) {\n            w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);\n            j = 3;\n        } else {\n            j = 4;\n            w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);\n            w -= 65536;\n            ww = 0xD800 + (w >>> 10 & 1023);\n            w = 0xDC00 + (w & 1023);\n        }\n        if (ww !== 0) {\n            out[k++] = ww & 255;\n            out[k++] = ww >>> 8;\n            ww = 0;\n        }\n        out[k++] = w % 256;\n        out[k++] = w >>> 8;\n    }\n    return out.slice(0, k).toString(\"ucs2\");\n}\nfunction utf8readc(data) {\n    return Buffer_from(data, \"binary\").toString(\"utf8\");\n}\nvar utf8corpus = \"foo bar baz\\xe2\\x98\\x83\\xf0\\x9f\\x8d\\xa3\";\nvar utf8read = has_buf && /*#__PURE__*/ (utf8readc(utf8corpus) == /*#__PURE__*/ utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/ utf8readb(utf8corpus) == /*#__PURE__*/ utf8reada(utf8corpus) && utf8readb) || utf8reada;\nvar utf8write /*:StringConv*/  = has_buf ? function(data) {\n    return Buffer_from(data, \"utf8\").toString(\"binary\");\n} : function(orig /*:string*/ ) /*:string*/ {\n    var out /*:Array<string>*/  = [], i = 0, c = 0, d = 0;\n    while(i < orig.length){\n        c = orig.charCodeAt(i++);\n        switch(true){\n            case c < 128:\n                out.push(String.fromCharCode(c));\n                break;\n            case c < 2048:\n                out.push(String.fromCharCode(192 + (c >> 6)));\n                out.push(String.fromCharCode(128 + (c & 63)));\n                break;\n            case c >= 55296 && c < 57344:\n                c -= 55296;\n                d = orig.charCodeAt(i++) - 56320 + (c << 10);\n                out.push(String.fromCharCode(240 + (d >> 18 & 7)));\n                out.push(String.fromCharCode(144 + (d >> 12 & 63)));\n                out.push(String.fromCharCode(128 + (d >> 6 & 63)));\n                out.push(String.fromCharCode(128 + (d & 63)));\n                break;\n            default:\n                out.push(String.fromCharCode(224 + (c >> 12)));\n                out.push(String.fromCharCode(128 + (c >> 6 & 63)));\n                out.push(String.fromCharCode(128 + (c & 63)));\n        }\n    }\n    return out.join(\"\");\n};\n// matches <foo>...</foo> extracts content\nvar matchtag = /*#__PURE__*/ function() {\n    var mtcache /*:{[k:string]:RegExp}*/  = {} /*:any*/ ;\n    return function matchtag(f /*:string*/ , g /*:?string*/ ) /*:RegExp*/ {\n        var t = f + \"|\" + (g || \"\");\n        if (mtcache[t]) return mtcache[t];\n        return mtcache[t] = new RegExp(\"<(?:\\\\w+:)?\" + f + '(?: xml:space=\"preserve\")?(?:[^>]*)>([\\\\s\\\\S]*?)</(?:\\\\w+:)?' + f + \">\", g || \"\");\n    };\n}();\nvar htmldecode /*:{(s:string):string}*/  = /*#__PURE__*/ function() {\n    var entities /*:Array<[RegExp, string]>*/  = [\n        [\n            \"nbsp\",\n            \" \"\n        ],\n        [\n            \"middot\",\n            \"\\xb7\"\n        ],\n        [\n            \"quot\",\n            '\"'\n        ],\n        [\n            \"apos\",\n            \"'\"\n        ],\n        [\n            \"gt\",\n            \">\"\n        ],\n        [\n            \"lt\",\n            \"<\"\n        ],\n        [\n            \"amp\",\n            \"&\"\n        ]\n    ].map(function(x /*:[string, string]*/ ) {\n        return [\n            new RegExp(\"&\" + x[0] + \";\", \"ig\"),\n            x[1]\n        ];\n    });\n    return function htmldecode(str /*:string*/ ) /*:string*/ {\n        var o = str// Remove new lines and spaces from start of content\n        .replace(/^[\\t\\n\\r ]+/, \"\")// Remove new lines and spaces from end of content\n        .replace(/[\\t\\n\\r ]+$/, \"\")// Added line which removes any white space characters after and before html tags\n        .replace(/>\\s+/g, \">\").replace(/\\s+</g, \"<\")// Replace remaining new lines and spaces with space\n        .replace(/[\\t\\n\\r ]+/g, \" \")// Replace <br> tags with new lines\n        .replace(/<\\s*[bB][rR]\\s*\\/?>/g, \"\\n\")// Strip HTML elements\n        .replace(/<[^>]*>/g, \"\");\n        for(var i = 0; i < entities.length; ++i)o = o.replace(entities[i][0], entities[i][1]);\n        return o;\n    };\n}();\nvar vtregex = /*#__PURE__*/ function() {\n    var vt_cache = {};\n    return function vt_regex(bt) {\n        if (vt_cache[bt] !== undefined) return vt_cache[bt];\n        return vt_cache[bt] = new RegExp(\"<(?:vt:)?\" + bt + \">([\\\\s\\\\S]*?)</(?:vt:)?\" + bt + \">\", \"g\");\n    };\n}();\nvar vtvregex = /<\\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\\s\\S]*)</;\nfunction parseVector(data /*:string*/ , opts) /*:Array<{v:string,t:string}>*/ {\n    var h = parsexmltag(data);\n    var matches /*:Array<string>*/  = data.match(vtregex(h.baseType)) || [];\n    var res /*:Array<any>*/  = [];\n    if (matches.length != h.size) {\n        if (opts.WTF) throw new Error(\"unexpected vector length \" + matches.length + \" != \" + h.size);\n        return res;\n    }\n    matches.forEach(function(x /*:string*/ ) {\n        var v = x.replace(vtvregex, \"\").match(vtmregex);\n        if (v) res.push({\n            v: utf8read(v[2]),\n            t: v[1]\n        });\n    });\n    return res;\n}\nvar wtregex = /(^\\s|\\s$|\\n)/;\nfunction writetag(f /*:string*/ , g /*:string*/ ) /*:string*/ {\n    return \"<\" + f + (g.match(wtregex) ? ' xml:space=\"preserve\"' : \"\") + \">\" + g + \"</\" + f + \">\";\n}\nfunction wxt_helper(h) /*:string*/ {\n    return keys(h).map(function(k) {\n        return \" \" + k + '=\"' + h[k] + '\"';\n    }).join(\"\");\n}\nfunction writextag(f /*:string*/ , g /*:?string*/ , h) {\n    return \"<\" + f + (h != null ? wxt_helper(h) : \"\") + (g != null ? (g.match(wtregex) ? ' xml:space=\"preserve\"' : \"\") + \">\" + g + \"</\" + f : \"/\") + \">\";\n}\nfunction write_w3cdtf(d /*:Date*/ , t /*:?boolean*/ ) /*:string*/ {\n    try {\n        return d.toISOString().replace(/\\.\\d*/, \"\");\n    } catch (e) {\n        if (t) throw e;\n    }\n    return \"\";\n}\nfunction write_vt(s, xlsx /*:?boolean*/ ) /*:string*/ {\n    switch(typeof s){\n        case \"string\":\n            var o = writextag(\"vt:lpwstr\", escapexml(s));\n            if (xlsx) o = o.replace(/&quot;/g, \"_x0022_\");\n            return o;\n        case \"number\":\n            return writextag((s | 0) == s ? \"vt:i4\" : \"vt:r8\", escapexml(String(s)));\n        case \"boolean\":\n            return writextag(\"vt:bool\", s ? \"true\" : \"false\");\n    }\n    if (s instanceof Date) return writextag(\"vt:filetime\", write_w3cdtf(s));\n    throw new Error(\"Unable to serialize \" + s);\n}\nfunction xlml_normalize(d) /*:string*/ {\n    if (has_buf && /*::typeof Buffer !== \"undefined\" && d != null && d instanceof Buffer &&*/ Buffer.isBuffer(d)) return d.toString(\"utf8\");\n    if (typeof d === \"string\") return d;\n    /* duktape */ if (typeof Uint8Array !== \"undefined\" && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));\n    throw new Error(\"Bad input format: expected Buffer or string\");\n}\n/* UOS uses CJK in tags */ var xlmlregex = /<(\\/?)([^\\s?><!\\/:]*:|)([^\\s?<>:\\/]+)(?:[\\s?:\\/][^>]*)?>/mg;\n//var xlmlregex = /<(\\/?)([a-z0-9]*:|)(\\w+)[^>]*>/mg;\nvar XMLNS = {\n    CORE_PROPS: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n    CUST_PROPS: \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\",\n    EXT_PROPS: \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\",\n    CT: \"http://schemas.openxmlformats.org/package/2006/content-types\",\n    RELS: \"http://schemas.openxmlformats.org/package/2006/relationships\",\n    TCMNT: \"http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments\",\n    \"dc\": \"http://purl.org/dc/elements/1.1/\",\n    \"dcterms\": \"http://purl.org/dc/terms/\",\n    \"dcmitype\": \"http://purl.org/dc/dcmitype/\",\n    \"mx\": \"http://schemas.microsoft.com/office/mac/excel/2008/main\",\n    \"r\": \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n    \"sjs\": \"http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties\",\n    \"vt\": \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\",\n    \"xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema\"\n} /*:any*/ ;\nvar XMLNS_main = [\n    \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\",\n    \"http://purl.oclc.org/ooxml/spreadsheetml/main\",\n    \"http://schemas.microsoft.com/office/excel/2006/main\",\n    \"http://schemas.microsoft.com/office/excel/2006/2\"\n];\nvar XLMLNS = {\n    \"o\": \"urn:schemas-microsoft-com:office:office\",\n    \"x\": \"urn:schemas-microsoft-com:office:excel\",\n    \"ss\": \"urn:schemas-microsoft-com:office:spreadsheet\",\n    \"dt\": \"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\",\n    \"mv\": \"http://macVmlSchemaUri\",\n    \"v\": \"urn:schemas-microsoft-com:vml\",\n    \"html\": \"http://www.w3.org/TR/REC-html40\"\n} /*:any*/ ;\nfunction read_double_le(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    var s = 1 - 2 * (b[idx + 7] >>> 7);\n    var e = ((b[idx + 7] & 0x7f) << 4) + (b[idx + 6] >>> 4 & 0x0f);\n    var m = b[idx + 6] & 0x0f;\n    for(var i = 5; i >= 0; --i)m = m * 256 + b[idx + i];\n    if (e == 0x7ff) return m == 0 ? s * Infinity : NaN;\n    if (e == 0) e = -1022;\n    else {\n        e -= 1023;\n        m += Math.pow(2, 52);\n    }\n    return s * Math.pow(2, e - 52) * m;\n}\nfunction write_double_le(b /*:RawBytes|CFBlob*/ , v /*:number*/ , idx /*:number*/ ) {\n    var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;\n    var av = bs ? -v : v;\n    if (!isFinite(av)) {\n        e = 0x7ff;\n        m = isNaN(v) ? 0x6969 : 0;\n    } else if (av == 0) e = m = 0;\n    else {\n        e = Math.floor(Math.log(av) / Math.LN2);\n        m = av * Math.pow(2, 52 - e);\n        if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {\n            e = -1022;\n        } else {\n            m -= Math.pow(2, 52);\n            e += 1023;\n        }\n    }\n    for(var i = 0; i <= 5; ++i, m /= 256)b[idx + i] = m & 0xff;\n    b[idx + 6] = (e & 0x0f) << 4 | m & 0xf;\n    b[idx + 7] = e >> 4 | bs;\n}\nvar ___toBuffer = function(bufs /*:Array<Array<RawBytes> >*/ ) /*:RawBytes*/ {\n    var x = [], w = 10240;\n    for(var i = 0; i < bufs[0].length; ++i)if (bufs[0][i]) for(var j = 0, L = bufs[0][i].length; j < L; j += w)x.push.apply(x, bufs[0][i].slice(j, j + w));\n    return x;\n};\nvar __toBuffer = has_buf ? function(bufs) {\n    return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x) {\n        return Buffer.isBuffer(x) ? x : Buffer_from(x);\n    })) : ___toBuffer(bufs);\n} : ___toBuffer;\nvar ___utf16le = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) /*:string*/ {\n    var ss /*:Array<string>*/  = [];\n    for(var i = s; i < e; i += 2)ss.push(String.fromCharCode(__readUInt16LE(b, i)));\n    return ss.join(\"\").replace(chr0, \"\");\n};\nvar __utf16le = has_buf ? function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) /*:string*/ {\n    if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);\n    return b.toString(\"utf16le\", s, e).replace(chr0, \"\") /*.replace(chr1,'!')*/ ;\n} : ___utf16le;\nvar ___hexlify = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , l /*:number*/ ) /*:string*/ {\n    var ss /*:Array<string>*/  = [];\n    for(var i = s; i < s + l; ++i)ss.push((\"0\" + b[i].toString(16)).slice(-2));\n    return ss.join(\"\");\n};\nvar __hexlify = has_buf ? function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , l /*:number*/ ) /*:string*/ {\n    return Buffer.isBuffer(b) ? b.toString(\"hex\", s, s + l) : ___hexlify(b, s, l);\n} : ___hexlify;\nvar ___utf8 = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {\n    var ss = [];\n    for(var i = s; i < e; i++)ss.push(String.fromCharCode(__readUInt8(b, i)));\n    return ss.join(\"\");\n};\nvar __utf8 = has_buf ? function utf8_b(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {\n    return Buffer.isBuffer(b) ? b.toString(\"utf8\", s, e) : ___utf8(b, s, e);\n} : ___utf8;\nvar ___lpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n    var len = __readUInt32LE(b, i);\n    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n};\nvar __lpstr = ___lpstr;\nvar ___cpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n    var len = __readUInt32LE(b, i);\n    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n};\nvar __cpstr = ___cpstr;\nvar ___lpwstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n    var len = 2 * __readUInt32LE(b, i);\n    return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : \"\";\n};\nvar __lpwstr = ___lpwstr;\nvar ___lpp4 = function lpp4_(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n    var len = __readUInt32LE(b, i);\n    return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : \"\";\n};\nvar __lpp4 = ___lpp4;\nvar ___8lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n    var len = __readUInt32LE(b, i);\n    return len > 0 ? __utf8(b, i + 4, i + 4 + len) : \"\";\n};\nvar __8lpp4 = ___8lpp4;\nvar ___double = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) {\n    return read_double_le(b, idx);\n};\nvar __double = ___double;\nvar is_buf = function is_buf_a(a) {\n    return Array.isArray(a) || typeof Uint8Array !== \"undefined\" && a instanceof Uint8Array;\n};\nif (has_buf /*:: && typeof Buffer !== 'undefined'*/ ) {\n    __lpstr = function lpstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        if (!Buffer.isBuffer(b)) return ___lpstr(b, i);\n        var len = b.readUInt32LE(i);\n        return len > 0 ? b.toString(\"utf8\", i + 4, i + 4 + len - 1) : \"\";\n    };\n    __cpstr = function cpstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        if (!Buffer.isBuffer(b)) return ___cpstr(b, i);\n        var len = b.readUInt32LE(i);\n        return len > 0 ? b.toString(\"utf8\", i + 4, i + 4 + len - 1) : \"\";\n    };\n    __lpwstr = function lpwstr_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        if (!Buffer.isBuffer(b)) return ___lpwstr(b, i);\n        var len = 2 * b.readUInt32LE(i);\n        return b.toString(\"utf16le\", i + 4, i + 4 + len - 1);\n    };\n    __lpp4 = function lpp4_b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        if (!Buffer.isBuffer(b)) return ___lpp4(b, i);\n        var len = b.readUInt32LE(i);\n        return b.toString(\"utf16le\", i + 4, i + 4 + len);\n    };\n    __8lpp4 = function lpp4_8b(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        if (!Buffer.isBuffer(b)) return ___8lpp4(b, i);\n        var len = b.readUInt32LE(i);\n        return b.toString(\"utf8\", i + 4, i + 4 + len);\n    };\n    __double = function double_(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        if (Buffer.isBuffer(b)) return b.readDoubleLE(i);\n        return ___double(b, i);\n    };\n    is_buf = function is_buf_b(a) {\n        return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== \"undefined\" && a instanceof Uint8Array;\n    };\n}\n/* from js-xls */ function cpdoit() {\n    __utf16le = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {\n        return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, \"\");\n    };\n    __utf8 = function(b /*:RawBytes|CFBlob*/ , s /*:number*/ , e /*:number*/ ) {\n        return $cptable.utils.decode(65001, b.slice(s, e));\n    };\n    __lpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        var len = __readUInt32LE(b, i);\n        return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n    };\n    __cpstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        var len = __readUInt32LE(b, i);\n        return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n    };\n    __lpwstr = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        var len = 2 * __readUInt32LE(b, i);\n        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : \"\";\n    };\n    __lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        var len = __readUInt32LE(b, i);\n        return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : \"\";\n    };\n    __8lpp4 = function(b /*:RawBytes|CFBlob*/ , i /*:number*/ ) {\n        var len = __readUInt32LE(b, i);\n        return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : \"\";\n    };\n}\nif (typeof $cptable !== \"undefined\") cpdoit();\nvar __readUInt8 = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    return b[idx];\n};\nvar __readUInt16LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    return b[idx + 1] * (1 << 8) + b[idx];\n};\nvar __readInt16LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    var u = b[idx + 1] * (1 << 8) + b[idx];\n    return u < 0x8000 ? u : (0xffff - u + 1) * -1;\n};\nvar __readUInt32LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n};\nvar __readInt32LE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];\n};\nvar __readInt32BE = function(b /*:RawBytes|CFBlob*/ , idx /*:number*/ ) /*:number*/ {\n    return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];\n};\nfunction ReadShift(size /*:number*/ , t /*:?string*/ ) /*:number|string*/ {\n    var o = \"\", oI /*:: :number = 0*/ , oR, oo = [], w, vv, i, loc;\n    switch(t){\n        case \"dbcs\":\n            loc = this.l;\n            if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString(\"utf16le\");\n            else for(i = 0; i < size; ++i){\n                o += String.fromCharCode(__readUInt16LE(this, loc));\n                loc += 2;\n            }\n            size *= 2;\n            break;\n        case \"utf8\":\n            o = __utf8(this, this.l, this.l + size);\n            break;\n        case \"utf16le\":\n            size *= 2;\n            o = __utf16le(this, this.l, this.l + size);\n            break;\n        case \"wstr\":\n            if (typeof $cptable !== \"undefined\") o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));\n            else return ReadShift.call(this, size, \"dbcs\");\n            size = 2 * size;\n            break;\n        /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */ case \"lpstr-ansi\":\n            o = __lpstr(this, this.l);\n            size = 4 + __readUInt32LE(this, this.l);\n            break;\n        case \"lpstr-cp\":\n            o = __cpstr(this, this.l);\n            size = 4 + __readUInt32LE(this, this.l);\n            break;\n        /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */ case \"lpwstr\":\n            o = __lpwstr(this, this.l);\n            size = 4 + 2 * __readUInt32LE(this, this.l);\n            break;\n        /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */ case \"lpp4\":\n            size = 4 + __readUInt32LE(this, this.l);\n            o = __lpp4(this, this.l);\n            if (size & 0x02) size += 2;\n            break;\n        /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */ case \"8lpp4\":\n            size = 4 + __readUInt32LE(this, this.l);\n            o = __8lpp4(this, this.l);\n            if (size & 0x03) size += 4 - (size & 0x03);\n            break;\n        case \"cstr\":\n            size = 0;\n            o = \"\";\n            while((w = __readUInt8(this, this.l + size++)) !== 0)oo.push(_getchar(w));\n            o = oo.join(\"\");\n            break;\n        case \"_wstr\":\n            size = 0;\n            o = \"\";\n            while((w = __readUInt16LE(this, this.l + size)) !== 0){\n                oo.push(_getchar(w));\n                size += 2;\n            }\n            size += 2;\n            o = oo.join(\"\");\n            break;\n        /* sbcs and dbcs support continue records in the SST way TODO codepages */ case \"dbcs-cont\":\n            o = \"\";\n            loc = this.l;\n            for(i = 0; i < size; ++i){\n                if (this.lens && this.lens.indexOf(loc) !== -1) {\n                    w = __readUInt8(this, loc);\n                    this.l = loc + 1;\n                    vv = ReadShift.call(this, size - i, w ? \"dbcs-cont\" : \"sbcs-cont\");\n                    return oo.join(\"\") + vv;\n                }\n                oo.push(_getchar(__readUInt16LE(this, loc)));\n                loc += 2;\n            }\n            o = oo.join(\"\");\n            size *= 2;\n            break;\n        case \"cpstr\":\n            if (typeof $cptable !== \"undefined\") {\n                o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));\n                break;\n            }\n        /* falls through */ case \"sbcs-cont\":\n            o = \"\";\n            loc = this.l;\n            for(i = 0; i != size; ++i){\n                if (this.lens && this.lens.indexOf(loc) !== -1) {\n                    w = __readUInt8(this, loc);\n                    this.l = loc + 1;\n                    vv = ReadShift.call(this, size - i, w ? \"dbcs-cont\" : \"sbcs-cont\");\n                    return oo.join(\"\") + vv;\n                }\n                oo.push(_getchar(__readUInt8(this, loc)));\n                loc += 1;\n            }\n            o = oo.join(\"\");\n            break;\n        default:\n            switch(size){\n                case 1:\n                    oI = __readUInt8(this, this.l);\n                    this.l++;\n                    return oI;\n                case 2:\n                    oI = (t === \"i\" ? __readInt16LE : __readUInt16LE)(this, this.l);\n                    this.l += 2;\n                    return oI;\n                case 4:\n                case -4:\n                    if (t === \"i\" || (this[this.l + 3] & 0x80) === 0) {\n                        oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);\n                        this.l += 4;\n                        return oI;\n                    } else {\n                        oR = __readUInt32LE(this, this.l);\n                        this.l += 4;\n                    }\n                    return oR;\n                case 8:\n                case -8:\n                    if (t === \"f\") {\n                        if (size == 8) oR = __double(this, this.l);\n                        else oR = __double([\n                            this[this.l + 7],\n                            this[this.l + 6],\n                            this[this.l + 5],\n                            this[this.l + 4],\n                            this[this.l + 3],\n                            this[this.l + 2],\n                            this[this.l + 1],\n                            this[this.l + 0]\n                        ], 0);\n                        this.l += 8;\n                        return oR;\n                    } else size = 8;\n                /* falls through */ case 16:\n                    o = __hexlify(this, this.l, size);\n                    break;\n            }\n    }\n    this.l += size;\n    return o;\n}\nvar __writeUInt32LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {\n    b[idx] = val & 0xFF;\n    b[idx + 1] = val >>> 8 & 0xFF;\n    b[idx + 2] = val >>> 16 & 0xFF;\n    b[idx + 3] = val >>> 24 & 0xFF;\n};\nvar __writeInt32LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {\n    b[idx] = val & 0xFF;\n    b[idx + 1] = val >> 8 & 0xFF;\n    b[idx + 2] = val >> 16 & 0xFF;\n    b[idx + 3] = val >> 24 & 0xFF;\n};\nvar __writeUInt16LE = function(b /*:RawBytes|CFBlob*/ , val /*:number*/ , idx /*:number*/ ) /*:void*/ {\n    b[idx] = val & 0xFF;\n    b[idx + 1] = val >>> 8 & 0xFF;\n};\nfunction WriteShift(t /*:number*/ , val /*:string|number*/ , f /*:?string*/ ) /*:any*/ {\n    var size = 0, i = 0;\n    if (f === \"dbcs\") {\n        /*:: if(typeof val !== 'string') throw new Error(\"unreachable\"); */ for(i = 0; i != val.length; ++i)__writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);\n        size = 2 * val.length;\n    } else if (f === \"sbcs\") {\n        if (typeof $cptable !== \"undefined\" && current_ansi == 874) {\n            /* TODO: use tables directly, don't encode */ /*:: if(typeof val !== \"string\") throw new Error(\"unreachable\"); */ for(i = 0; i != val.length; ++i){\n                var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i));\n                this[this.l + i] = cppayload[0];\n            }\n        } else {\n            /*:: if(typeof val !== 'string') throw new Error(\"unreachable\"); */ val = val.replace(/[^\\x00-\\x7F]/g, \"_\");\n            /*:: if(typeof val !== 'string') throw new Error(\"unreachable\"); */ for(i = 0; i != val.length; ++i)this[this.l + i] = val.charCodeAt(i) & 0xFF;\n        }\n        size = val.length;\n    } else if (f === \"hex\") {\n        for(; i < t; ++i){\n            /*:: if(typeof val !== \"string\") throw new Error(\"unreachable\"); */ this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;\n        }\n        return this;\n    } else if (f === \"utf16le\") {\n        /*:: if(typeof val !== \"string\") throw new Error(\"unreachable\"); */ var end /*:number*/  = Math.min(this.l + t, this.length);\n        for(i = 0; i < Math.min(val.length, t); ++i){\n            var cc = val.charCodeAt(i);\n            this[this.l++] = cc & 0xff;\n            this[this.l++] = cc >> 8;\n        }\n        while(this.l < end)this[this.l++] = 0;\n        return this;\n    } else /*:: if(typeof val === 'number') */ switch(t){\n        case 1:\n            size = 1;\n            this[this.l] = val & 0xFF;\n            break;\n        case 2:\n            size = 2;\n            this[this.l] = val & 0xFF;\n            val >>>= 8;\n            this[this.l + 1] = val & 0xFF;\n            break;\n        case 3:\n            size = 3;\n            this[this.l] = val & 0xFF;\n            val >>>= 8;\n            this[this.l + 1] = val & 0xFF;\n            val >>>= 8;\n            this[this.l + 2] = val & 0xFF;\n            break;\n        case 4:\n            size = 4;\n            __writeUInt32LE(this, val, this.l);\n            break;\n        case 8:\n            size = 8;\n            if (f === \"f\") {\n                write_double_le(this, val, this.l);\n                break;\n            }\n        /* falls through */ case 16:\n            break;\n        case -4:\n            size = 4;\n            __writeInt32LE(this, val, this.l);\n            break;\n    }\n    this.l += size;\n    return this;\n}\nfunction CheckField(hexstr /*:string*/ , fld /*:string*/ ) /*:void*/ {\n    var m = __hexlify(this, this.l, hexstr.length >> 1);\n    if (m !== hexstr) throw new Error(fld + \"Expected \" + hexstr + \" saw \" + m);\n    this.l += hexstr.length >> 1;\n}\nfunction prep_blob(blob, pos /*:number*/ ) /*:void*/ {\n    blob.l = pos;\n    blob.read_shift = /*::(*/ ReadShift /*:: :any)*/ ;\n    blob.chk = CheckField;\n    blob.write_shift = WriteShift;\n}\nfunction parsenoop(blob, length /*:: :number, opts?:any */ ) {\n    blob.l += length;\n}\nfunction new_buf(sz /*:number*/ ) /*:Block*/ {\n    var o = new_raw_buf(sz);\n    prep_blob(o, 0);\n    return o;\n}\n/* [MS-XLSB] 2.1.4 Record */ function recordhopper(data, cb /*:RecordHopperCB*/ , opts /*:?any*/ ) {\n    if (!data) return;\n    var tmpbyte, cntbyte, length;\n    prep_blob(data, data.l || 0);\n    var L = data.length, RT = 0, tgt = 0;\n    while(data.l < L){\n        RT = data.read_shift(1);\n        if (RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F) << 7);\n        var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];\n        tmpbyte = data.read_shift(1);\n        length = tmpbyte & 0x7F;\n        for(cntbyte = 1; cntbyte < 4 && tmpbyte & 0x80; ++cntbyte)length += ((tmpbyte = data.read_shift(1)) & 0x7F) << 7 * cntbyte;\n        tgt = data.l + length;\n        var d = R.f && R.f(data, length, opts);\n        data.l = tgt;\n        if (cb(d, R, RT)) return;\n    }\n}\n/* control buffer usage for fixed-length buffers */ function buf_array() /*:BufArray*/ {\n    var bufs /*:Array<Block>*/  = [], blksz = has_buf ? 256 : 2048;\n    var newblk = function ba_newblk(sz /*:number*/ ) /*:Block*/ {\n        var o /*:Block*/  = new_buf(sz);\n        prep_blob(o, 0);\n        return o;\n    };\n    var curbuf /*:Block*/  = newblk(blksz);\n    var endbuf = function ba_endbuf() {\n        if (!curbuf) return;\n        if (curbuf.length > curbuf.l) {\n            curbuf = curbuf.slice(0, curbuf.l);\n            curbuf.l = curbuf.length;\n        }\n        if (curbuf.length > 0) bufs.push(curbuf);\n        curbuf = null;\n    };\n    var next = function ba_next(sz /*:number*/ ) /*:Block*/ {\n        if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;\n        endbuf();\n        return curbuf = newblk(Math.max(sz + 1, blksz));\n    };\n    var end = function ba_end() {\n        endbuf();\n        return bconcat(bufs);\n    };\n    var push = function ba_push(buf) {\n        endbuf();\n        curbuf = buf;\n        if (curbuf.l == null) curbuf.l = curbuf.length;\n        next(blksz);\n    };\n    return {\n        next: next,\n        push: push,\n        end: end,\n        _bufs: bufs\n    } /*:any*/ ;\n}\nfunction write_record(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) {\n    var t /*:number*/  = +type, l;\n    if (isNaN(t)) return; // TODO: throw something here?\n    if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0;\n    l = 1 + (t >= 0x80 ? 1 : 0) + 1 /* + length*/ ;\n    if (length >= 0x80) ++l;\n    if (length >= 0x4000) ++l;\n    if (length >= 0x200000) ++l;\n    var o = ba.next(l);\n    if (t <= 0x7F) o.write_shift(1, t);\n    else {\n        o.write_shift(1, (t & 0x7F) + 0x80);\n        o.write_shift(1, t >> 7);\n    }\n    for(var i = 0; i != 4; ++i){\n        if (length >= 0x80) {\n            o.write_shift(1, (length & 0x7F) + 0x80);\n            length >>= 7;\n        } else {\n            o.write_shift(1, length);\n            break;\n        }\n    }\n    if (/*:: length != null &&*/ length > 0 && is_buf(payload)) ba.push(payload);\n}\n/* XLS ranges enforced */ function shift_cell_xls(cell /*:CellAddress*/ , tgt /*:any*/ , opts /*:?any*/ ) /*:CellAddress*/ {\n    var out = dup(cell);\n    if (tgt.s) {\n        if (out.cRel) out.c += tgt.s.c;\n        if (out.rRel) out.r += tgt.s.r;\n    } else {\n        if (out.cRel) out.c += tgt.c;\n        if (out.rRel) out.r += tgt.r;\n    }\n    if (!opts || opts.biff < 12) {\n        while(out.c >= 0x100)out.c -= 0x100;\n        while(out.r >= 0x10000)out.r -= 0x10000;\n    }\n    return out;\n}\nfunction shift_range_xls(cell, range, opts) {\n    var out = dup(cell);\n    out.s = shift_cell_xls(out.s, range.s, opts);\n    out.e = shift_cell_xls(out.e, range.s, opts);\n    return out;\n}\nfunction encode_cell_xls(c /*:CellAddress*/ , biff /*:number*/ ) /*:string*/ {\n    if (c.cRel && c.c < 0) {\n        c = dup(c);\n        while(c.c < 0)c.c += biff > 8 ? 0x4000 : 0x100;\n    }\n    if (c.rRel && c.r < 0) {\n        c = dup(c);\n        while(c.r < 0)c.r += biff > 8 ? 0x100000 : biff > 5 ? 0x10000 : 0x4000;\n    }\n    var s = encode_cell(c);\n    if (!c.cRel && c.cRel != null) s = fix_col(s);\n    if (!c.rRel && c.rRel != null) s = fix_row(s);\n    return s;\n}\nfunction encode_range_xls(r, opts) /*:string*/ {\n    if (r.s.r == 0 && !r.s.rRel) {\n        if (r.e.r == (opts.biff >= 12 ? 0xFFFFF : opts.biff >= 8 ? 0x10000 : 0x4000) && !r.e.rRel) {\n            return (r.s.cRel ? \"\" : \"$\") + encode_col(r.s.c) + \":\" + (r.e.cRel ? \"\" : \"$\") + encode_col(r.e.c);\n        }\n    }\n    if (r.s.c == 0 && !r.s.cRel) {\n        if (r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {\n            return (r.s.rRel ? \"\" : \"$\") + encode_row(r.s.r) + \":\" + (r.e.rRel ? \"\" : \"$\") + encode_row(r.e.r);\n        }\n    }\n    return encode_cell_xls(r.s, opts.biff) + \":\" + encode_cell_xls(r.e, opts.biff);\n}\nfunction decode_row(rowstr /*:string*/ ) /*:number*/ {\n    return parseInt(unfix_row(rowstr), 10) - 1;\n}\nfunction encode_row(row /*:number*/ ) /*:string*/ {\n    return \"\" + (row + 1);\n}\nfunction fix_row(cstr /*:string*/ ) /*:string*/ {\n    return cstr.replace(/([A-Z]|^)(\\d+)$/, \"$1$$$2\");\n}\nfunction unfix_row(cstr /*:string*/ ) /*:string*/ {\n    return cstr.replace(/\\$(\\d+)$/, \"$1\");\n}\nfunction decode_col(colstr /*:string*/ ) /*:number*/ {\n    var c = unfix_col(colstr), d = 0, i = 0;\n    for(; i !== c.length; ++i)d = 26 * d + c.charCodeAt(i) - 64;\n    return d - 1;\n}\nfunction encode_col(col /*:number*/ ) /*:string*/ {\n    if (col < 0) throw new Error(\"invalid column \" + col);\n    var s = \"\";\n    for(++col; col; col = Math.floor((col - 1) / 26))s = String.fromCharCode((col - 1) % 26 + 65) + s;\n    return s;\n}\nfunction fix_col(cstr /*:string*/ ) /*:string*/ {\n    return cstr.replace(/^([A-Z])/, \"$$$1\");\n}\nfunction unfix_col(cstr /*:string*/ ) /*:string*/ {\n    return cstr.replace(/^\\$([A-Z])/, \"$1\");\n}\nfunction split_cell(cstr /*:string*/ ) /*:Array<string>*/ {\n    return cstr.replace(/(\\$?[A-Z]*)(\\$?\\d*)/, \"$1,$2\").split(\",\");\n}\n//function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }\nfunction decode_cell(cstr /*:string*/ ) /*:CellAddress*/ {\n    var R = 0, C = 0;\n    for(var i = 0; i < cstr.length; ++i){\n        var cc = cstr.charCodeAt(i);\n        if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);\n        else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);\n    }\n    return {\n        c: C - 1,\n        r: R - 1\n    };\n}\n//function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }\nfunction encode_cell(cell /*:CellAddress*/ ) /*:string*/ {\n    var col = cell.c + 1;\n    var s = \"\";\n    for(; col; col = (col - 1) / 26 | 0)s = String.fromCharCode((col - 1) % 26 + 65) + s;\n    return s + (cell.r + 1);\n}\nfunction decode_range(range /*:string*/ ) /*:Range*/ {\n    var idx = range.indexOf(\":\");\n    if (idx == -1) return {\n        s: decode_cell(range),\n        e: decode_cell(range)\n    };\n    return {\n        s: decode_cell(range.slice(0, idx)),\n        e: decode_cell(range.slice(idx + 1))\n    };\n}\n/*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */ function encode_range(cs /*:CellAddrSpec|Range*/ , ce /*:?CellAddrSpec*/ ) /*:string*/ {\n    if (typeof ce === \"undefined\" || typeof ce === \"number\") {\n        /*:: if(!(cs instanceof Range)) throw \"unreachable\"; */ return encode_range(cs.s, cs.e);\n    }\n    /*:: if((cs instanceof Range)) throw \"unreachable\"; */ if (typeof cs !== \"string\") cs = encode_cell(cs /*:any*/ );\n    if (typeof ce !== \"string\") ce = encode_cell(ce /*:any*/ );\n    /*:: if(typeof cs !== 'string') throw \"unreachable\"; */ /*:: if(typeof ce !== 'string') throw \"unreachable\"; */ return cs == ce ? cs : cs + \":\" + ce;\n}\nfunction safe_decode_range(range /*:string*/ ) /*:Range*/ {\n    var o = {\n        s: {\n            c: 0,\n            r: 0\n        },\n        e: {\n            c: 0,\n            r: 0\n        }\n    };\n    var idx = 0, i = 0, cc = 0;\n    var len = range.length;\n    for(idx = 0; i < len; ++i){\n        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n        idx = 26 * idx + cc;\n    }\n    o.s.c = --idx;\n    for(idx = 0; i < len; ++i){\n        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n        idx = 10 * idx + cc;\n    }\n    o.s.r = --idx;\n    if (i === len || cc != 10) {\n        o.e.c = o.s.c;\n        o.e.r = o.s.r;\n        return o;\n    }\n    ++i;\n    for(idx = 0; i != len; ++i){\n        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n        idx = 26 * idx + cc;\n    }\n    o.e.c = --idx;\n    for(idx = 0; i != len; ++i){\n        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n        idx = 10 * idx + cc;\n    }\n    o.e.r = --idx;\n    return o;\n}\nfunction safe_format_cell(cell /*:Cell*/ , v /*:any*/ ) {\n    var q = cell.t == \"d\" && v instanceof Date;\n    if (cell.z != null) try {\n        return cell.w = SSF_format(cell.z, q ? datenum(v) : v);\n    } catch (e) {}\n    try {\n        return cell.w = SSF_format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);\n    } catch (e) {\n        return \"\" + v;\n    }\n}\nfunction format_cell(cell /*:Cell*/ , v /*:any*/ , o /*:any*/ ) {\n    if (cell == null || cell.t == null || cell.t == \"z\") return \"\";\n    if (cell.w !== undefined) return cell.w;\n    if (cell.t == \"d\" && !cell.z && o && o.dateNF) cell.z = o.dateNF;\n    if (cell.t == \"e\") return BErr[cell.v] || cell.v;\n    if (v == undefined) return safe_format_cell(cell, cell.v);\n    return safe_format_cell(cell, v);\n}\nfunction sheet_to_workbook(sheet /*:Worksheet*/ , opts) /*:Workbook*/ {\n    var n = opts && opts.sheet ? opts.sheet : \"Sheet1\";\n    var sheets = {};\n    sheets[n] = sheet;\n    return {\n        SheetNames: [\n            n\n        ],\n        Sheets: sheets\n    };\n}\nfunction sheet_add_aoa(_ws /*:?Worksheet*/ , data /*:AOA*/ , opts /*:?any*/ ) /*:Worksheet*/ {\n    var o = opts || {};\n    var dense = _ws ? Array.isArray(_ws) : o.dense;\n    if (DENSE != null && dense == null) dense = DENSE;\n    var ws /*:Worksheet*/  = _ws || (dense ? [] : {} /*:any*/ );\n    var _R = 0, _C = 0;\n    if (ws && o.origin != null) {\n        if (typeof o.origin == \"number\") _R = o.origin;\n        else {\n            var _origin /*:CellAddress*/  = typeof o.origin == \"string\" ? decode_cell(o.origin) : o.origin;\n            _R = _origin.r;\n            _C = _origin.c;\n        }\n        if (!ws[\"!ref\"]) ws[\"!ref\"] = \"A1:A1\";\n    }\n    var range /*:Range*/  = {\n        s: {\n            c: 10000000,\n            r: 10000000\n        },\n        e: {\n            c: 0,\n            r: 0\n        }\n    } /*:any*/ ;\n    if (ws[\"!ref\"]) {\n        var _range = safe_decode_range(ws[\"!ref\"]);\n        range.s.c = _range.s.c;\n        range.s.r = _range.s.r;\n        range.e.c = Math.max(range.e.c, _range.e.c);\n        range.e.r = Math.max(range.e.r, _range.e.r);\n        if (_R == -1) range.e.r = _R = _range.e.r + 1;\n    }\n    for(var R = 0; R != data.length; ++R){\n        if (!data[R]) continue;\n        if (!Array.isArray(data[R])) throw new Error(\"aoa_to_sheet expects an array of arrays\");\n        for(var C = 0; C != data[R].length; ++C){\n            if (typeof data[R][C] === \"undefined\") continue;\n            var cell /*:Cell*/  = {\n                v: data[R][C]\n            } /*:any*/ ;\n            var __R = _R + R, __C = _C + C;\n            if (range.s.r > __R) range.s.r = __R;\n            if (range.s.c > __C) range.s.c = __C;\n            if (range.e.r < __R) range.e.r = __R;\n            if (range.e.c < __C) range.e.c = __C;\n            if (data[R][C] && typeof data[R][C] === \"object\" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];\n            else {\n                if (Array.isArray(cell.v)) {\n                    cell.f = data[R][C][1];\n                    cell.v = cell.v[0];\n                }\n                if (cell.v === null) {\n                    if (cell.f) cell.t = \"n\";\n                    else if (o.nullError) {\n                        cell.t = \"e\";\n                        cell.v = 0;\n                    } else if (!o.sheetStubs) continue;\n                    else cell.t = \"z\";\n                } else if (typeof cell.v === \"number\") cell.t = \"n\";\n                else if (typeof cell.v === \"boolean\") cell.t = \"b\";\n                else if (cell.v instanceof Date) {\n                    cell.z = o.dateNF || table_fmt[14];\n                    if (o.cellDates) {\n                        cell.t = \"d\";\n                        cell.w = SSF_format(cell.z, datenum(cell.v));\n                    } else {\n                        cell.t = \"n\";\n                        cell.v = datenum(cell.v);\n                        cell.w = SSF_format(cell.z, cell.v);\n                    }\n                } else cell.t = \"s\";\n            }\n            if (dense) {\n                if (!ws[__R]) ws[__R] = [];\n                if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;\n                ws[__R][__C] = cell;\n            } else {\n                var cell_ref = encode_cell({\n                    c: __C,\n                    r: __R\n                } /*:any*/ );\n                if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;\n                ws[cell_ref] = cell;\n            }\n        }\n    }\n    if (range.s.c < 10000000) ws[\"!ref\"] = encode_range(range);\n    return ws;\n}\nfunction aoa_to_sheet(data /*:AOA*/ , opts /*:?any*/ ) /*:Worksheet*/ {\n    return sheet_add_aoa(null, data, opts);\n}\nfunction parse_Int32LE(data) {\n    return data.read_shift(4, \"i\");\n}\nfunction write_UInt32LE(x /*:number*/ , o) {\n    if (!o) o = new_buf(4);\n    o.write_shift(4, x);\n    return o;\n}\n/* [MS-XLSB] 2.5.168 */ function parse_XLWideString(data /*::, length*/ ) /*:string*/ {\n    var cchCharacters = data.read_shift(4);\n    return cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, \"dbcs\");\n}\nfunction write_XLWideString(data /*:string*/ , o) {\n    var _null = false;\n    if (o == null) {\n        _null = true;\n        o = new_buf(4 + 2 * data.length);\n    }\n    o.write_shift(4, data.length);\n    if (data.length > 0) o.write_shift(0, data, \"dbcs\");\n    return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.5.91 */ //function parse_LPWideString(data/*::, length*/)/*:string*/ {\n//\tvar cchCharacters = data.read_shift(2);\n//\treturn cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, \"utf16le\");\n//}\n/* [MS-XLSB] 2.5.143 */ function parse_StrRun(data) {\n    return {\n        ich: data.read_shift(2),\n        ifnt: data.read_shift(2)\n    };\n}\nfunction write_StrRun(run, o) {\n    if (!o) o = new_buf(4);\n    o.write_shift(2, run.ich || 0);\n    o.write_shift(2, run.ifnt || 0);\n    return o;\n}\n/* [MS-XLSB] 2.5.121 */ function parse_RichStr(data, length /*:number*/ ) /*:XLString*/ {\n    var start = data.l;\n    var flags = data.read_shift(1);\n    var str = parse_XLWideString(data);\n    var rgsStrRun = [];\n    var z = {\n        t: str,\n        h: str\n    } /*:any*/ ;\n    if ((flags & 1) !== 0) {\n        /* TODO: formatted string */ var dwSizeStrRun = data.read_shift(4);\n        for(var i = 0; i != dwSizeStrRun; ++i)rgsStrRun.push(parse_StrRun(data));\n        z.r = rgsStrRun;\n    } else z.r = [\n        {\n            ich: 0,\n            ifnt: 0\n        }\n    ];\n    //if((flags & 2) !== 0) { /* fExtStr */\n    //\t/* TODO: phonetic string */\n    //}\n    data.l = start + length;\n    return z;\n}\nfunction write_RichStr(str /*:XLString*/ , o /*:?Block*/ ) /*:Block*/ {\n    /* TODO: formatted string */ var _null = false;\n    if (o == null) {\n        _null = true;\n        o = new_buf(15 + 4 * str.t.length);\n    }\n    o.write_shift(1, 0);\n    write_XLWideString(str.t, o);\n    return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */ var parse_BrtCommentText = parse_RichStr;\nfunction write_BrtCommentText(str /*:XLString*/ , o /*:?Block*/ ) /*:Block*/ {\n    /* TODO: formatted string */ var _null = false;\n    if (o == null) {\n        _null = true;\n        o = new_buf(23 + 4 * str.t.length);\n    }\n    o.write_shift(1, 1);\n    write_XLWideString(str.t, o);\n    o.write_shift(4, 1);\n    write_StrRun({\n        ich: 0,\n        ifnt: 0\n    }, o);\n    return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.5.9 */ function parse_XLSBCell(data) /*:any*/ {\n    var col = data.read_shift(4);\n    var iStyleRef = data.read_shift(2);\n    iStyleRef += data.read_shift(1) << 16;\n    data.l++; //var fPhShow = data.read_shift(1);\n    return {\n        c: col,\n        iStyleRef: iStyleRef\n    };\n}\nfunction write_XLSBCell(cell /*:any*/ , o /*:?Block*/ ) {\n    if (o == null) o = new_buf(8);\n    o.write_shift(-4, cell.c);\n    o.write_shift(3, cell.iStyleRef || cell.s);\n    o.write_shift(1, 0); /* fPhShow */ \n    return o;\n}\n/* Short XLSB Cell does not include column */ function parse_XLSBShortCell(data) /*:any*/ {\n    var iStyleRef = data.read_shift(2);\n    iStyleRef += data.read_shift(1) << 16;\n    data.l++; //var fPhShow = data.read_shift(1);\n    return {\n        c: -1,\n        iStyleRef: iStyleRef\n    };\n}\nfunction write_XLSBShortCell(cell /*:any*/ , o /*:?Block*/ ) {\n    if (o == null) o = new_buf(4);\n    o.write_shift(3, cell.iStyleRef || cell.s);\n    o.write_shift(1, 0); /* fPhShow */ \n    return o;\n}\n/* [MS-XLSB] 2.5.21 */ var parse_XLSBCodeName = parse_XLWideString;\nvar write_XLSBCodeName = write_XLWideString;\n/* [MS-XLSB] 2.5.166 */ function parse_XLNullableWideString(data /*::, length*/ ) /*:string*/ {\n    var cchCharacters = data.read_shift(4);\n    return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, \"dbcs\");\n}\nfunction write_XLNullableWideString(data /*:string*/ , o) {\n    var _null = false;\n    if (o == null) {\n        _null = true;\n        o = new_buf(127);\n    }\n    o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);\n    if (data.length > 0) o.write_shift(0, data, \"dbcs\");\n    return _null ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.5.165 */ var parse_XLNameWideString = parse_XLWideString;\n//var write_XLNameWideString = write_XLWideString;\n/* [MS-XLSB] 2.5.114 */ var parse_RelID = parse_XLNullableWideString;\nvar write_RelID = write_XLNullableWideString;\n/* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */ function parse_RkNumber(data) /*:number*/ {\n    var b = data.slice(data.l, data.l + 4);\n    var fX100 = b[0] & 1, fInt = b[0] & 2;\n    data.l += 4;\n    var RK = fInt === 0 ? __double([\n        0,\n        0,\n        0,\n        0,\n        b[0] & 0xFC,\n        b[1],\n        b[2],\n        b[3]\n    ], 0) : __readInt32LE(b, 0) >> 2;\n    return fX100 ? RK / 100 : RK;\n}\nfunction write_RkNumber(data /*:number*/ , o) {\n    if (o == null) o = new_buf(4);\n    var fX100 = 0, fInt = 0, d100 = data * 100;\n    if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {\n        fInt = 1;\n    } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {\n        fInt = 1;\n        fX100 = 1;\n    }\n    if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));\n    else throw new Error(\"unsupported RkNumber \" + data); // TODO\n}\n/* [MS-XLSB] 2.5.117 RfX */ function parse_RfX(data /*::, length*/ ) /*:Range*/ {\n    var cell /*:Range*/  = {\n        s: {},\n        e: {}\n    } /*:any*/ ;\n    cell.s.r = data.read_shift(4);\n    cell.e.r = data.read_shift(4);\n    cell.s.c = data.read_shift(4);\n    cell.e.c = data.read_shift(4);\n    return cell;\n}\nfunction write_RfX(r /*:Range*/ , o) {\n    if (!o) o = new_buf(16);\n    o.write_shift(4, r.s.r);\n    o.write_shift(4, r.e.r);\n    o.write_shift(4, r.s.c);\n    o.write_shift(4, r.e.c);\n    return o;\n}\n/* [MS-XLSB] 2.5.153 UncheckedRfX */ var parse_UncheckedRfX = parse_RfX;\nvar write_UncheckedRfX = write_RfX;\n/* [MS-XLSB] 2.5.155 UncheckedSqRfX */ //function parse_UncheckedSqRfX(data) {\n//\tvar cnt = data.read_shift(4);\n//\tvar out = [];\n//\tfor(var i = 0; i < cnt; ++i) {\n//\t\tvar rng = parse_UncheckedRfX(data);\n//\t\tout.push(encode_range(rng));\n//\t}\n//\treturn out.join(\",\");\n//}\n//function write_UncheckedSqRfX(sqrfx/*:string*/) {\n//\tvar parts = sqrfx.split(/\\s*,\\s*/);\n//\tvar o = new_buf(4); o.write_shift(4, parts.length);\n//\tvar out = [o];\n//\tparts.forEach(function(rng) {\n//\t\tout.push(write_UncheckedRfX(safe_decode_range(rng)));\n//\t});\n//\treturn bconcat(out);\n//}\n/* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */ /* TODO: error checking, NaN and Infinity values are not valid Xnum */ function parse_Xnum(data /*::, length*/ ) {\n    if (data.length - data.l < 8) throw \"XLS Xnum Buffer underflow\";\n    return data.read_shift(8, \"f\");\n}\nfunction write_Xnum(data, o) {\n    return (o || new_buf(8)).write_shift(8, data, \"f\");\n}\n/* [MS-XLSB] 2.4.324 BrtColor */ function parse_BrtColor(data /*::, length*/ ) {\n    var out = {};\n    var d = data.read_shift(1);\n    //var fValidRGB = d & 1;\n    var xColorType = d >>> 1;\n    var index = data.read_shift(1);\n    var nTS = data.read_shift(2, \"i\");\n    var bR = data.read_shift(1);\n    var bG = data.read_shift(1);\n    var bB = data.read_shift(1);\n    data.l++; //var bAlpha = data.read_shift(1);\n    switch(xColorType){\n        case 0:\n            out.auto = 1;\n            break;\n        case 1:\n            out.index = index;\n            var icv = XLSIcv[index];\n            /* automatic pseudo index 81 */ if (icv) out.rgb = rgb2Hex(icv);\n            break;\n        case 2:\n            /* if(!fValidRGB) throw new Error(\"invalid\"); */ out.rgb = rgb2Hex([\n                bR,\n                bG,\n                bB\n            ]);\n            break;\n        case 3:\n            out.theme = index;\n            break;\n    }\n    if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;\n    return out;\n}\nfunction write_BrtColor(color, o) {\n    if (!o) o = new_buf(8);\n    if (!color || color.auto) {\n        o.write_shift(4, 0);\n        o.write_shift(4, 0);\n        return o;\n    }\n    if (color.index != null) {\n        o.write_shift(1, 0x02);\n        o.write_shift(1, color.index);\n    } else if (color.theme != null) {\n        o.write_shift(1, 0x06);\n        o.write_shift(1, color.theme);\n    } else {\n        o.write_shift(1, 0x05);\n        o.write_shift(1, 0);\n    }\n    var nTS = color.tint || 0;\n    if (nTS > 0) nTS *= 32767;\n    else if (nTS < 0) nTS *= 32768;\n    o.write_shift(2, nTS);\n    if (!color.rgb || color.theme != null) {\n        o.write_shift(2, 0);\n        o.write_shift(1, 0);\n        o.write_shift(1, 0);\n    } else {\n        var rgb = color.rgb || \"FFFFFF\";\n        if (typeof rgb == \"number\") rgb = (\"000000\" + rgb.toString(16)).slice(-6);\n        o.write_shift(1, parseInt(rgb.slice(0, 2), 16));\n        o.write_shift(1, parseInt(rgb.slice(2, 4), 16));\n        o.write_shift(1, parseInt(rgb.slice(4, 6), 16));\n        o.write_shift(1, 0xFF);\n    }\n    return o;\n}\n/* [MS-XLSB] 2.5.52 */ function parse_FontFlags(data /*::, length, opts*/ ) {\n    var d = data.read_shift(1);\n    data.l++;\n    var out = {\n        fBold: d & 0x01,\n        fItalic: d & 0x02,\n        fUnderline: d & 0x04,\n        fStrikeout: d & 0x08,\n        fOutline: d & 0x10,\n        fShadow: d & 0x20,\n        fCondense: d & 0x40,\n        fExtend: d & 0x80\n    };\n    return out;\n}\nfunction write_FontFlags(font, o) {\n    if (!o) o = new_buf(2);\n    var grbit = (font.italic ? 0x02 : 0) | (font.strike ? 0x08 : 0) | (font.outline ? 0x10 : 0) | (font.shadow ? 0x20 : 0) | (font.condense ? 0x40 : 0) | (font.extend ? 0x80 : 0);\n    o.write_shift(1, grbit);\n    o.write_shift(1, 0);\n    return o;\n}\n/* [MS-OLEDS] 2.3.1 and 2.3.2 */ function parse_ClipboardFormatOrString(o, w /*:number*/ ) /*:string*/ {\n    // $FlowIgnore\n    var ClipFmt = {\n        2: \"BITMAP\",\n        3: \"METAFILEPICT\",\n        8: \"DIB\",\n        14: \"ENHMETAFILE\"\n    };\n    var m /*:number*/  = o.read_shift(4);\n    switch(m){\n        case 0x00000000:\n            return \"\";\n        case 0xffffffff:\n        case 0xfffffffe:\n            return ClipFmt[o.read_shift(4)] || \"\";\n    }\n    if (m > 0x190) throw new Error(\"Unsupported Clipboard: \" + m.toString(16));\n    o.l -= 4;\n    return o.read_shift(0, w == 1 ? \"lpstr\" : \"lpwstr\");\n}\nfunction parse_ClipboardFormatOrAnsiString(o) {\n    return parse_ClipboardFormatOrString(o, 1);\n}\nfunction parse_ClipboardFormatOrUnicodeString(o) {\n    return parse_ClipboardFormatOrString(o, 2);\n}\n/* [MS-OLEPS] 2.2 PropertyType */ // Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars\n//var VT_EMPTY    = 0x0000;\n//var VT_NULL     = 0x0001;\nvar VT_I2 = 0x0002;\nvar VT_I4 = 0x0003;\n//var VT_R4       = 0x0004;\n//var VT_R8       = 0x0005;\n//var VT_CY       = 0x0006;\n//var VT_DATE     = 0x0007;\n//var VT_BSTR     = 0x0008;\n//var VT_ERROR    = 0x000A;\nvar VT_BOOL = 0x000B;\nvar VT_VARIANT = 0x000C;\n//var VT_DECIMAL  = 0x000E;\n//var VT_I1       = 0x0010;\n//var VT_UI1      = 0x0011;\n//var VT_UI2      = 0x0012;\nvar VT_UI4 = 0x0013;\n//var VT_I8       = 0x0014;\n//var VT_UI8      = 0x0015;\n//var VT_INT      = 0x0016;\n//var VT_UINT     = 0x0017;\nvar VT_LPSTR = 0x001E;\n//var VT_LPWSTR   = 0x001F;\nvar VT_FILETIME = 0x0040;\nvar VT_BLOB = 0x0041;\n//var VT_STREAM   = 0x0042;\n//var VT_STORAGE  = 0x0043;\n//var VT_STREAMED_Object  = 0x0044;\n//var VT_STORED_Object    = 0x0045;\n//var VT_BLOB_Object      = 0x0046;\nvar VT_CF = 0x0047;\n//var VT_CLSID    = 0x0048;\n//var VT_VERSIONED_STREAM = 0x0049;\nvar VT_VECTOR = 0x1000;\nvar VT_VECTOR_VARIANT = 0x100C;\nvar VT_VECTOR_LPSTR = 0x101E;\n//var VT_ARRAY    = 0x2000;\nvar VT_STRING = 0x0050; // 2.3.3.1.11 VtString\nvar VT_USTR = 0x0051; // 2.3.3.1.12 VtUnalignedString\nvar VT_CUSTOM = [\n    VT_STRING,\n    VT_USTR\n];\n/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */ var DocSummaryPIDDSI = {\n    /*::[*/ 0x01: {\n        n: \"CodePage\",\n        t: VT_I2\n    },\n    /*::[*/ 0x02: {\n        n: \"Category\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x03: {\n        n: \"PresentationFormat\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x04: {\n        n: \"ByteCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x05: {\n        n: \"LineCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x06: {\n        n: \"ParagraphCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x07: {\n        n: \"SlideCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x08: {\n        n: \"NoteCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x09: {\n        n: \"HiddenCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x0a: {\n        n: \"MultimediaClipCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x0b: {\n        n: \"ScaleCrop\",\n        t: VT_BOOL\n    },\n    /*::[*/ 0x0c: {\n        n: \"HeadingPairs\",\n        t: VT_VECTOR_VARIANT /* VT_VECTOR | VT_VARIANT */ \n    },\n    /*::[*/ 0x0d: {\n        n: \"TitlesOfParts\",\n        t: VT_VECTOR_LPSTR /* VT_VECTOR | VT_LPSTR */ \n    },\n    /*::[*/ 0x0e: {\n        n: \"Manager\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x0f: {\n        n: \"Company\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x10: {\n        n: \"LinksUpToDate\",\n        t: VT_BOOL\n    },\n    /*::[*/ 0x11: {\n        n: \"CharacterCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x13: {\n        n: \"SharedDoc\",\n        t: VT_BOOL\n    },\n    /*::[*/ 0x16: {\n        n: \"HyperlinksChanged\",\n        t: VT_BOOL\n    },\n    /*::[*/ 0x17: {\n        n: \"AppVersion\",\n        t: VT_I4,\n        p: \"version\"\n    },\n    /*::[*/ 0x18: {\n        n: \"DigSig\",\n        t: VT_BLOB\n    },\n    /*::[*/ 0x1A: {\n        n: \"ContentType\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x1B: {\n        n: \"ContentStatus\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x1C: {\n        n: \"Language\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x1D: {\n        n: \"Version\",\n        t: VT_STRING\n    },\n    /*::[*/ 0xFF: {},\n    /* [MS-OLEPS] 2.18 */ /*::[*/ 0x80000000: {\n        n: \"Locale\",\n        t: VT_UI4\n    },\n    /*::[*/ 0x80000003: {\n        n: \"Behavior\",\n        t: VT_UI4\n    },\n    /*::[*/ 0x72627262: {}\n};\n/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */ var SummaryPIDSI = {\n    /*::[*/ 0x01: {\n        n: \"CodePage\",\n        t: VT_I2\n    },\n    /*::[*/ 0x02: {\n        n: \"Title\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x03: {\n        n: \"Subject\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x04: {\n        n: \"Author\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x05: {\n        n: \"Keywords\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x06: {\n        n: \"Comments\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x07: {\n        n: \"Template\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x08: {\n        n: \"LastAuthor\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x09: {\n        n: \"RevNumber\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x0A: {\n        n: \"EditTime\",\n        t: VT_FILETIME\n    },\n    /*::[*/ 0x0B: {\n        n: \"LastPrinted\",\n        t: VT_FILETIME\n    },\n    /*::[*/ 0x0C: {\n        n: \"CreatedDate\",\n        t: VT_FILETIME\n    },\n    /*::[*/ 0x0D: {\n        n: \"ModifiedDate\",\n        t: VT_FILETIME\n    },\n    /*::[*/ 0x0E: {\n        n: \"PageCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x0F: {\n        n: \"WordCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x10: {\n        n: \"CharCount\",\n        t: VT_I4\n    },\n    /*::[*/ 0x11: {\n        n: \"Thumbnail\",\n        t: VT_CF\n    },\n    /*::[*/ 0x12: {\n        n: \"Application\",\n        t: VT_STRING\n    },\n    /*::[*/ 0x13: {\n        n: \"DocSecurity\",\n        t: VT_I4\n    },\n    /*::[*/ 0xFF: {},\n    /* [MS-OLEPS] 2.18 */ /*::[*/ 0x80000000: {\n        n: \"Locale\",\n        t: VT_UI4\n    },\n    /*::[*/ 0x80000003: {\n        n: \"Behavior\",\n        t: VT_UI4\n    },\n    /*::[*/ 0x72627262: {}\n};\n/* [MS-XLS] 2.4.63 Country/Region codes */ var CountryEnum = {\n    /*::[*/ 0x0001: \"US\",\n    /*::[*/ 0x0002: \"CA\",\n    /*::[*/ 0x0003: \"\",\n    /*::[*/ 0x0007: \"RU\",\n    /*::[*/ 0x0014: \"EG\",\n    /*::[*/ 0x001E: \"GR\",\n    /*::[*/ 0x001F: \"NL\",\n    /*::[*/ 0x0020: \"BE\",\n    /*::[*/ 0x0021: \"FR\",\n    /*::[*/ 0x0022: \"ES\",\n    /*::[*/ 0x0024: \"HU\",\n    /*::[*/ 0x0027: \"IT\",\n    /*::[*/ 0x0029: \"CH\",\n    /*::[*/ 0x002B: \"AT\",\n    /*::[*/ 0x002C: \"GB\",\n    /*::[*/ 0x002D: \"DK\",\n    /*::[*/ 0x002E: \"SE\",\n    /*::[*/ 0x002F: \"NO\",\n    /*::[*/ 0x0030: \"PL\",\n    /*::[*/ 0x0031: \"DE\",\n    /*::[*/ 0x0034: \"MX\",\n    /*::[*/ 0x0037: \"BR\",\n    /*::[*/ 0x003d: \"AU\",\n    /*::[*/ 0x0040: \"NZ\",\n    /*::[*/ 0x0042: \"TH\",\n    /*::[*/ 0x0051: \"JP\",\n    /*::[*/ 0x0052: \"KR\",\n    /*::[*/ 0x0054: \"VN\",\n    /*::[*/ 0x0056: \"CN\",\n    /*::[*/ 0x005A: \"TR\",\n    /*::[*/ 0x0069: \"JS\",\n    /*::[*/ 0x00D5: \"DZ\",\n    /*::[*/ 0x00D8: \"MA\",\n    /*::[*/ 0x00DA: \"LY\",\n    /*::[*/ 0x015F: \"PT\",\n    /*::[*/ 0x0162: \"IS\",\n    /*::[*/ 0x0166: \"FI\",\n    /*::[*/ 0x01A4: \"CZ\",\n    /*::[*/ 0x0376: \"TW\",\n    /*::[*/ 0x03C1: \"LB\",\n    /*::[*/ 0x03C2: \"JO\",\n    /*::[*/ 0x03C3: \"SY\",\n    /*::[*/ 0x03C4: \"IQ\",\n    /*::[*/ 0x03C5: \"KW\",\n    /*::[*/ 0x03C6: \"SA\",\n    /*::[*/ 0x03CB: \"AE\",\n    /*::[*/ 0x03CC: \"IL\",\n    /*::[*/ 0x03CE: \"QA\",\n    /*::[*/ 0x03D5: \"IR\",\n    /*::[*/ 0xFFFF: \"US\" // United States\n};\n/* [MS-XLS] 2.5.127 */ var XLSFillPattern = [\n    null,\n    \"solid\",\n    \"mediumGray\",\n    \"darkGray\",\n    \"lightGray\",\n    \"darkHorizontal\",\n    \"darkVertical\",\n    \"darkDown\",\n    \"darkUp\",\n    \"darkGrid\",\n    \"darkTrellis\",\n    \"lightHorizontal\",\n    \"lightVertical\",\n    \"lightDown\",\n    \"lightUp\",\n    \"lightGrid\",\n    \"lightTrellis\",\n    \"gray125\",\n    \"gray0625\"\n];\nfunction rgbify(arr /*:Array<number>*/ ) /*:Array<[number, number, number]>*/ {\n    return arr.map(function(x) {\n        return [\n            x >> 16 & 255,\n            x >> 8 & 255,\n            x & 255\n        ];\n    });\n}\n/* [MS-XLS] 2.5.161 */ /* [MS-XLSB] 2.5.75 Icv */ var _XLSIcv = /*#__PURE__*/ rgbify([\n    /* Color Constants */ 0x000000,\n    0xFFFFFF,\n    0xFF0000,\n    0x00FF00,\n    0x0000FF,\n    0xFFFF00,\n    0xFF00FF,\n    0x00FFFF,\n    /* Overridable Defaults */ 0x000000,\n    0xFFFFFF,\n    0xFF0000,\n    0x00FF00,\n    0x0000FF,\n    0xFFFF00,\n    0xFF00FF,\n    0x00FFFF,\n    0x800000,\n    0x008000,\n    0x000080,\n    0x808000,\n    0x800080,\n    0x008080,\n    0xC0C0C0,\n    0x808080,\n    0x9999FF,\n    0x993366,\n    0xFFFFCC,\n    0xCCFFFF,\n    0x660066,\n    0xFF8080,\n    0x0066CC,\n    0xCCCCFF,\n    0x000080,\n    0xFF00FF,\n    0xFFFF00,\n    0x00FFFF,\n    0x800080,\n    0x800000,\n    0x008080,\n    0x0000FF,\n    0x00CCFF,\n    0xCCFFFF,\n    0xCCFFCC,\n    0xFFFF99,\n    0x99CCFF,\n    0xFF99CC,\n    0xCC99FF,\n    0xFFCC99,\n    0x3366FF,\n    0x33CCCC,\n    0x99CC00,\n    0xFFCC00,\n    0xFF9900,\n    0xFF6600,\n    0x666699,\n    0x969696,\n    0x003366,\n    0x339966,\n    0x003300,\n    0x333300,\n    0x993300,\n    0x993366,\n    0x333399,\n    0x333333,\n    /* Other entries to appease BIFF8/12 */ 0xFFFFFF,\n    /* 0x40 icvForeground ?? */ 0x000000,\n    /* 0x41 icvBackground ?? */ 0x000000,\n    /* 0x42 icvFrame ?? */ 0x000000,\n    /* 0x43 icv3D ?? */ 0x000000,\n    /* 0x44 icv3DText ?? */ 0x000000,\n    /* 0x45 icv3DHilite ?? */ 0x000000,\n    /* 0x46 icv3DShadow ?? */ 0x000000,\n    /* 0x47 icvHilite ?? */ 0x000000,\n    /* 0x48 icvCtlText ?? */ 0x000000,\n    /* 0x49 icvCtlScrl ?? */ 0x000000,\n    /* 0x4A icvCtlInv ?? */ 0x000000,\n    /* 0x4B icvCtlBody ?? */ 0x000000,\n    /* 0x4C icvCtlFrame ?? */ 0x000000,\n    /* 0x4D icvCtlFore ?? */ 0x000000,\n    /* 0x4E icvCtlBack ?? */ 0x000000,\n    /* 0x4F icvCtlNeutral */ 0x000000,\n    /* 0x50 icvInfoBk ?? */ 0x000000 /* 0x51 icvInfoText ?? */ \n]);\nvar XLSIcv = /*#__PURE__*/ dup(_XLSIcv);\n/* [MS-XLSB] 2.5.97.2 */ var BErr = {\n    /*::[*/ 0x00: \"#NULL!\",\n    /*::[*/ 0x07: \"#DIV/0!\",\n    /*::[*/ 0x0F: \"#VALUE!\",\n    /*::[*/ 0x17: \"#REF!\",\n    /*::[*/ 0x1D: \"#NAME?\",\n    /*::[*/ 0x24: \"#NUM!\",\n    /*::[*/ 0x2A: \"#N/A\",\n    /*::[*/ 0x2B: \"#GETTING_DATA\",\n    /*::[*/ 0xFF: \"#WTF?\"\n};\n//var RBErr = evert_num(BErr);\nvar RBErr = {\n    \"#NULL!\": 0x00,\n    \"#DIV/0!\": 0x07,\n    \"#VALUE!\": 0x0F,\n    \"#REF!\": 0x17,\n    \"#NAME?\": 0x1D,\n    \"#NUM!\": 0x24,\n    \"#N/A\": 0x2A,\n    \"#GETTING_DATA\": 0x2B,\n    \"#WTF?\": 0xFF\n};\n/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */ /* 12.3 Part Summary <SpreadsheetML> */ /* 14.2 Part Summary <DrawingML> */ /* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */ var ct2type /*{[string]:string}*/  = {\n    /* Workbook */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": \"workbooks\",\n    \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\": \"workbooks\",\n    \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\": \"workbooks\",\n    \"application/vnd.ms-excel.addin.macroEnabled.main+xml\": \"workbooks\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\": \"workbooks\",\n    /* Worksheet */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\": \"sheets\",\n    \"application/vnd.ms-excel.worksheet\": \"sheets\",\n    \"application/vnd.ms-excel.binIndexWs\": \"TODO\",\n    /* Binary Index */ /* Chartsheet */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": \"charts\",\n    \"application/vnd.ms-excel.chartsheet\": \"charts\",\n    /* Macrosheet */ \"application/vnd.ms-excel.macrosheet+xml\": \"macros\",\n    \"application/vnd.ms-excel.macrosheet\": \"macros\",\n    \"application/vnd.ms-excel.intlmacrosheet\": \"TODO\",\n    \"application/vnd.ms-excel.binIndexMs\": \"TODO\",\n    /* Binary Index */ /* Dialogsheet */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": \"dialogs\",\n    \"application/vnd.ms-excel.dialogsheet\": \"dialogs\",\n    /* Shared Strings */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\": \"strs\",\n    \"application/vnd.ms-excel.sharedStrings\": \"strs\",\n    /* Styles */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\": \"styles\",\n    \"application/vnd.ms-excel.styles\": \"styles\",\n    /* File Properties */ \"application/vnd.openxmlformats-package.core-properties+xml\": \"coreprops\",\n    \"application/vnd.openxmlformats-officedocument.custom-properties+xml\": \"custprops\",\n    \"application/vnd.openxmlformats-officedocument.extended-properties+xml\": \"extprops\",\n    /* Custom Data Properties */ \"application/vnd.openxmlformats-officedocument.customXmlProperties+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty\": \"TODO\",\n    /* Comments */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": \"comments\",\n    \"application/vnd.ms-excel.comments\": \"comments\",\n    \"application/vnd.ms-excel.threadedcomments+xml\": \"threadedcomments\",\n    \"application/vnd.ms-excel.person+xml\": \"people\",\n    /* Metadata (Stock/Geography and Dynamic Array) */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\": \"metadata\",\n    \"application/vnd.ms-excel.sheetMetadata\": \"metadata\",\n    /* PivotTable */ \"application/vnd.ms-excel.pivotTable\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml\": \"TODO\",\n    /* Chart Objects */ \"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": \"TODO\",\n    /* Chart Colors */ \"application/vnd.ms-office.chartcolorstyle+xml\": \"TODO\",\n    /* Chart Style */ \"application/vnd.ms-office.chartstyle+xml\": \"TODO\",\n    /* Chart Advanced */ \"application/vnd.ms-office.chartex+xml\": \"TODO\",\n    /* Calculation Chain */ \"application/vnd.ms-excel.calcChain\": \"calcchains\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\": \"calcchains\",\n    /* Printer Settings */ \"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\": \"TODO\",\n    /* ActiveX */ \"application/vnd.ms-office.activeX\": \"TODO\",\n    \"application/vnd.ms-office.activeX+xml\": \"TODO\",\n    /* Custom Toolbars */ \"application/vnd.ms-excel.attachedToolbars\": \"TODO\",\n    /* External Data Connections */ \"application/vnd.ms-excel.connections\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": \"TODO\",\n    /* External Links */ \"application/vnd.ms-excel.externalLink\": \"links\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml\": \"links\",\n    /* PivotCache */ \"application/vnd.ms-excel.pivotCacheDefinition\": \"TODO\",\n    \"application/vnd.ms-excel.pivotCacheRecords\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml\": \"TODO\",\n    /* Query Table */ \"application/vnd.ms-excel.queryTable\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml\": \"TODO\",\n    /* Shared Workbook */ \"application/vnd.ms-excel.userNames\": \"TODO\",\n    \"application/vnd.ms-excel.revisionHeaders\": \"TODO\",\n    \"application/vnd.ms-excel.revisionLog\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml\": \"TODO\",\n    /* Single Cell Table */ \"application/vnd.ms-excel.tableSingleCells\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml\": \"TODO\",\n    /* Slicer */ \"application/vnd.ms-excel.slicer\": \"TODO\",\n    \"application/vnd.ms-excel.slicerCache\": \"TODO\",\n    \"application/vnd.ms-excel.slicer+xml\": \"TODO\",\n    \"application/vnd.ms-excel.slicerCache+xml\": \"TODO\",\n    /* Sort Map */ \"application/vnd.ms-excel.wsSortMap\": \"TODO\",\n    /* Table */ \"application/vnd.ms-excel.table\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": \"TODO\",\n    /* Themes */ \"application/vnd.openxmlformats-officedocument.theme+xml\": \"themes\",\n    /* Theme Override */ \"application/vnd.openxmlformats-officedocument.themeOverride+xml\": \"TODO\",\n    /* Timeline */ \"application/vnd.ms-excel.Timeline+xml\": \"TODO\",\n    /* verify */ \"application/vnd.ms-excel.TimelineCache+xml\": \"TODO\",\n    /* verify */ /* VBA */ \"application/vnd.ms-office.vbaProject\": \"vba\",\n    \"application/vnd.ms-office.vbaProjectSignature\": \"TODO\",\n    /* Volatile Dependencies */ \"application/vnd.ms-office.volatileDependencies\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml\": \"TODO\",\n    /* Control Properties */ \"application/vnd.ms-excel.controlproperties+xml\": \"TODO\",\n    /* Data Model */ \"application/vnd.openxmlformats-officedocument.model+data\": \"TODO\",\n    /* Survey */ \"application/vnd.ms-excel.Survey+xml\": \"TODO\",\n    /* Drawing */ \"application/vnd.openxmlformats-officedocument.drawing+xml\": \"drawings\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml\": \"TODO\",\n    \"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml\": \"TODO\",\n    /* VML */ \"application/vnd.openxmlformats-officedocument.vmlDrawing\": \"TODO\",\n    \"application/vnd.openxmlformats-package.relationships+xml\": \"rels\",\n    \"application/vnd.openxmlformats-officedocument.oleObject\": \"TODO\",\n    /* Image */ \"image/png\": \"TODO\",\n    \"sheet\": \"js\"\n} /*:any*/ ;\nvar CT_LIST = {\n    workbooks: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\",\n        xlsm: \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\",\n        xlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\",\n        xlam: \"application/vnd.ms-excel.addin.macroEnabled.main+xml\",\n        xltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\"\n    },\n    strs: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\",\n        xlsb: \"application/vnd.ms-excel.sharedStrings\"\n    },\n    comments: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\",\n        xlsb: \"application/vnd.ms-excel.comments\"\n    },\n    sheets: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\",\n        xlsb: \"application/vnd.ms-excel.worksheet\"\n    },\n    charts: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\",\n        xlsb: \"application/vnd.ms-excel.chartsheet\"\n    },\n    dialogs: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\",\n        xlsb: \"application/vnd.ms-excel.dialogsheet\"\n    },\n    macros: {\n        xlsx: \"application/vnd.ms-excel.macrosheet+xml\",\n        xlsb: \"application/vnd.ms-excel.macrosheet\"\n    },\n    metadata: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\",\n        xlsb: \"application/vnd.ms-excel.sheetMetadata\"\n    },\n    styles: {\n        xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\",\n        xlsb: \"application/vnd.ms-excel.styles\"\n    }\n};\nfunction new_ct() /*:any*/ {\n    return {\n        workbooks: [],\n        sheets: [],\n        charts: [],\n        dialogs: [],\n        macros: [],\n        rels: [],\n        strs: [],\n        comments: [],\n        threadedcomments: [],\n        links: [],\n        coreprops: [],\n        extprops: [],\n        custprops: [],\n        themes: [],\n        styles: [],\n        calcchains: [],\n        vba: [],\n        drawings: [],\n        metadata: [],\n        people: [],\n        TODO: [],\n        xmlns: \"\"\n    } /*:any*/ ;\n}\nfunction parse_ct(data /*:?string*/ ) {\n    var ct = new_ct();\n    if (!data || !data.match) return ct;\n    var ctext = {};\n    (data.match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        switch(y[0].replace(nsregex, \"<\")){\n            case \"<?xml\":\n                break;\n            case \"<Types\":\n                ct.xmlns = y[\"xmlns\" + (y[0].match(/<(\\w+):/) || [\n                    \"\",\n                    \"\"\n                ])[1]];\n                break;\n            case \"<Default\":\n                ctext[y.Extension] = y.ContentType;\n                break;\n            case \"<Override\":\n                if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);\n                break;\n        }\n    });\n    if (ct.xmlns !== XMLNS.CT) throw new Error(\"Unknown Namespace: \" + ct.xmlns);\n    ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : \"\";\n    ct.sst = ct.strs.length > 0 ? ct.strs[0] : \"\";\n    ct.style = ct.styles.length > 0 ? ct.styles[0] : \"\";\n    ct.defaults = ctext;\n    delete ct.calcchains;\n    return ct;\n}\nfunction write_ct(ct, opts) /*:string*/ {\n    var type2ct /*{[string]:Array<string>}*/  = evert_arr(ct2type);\n    var o /*:Array<string>*/  = [], v;\n    o[o.length] = XML_HEADER;\n    o[o.length] = writextag(\"Types\", null, {\n        \"xmlns\": XMLNS.CT,\n        \"xmlns:xsd\": XMLNS.xsd,\n        \"xmlns:xsi\": XMLNS.xsi\n    });\n    o = o.concat([\n        [\n            \"xml\",\n            \"application/xml\"\n        ],\n        [\n            \"bin\",\n            \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\"\n        ],\n        [\n            \"vml\",\n            \"application/vnd.openxmlformats-officedocument.vmlDrawing\"\n        ],\n        [\n            \"data\",\n            \"application/vnd.openxmlformats-officedocument.model+data\"\n        ],\n        /* from test files */ [\n            \"bmp\",\n            \"image/bmp\"\n        ],\n        [\n            \"png\",\n            \"image/png\"\n        ],\n        [\n            \"gif\",\n            \"image/gif\"\n        ],\n        [\n            \"emf\",\n            \"image/x-emf\"\n        ],\n        [\n            \"wmf\",\n            \"image/x-wmf\"\n        ],\n        [\n            \"jpg\",\n            \"image/jpeg\"\n        ],\n        [\n            \"jpeg\",\n            \"image/jpeg\"\n        ],\n        [\n            \"tif\",\n            \"image/tiff\"\n        ],\n        [\n            \"tiff\",\n            \"image/tiff\"\n        ],\n        [\n            \"pdf\",\n            \"application/pdf\"\n        ],\n        [\n            \"rels\",\n            \"application/vnd.openxmlformats-package.relationships+xml\"\n        ]\n    ].map(function(x) {\n        return writextag(\"Default\", null, {\n            \"Extension\": x[0],\n            \"ContentType\": x[1]\n        });\n    }));\n    /* only write first instance */ var f1 = function(w) {\n        if (ct[w] && ct[w].length > 0) {\n            v = ct[w][0];\n            o[o.length] = writextag(\"Override\", null, {\n                \"PartName\": (v[0] == \"/\" ? \"\" : \"/\") + v,\n                \"ContentType\": CT_LIST[w][opts.bookType] || CT_LIST[w][\"xlsx\"]\n            });\n        }\n    };\n    /* book type-specific */ var f2 = function(w) {\n        (ct[w] || []).forEach(function(v) {\n            o[o.length] = writextag(\"Override\", null, {\n                \"PartName\": (v[0] == \"/\" ? \"\" : \"/\") + v,\n                \"ContentType\": CT_LIST[w][opts.bookType] || CT_LIST[w][\"xlsx\"]\n            });\n        });\n    };\n    /* standard type */ var f3 = function(t) {\n        (ct[t] || []).forEach(function(v) {\n            o[o.length] = writextag(\"Override\", null, {\n                \"PartName\": (v[0] == \"/\" ? \"\" : \"/\") + v,\n                \"ContentType\": type2ct[t][0]\n            });\n        });\n    };\n    f1(\"workbooks\");\n    f2(\"sheets\");\n    f2(\"charts\");\n    f3(\"themes\");\n    [\n        \"strs\",\n        \"styles\"\n    ].forEach(f1);\n    [\n        \"coreprops\",\n        \"extprops\",\n        \"custprops\"\n    ].forEach(f3);\n    f3(\"vba\");\n    f3(\"comments\");\n    f3(\"threadedcomments\");\n    f3(\"drawings\");\n    f2(\"metadata\");\n    f3(\"people\");\n    if (o.length > 2) {\n        o[o.length] = \"</Types>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* 9.3 Relationships */ var RELS = {\n    WB: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n    SHEET: \"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n    HLINK: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n    VML: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing\",\n    XPATH: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath\",\n    XMISS: \"http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing\",\n    XLINK: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink\",\n    CXML: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml\",\n    CXMLP: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps\",\n    CMNT: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\",\n    CORE_PROPS: \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\",\n    EXT_PROPS: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\n    CUST_PROPS: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties\",\n    SST: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\",\n    STY: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n    THEME: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\n    CHART: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart\",\n    CHARTEX: \"http://schemas.microsoft.com/office/2014/relationships/chartEx\",\n    CS: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet\",\n    WS: [\n        \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\",\n        \"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet\"\n    ],\n    DS: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet\",\n    MS: \"http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet\",\n    IMG: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n    DRAW: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\",\n    XLMETA: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata\",\n    TCMNT: \"http://schemas.microsoft.com/office/2017/10/relationships/threadedComment\",\n    PEOPLE: \"http://schemas.microsoft.com/office/2017/10/relationships/person\",\n    VBA: \"http://schemas.microsoft.com/office/2006/relationships/vbaProject\"\n} /*:any*/ ;\n/* 9.3.3 Representing Relationships */ function get_rels_path(file /*:string*/ ) /*:string*/ {\n    var n = file.lastIndexOf(\"/\");\n    return file.slice(0, n + 1) + \"_rels/\" + file.slice(n + 1) + \".rels\";\n}\nfunction parse_rels(data /*:?string*/ , currentFilePath /*:string*/ ) {\n    var rels = {\n        \"!id\": {}\n    };\n    if (!data) return rels;\n    if (currentFilePath.charAt(0) !== \"/\") {\n        currentFilePath = \"/\" + currentFilePath;\n    }\n    var hash = {};\n    (data.match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        /* 9.3.2.2 OPC_Relationships */ if (y[0] === \"<Relationship\") {\n            var rel = {};\n            rel.Type = y.Type;\n            rel.Target = y.Target;\n            rel.Id = y.Id;\n            if (y.TargetMode) rel.TargetMode = y.TargetMode;\n            var canonictarget = y.TargetMode === \"External\" ? y.Target : resolve_path(y.Target, currentFilePath);\n            rels[canonictarget] = rel;\n            hash[y.Id] = rel;\n        }\n    });\n    rels[\"!id\"] = hash;\n    return rels;\n}\n/* TODO */ function write_rels(rels) /*:string*/ {\n    var o = [\n        XML_HEADER,\n        writextag(\"Relationships\", null, {\n            //'xmlns:ns0': XMLNS.RELS,\n            \"xmlns\": XMLNS.RELS\n        })\n    ];\n    keys(rels[\"!id\"]).forEach(function(rid) {\n        o[o.length] = writextag(\"Relationship\", null, rels[\"!id\"][rid]);\n    });\n    if (o.length > 2) {\n        o[o.length] = \"</Relationships>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\nfunction add_rels(rels, rId /*:number*/ , f, type, relobj, targetmode /*:?string*/ ) /*:number*/ {\n    if (!relobj) relobj = {};\n    if (!rels[\"!id\"]) rels[\"!id\"] = {};\n    if (!rels[\"!idx\"]) rels[\"!idx\"] = 1;\n    if (rId < 0) for(rId = rels[\"!idx\"]; rels[\"!id\"][\"rId\" + rId]; ++rId){}\n    rels[\"!idx\"] = rId + 1;\n    relobj.Id = \"rId\" + rId;\n    relobj.Type = type;\n    relobj.Target = f;\n    if (targetmode) relobj.TargetMode = targetmode;\n    else if ([\n        RELS.HLINK,\n        RELS.XPATH,\n        RELS.XMISS\n    ].indexOf(relobj.Type) > -1) relobj.TargetMode = \"External\";\n    if (rels[\"!id\"][relobj.Id]) throw new Error(\"Cannot rewrite rId \" + rId);\n    rels[\"!id\"][relobj.Id] = relobj;\n    rels[(\"/\" + relobj.Target).replace(\"//\", \"/\")] = relobj;\n    return rId;\n}\n/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */ /* Part 3 Section 4 Manifest File */ var CT_ODS = \"application/vnd.oasis.opendocument.spreadsheet\";\nfunction parse_manifest(d, opts) {\n    var str = xlml_normalize(d);\n    var Rn;\n    var FEtag;\n    while(Rn = xlmlregex.exec(str))switch(Rn[3]){\n        case \"manifest\":\n            break; // 4.2 <manifest:manifest>\n        case \"file-entry\":\n            FEtag = parsexmltag(Rn[0], false);\n            if (FEtag.path == \"/\" && FEtag.type !== CT_ODS) throw new Error(\"This OpenDocument is not a spreadsheet\");\n            break;\n        case \"encryption-data\":\n        case \"algorithm\":\n        case \"start-key-generation\":\n        case \"key-derivation\":\n            throw new Error(\"Unsupported ODS Encryption\");\n        default:\n            if (opts && opts.WTF) throw Rn;\n    }\n}\nfunction write_manifest(manifest /*:Array<Array<string> >*/ ) /*:string*/ {\n    var o = [\n        XML_HEADER\n    ];\n    o.push('<manifest:manifest xmlns:manifest=\"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\" manifest:version=\"1.2\">\\n');\n    o.push('  <manifest:file-entry manifest:full-path=\"/\" manifest:version=\"1.2\" manifest:media-type=\"application/vnd.oasis.opendocument.spreadsheet\"/>\\n');\n    for(var i = 0; i < manifest.length; ++i)o.push('  <manifest:file-entry manifest:full-path=\"' + manifest[i][0] + '\" manifest:media-type=\"' + manifest[i][1] + '\"/>\\n');\n    o.push(\"</manifest:manifest>\");\n    return o.join(\"\");\n}\n/* Part 3 Section 6 Metadata Manifest File */ function write_rdf_type(file /*:string*/ , res /*:string*/ , tag /*:?string*/ ) {\n    return [\n        '  <rdf:Description rdf:about=\"' + file + '\">\\n',\n        '    <rdf:type rdf:resource=\"http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || \"odf\") + \"#\" + res + '\"/>\\n',\n        \"  </rdf:Description>\\n\"\n    ].join(\"\");\n}\nfunction write_rdf_has(base /*:string*/ , file /*:string*/ ) {\n    return [\n        '  <rdf:Description rdf:about=\"' + base + '\">\\n',\n        '    <ns0:hasPart xmlns:ns0=\"http://docs.oasis-open.org/ns/office/1.2/meta/pkg#\" rdf:resource=\"' + file + '\"/>\\n',\n        \"  </rdf:Description>\\n\"\n    ].join(\"\");\n}\nfunction write_rdf(rdf) {\n    var o = [\n        XML_HEADER\n    ];\n    o.push('<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\\n');\n    for(var i = 0; i != rdf.length; ++i){\n        o.push(write_rdf_type(rdf[i][0], rdf[i][1]));\n        o.push(write_rdf_has(\"\", rdf[i][0]));\n    }\n    o.push(write_rdf_type(\"\", \"Document\", \"pkg\"));\n    o.push(\"</rdf:RDF>\");\n    return o.join(\"\");\n}\n/* TODO: pull properties */ function write_meta_ods() /*:string*/ {\n    return '<office:document-meta xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" xmlns:meta=\"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" office:version=\"1.2\"><office:meta><meta:generator>Sheet' + \"JS \" + XLSX.version + \"</meta:generator></office:meta></office:document-meta>\";\n}\n/* ECMA-376 Part II 11.1 Core Properties Part */ /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */ var CORE_PROPS /*:Array<Array<string> >*/  = [\n    [\n        \"cp:category\",\n        \"Category\"\n    ],\n    [\n        \"cp:contentStatus\",\n        \"ContentStatus\"\n    ],\n    [\n        \"cp:keywords\",\n        \"Keywords\"\n    ],\n    [\n        \"cp:lastModifiedBy\",\n        \"LastAuthor\"\n    ],\n    [\n        \"cp:lastPrinted\",\n        \"LastPrinted\"\n    ],\n    [\n        \"cp:revision\",\n        \"RevNumber\"\n    ],\n    [\n        \"cp:version\",\n        \"Version\"\n    ],\n    [\n        \"dc:creator\",\n        \"Author\"\n    ],\n    [\n        \"dc:description\",\n        \"Comments\"\n    ],\n    [\n        \"dc:identifier\",\n        \"Identifier\"\n    ],\n    [\n        \"dc:language\",\n        \"Language\"\n    ],\n    [\n        \"dc:subject\",\n        \"Subject\"\n    ],\n    [\n        \"dc:title\",\n        \"Title\"\n    ],\n    [\n        \"dcterms:created\",\n        \"CreatedDate\",\n        \"date\"\n    ],\n    [\n        \"dcterms:modified\",\n        \"ModifiedDate\",\n        \"date\"\n    ]\n];\nvar CORE_PROPS_REGEX /*:Array<RegExp>*/  = /*#__PURE__*/ function() {\n    var r = new Array(CORE_PROPS.length);\n    for(var i = 0; i < CORE_PROPS.length; ++i){\n        var f = CORE_PROPS[i];\n        var g = \"(?:\" + f[0].slice(0, f[0].indexOf(\":\")) + \":)\" + f[0].slice(f[0].indexOf(\":\") + 1);\n        r[i] = new RegExp(\"<\" + g + \"[^>]*>([\\\\s\\\\S]*?)</\" + g + \">\");\n    }\n    return r;\n}();\nfunction parse_core_props(data) {\n    var p = {};\n    data = utf8read(data);\n    for(var i = 0; i < CORE_PROPS.length; ++i){\n        var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);\n        if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);\n        if (f[2] === \"date\" && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);\n    }\n    return p;\n}\nfunction cp_doit(f, g, h, o, p) {\n    if (p[f] != null || g == null || g === \"\") return;\n    p[f] = g;\n    g = escapexml(g);\n    o[o.length] = h ? writextag(f, g, h) : writetag(f, g);\n}\nfunction write_core_props(cp, _opts) {\n    var opts = _opts || {};\n    var o = [\n        XML_HEADER,\n        writextag(\"cp:coreProperties\", null, {\n            //'xmlns': XMLNS.CORE_PROPS,\n            \"xmlns:cp\": XMLNS.CORE_PROPS,\n            \"xmlns:dc\": XMLNS.dc,\n            \"xmlns:dcterms\": XMLNS.dcterms,\n            \"xmlns:dcmitype\": XMLNS.dcmitype,\n            \"xmlns:xsi\": XMLNS.xsi\n        })\n    ], p = {};\n    if (!cp && !opts.Props) return o.join(\"\");\n    if (cp) {\n        if (cp.CreatedDate != null) cp_doit(\"dcterms:created\", typeof cp.CreatedDate === \"string\" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {\n            \"xsi:type\": \"dcterms:W3CDTF\"\n        }, o, p);\n        if (cp.ModifiedDate != null) cp_doit(\"dcterms:modified\", typeof cp.ModifiedDate === \"string\" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {\n            \"xsi:type\": \"dcterms:W3CDTF\"\n        }, o, p);\n    }\n    for(var i = 0; i != CORE_PROPS.length; ++i){\n        var f = CORE_PROPS[i];\n        var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;\n        if (v === true) v = \"1\";\n        else if (v === false) v = \"0\";\n        else if (typeof v == \"number\") v = String(v);\n        if (v != null) cp_doit(f[0], v, null, o, p);\n    }\n    if (o.length > 2) {\n        o[o.length] = \"</cp:coreProperties>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* 15.2.12.3 Extended File Properties Part */ /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */ var EXT_PROPS /*:Array<Array<string> >*/  = [\n    [\n        \"Application\",\n        \"Application\",\n        \"string\"\n    ],\n    [\n        \"AppVersion\",\n        \"AppVersion\",\n        \"string\"\n    ],\n    [\n        \"Company\",\n        \"Company\",\n        \"string\"\n    ],\n    [\n        \"DocSecurity\",\n        \"DocSecurity\",\n        \"string\"\n    ],\n    [\n        \"Manager\",\n        \"Manager\",\n        \"string\"\n    ],\n    [\n        \"HyperlinksChanged\",\n        \"HyperlinksChanged\",\n        \"bool\"\n    ],\n    [\n        \"SharedDoc\",\n        \"SharedDoc\",\n        \"bool\"\n    ],\n    [\n        \"LinksUpToDate\",\n        \"LinksUpToDate\",\n        \"bool\"\n    ],\n    [\n        \"ScaleCrop\",\n        \"ScaleCrop\",\n        \"bool\"\n    ],\n    [\n        \"HeadingPairs\",\n        \"HeadingPairs\",\n        \"raw\"\n    ],\n    [\n        \"TitlesOfParts\",\n        \"TitlesOfParts\",\n        \"raw\"\n    ]\n];\nvar PseudoPropsPairs = [\n    \"Worksheets\",\n    \"SheetNames\",\n    \"NamedRanges\",\n    \"DefinedNames\",\n    \"Chartsheets\",\n    \"ChartNames\"\n];\nfunction load_props_pairs(HP /*:string|Array<Array<any>>*/ , TOP, props, opts) {\n    var v = [];\n    if (typeof HP == \"string\") v = parseVector(HP, opts);\n    else for(var j = 0; j < HP.length; ++j)v = v.concat(HP[j].map(function(hp) {\n        return {\n            v: hp\n        };\n    }));\n    var parts = typeof TOP == \"string\" ? parseVector(TOP, opts).map(function(x) {\n        return x.v;\n    }) : TOP;\n    var idx = 0, len = 0;\n    if (parts.length > 0) for(var i = 0; i !== v.length; i += 2){\n        len = +v[i + 1].v;\n        switch(v[i].v){\n            case \"Worksheets\":\n            case \"工作表\":\n            case \"Листы\":\n            case \"أوراق العمل\":\n            case \"ワークシート\":\n            case \"גליונות עבודה\":\n            case \"Arbeitsbl\\xe4tter\":\n            case \"\\xc7alışma Sayfaları\":\n            case \"Feuilles de calcul\":\n            case \"Fogli di lavoro\":\n            case \"Folhas de c\\xe1lculo\":\n            case \"Planilhas\":\n            case \"Regneark\":\n            case \"Hojas de c\\xe1lculo\":\n            case \"Werkbladen\":\n                props.Worksheets = len;\n                props.SheetNames = parts.slice(idx, idx + len);\n                break;\n            case \"Named Ranges\":\n            case \"Rangos con nombre\":\n            case \"名前付き一覧\":\n            case \"Benannte Bereiche\":\n            case \"Navngivne omr\\xe5der\":\n                props.NamedRanges = len;\n                props.DefinedNames = parts.slice(idx, idx + len);\n                break;\n            case \"Charts\":\n            case \"Diagramme\":\n                props.Chartsheets = len;\n                props.ChartNames = parts.slice(idx, idx + len);\n                break;\n        }\n        idx += len;\n    }\n}\nfunction parse_ext_props(data, p, opts) {\n    var q = {};\n    if (!p) p = {};\n    data = utf8read(data);\n    EXT_PROPS.forEach(function(f) {\n        var xml = (data.match(matchtag(f[0])) || [])[1];\n        switch(f[2]){\n            case \"string\":\n                if (xml) p[f[1]] = unescapexml(xml);\n                break;\n            case \"bool\":\n                p[f[1]] = xml === \"true\";\n                break;\n            case \"raw\":\n                var cur = data.match(new RegExp(\"<\" + f[0] + \"[^>]*>([\\\\s\\\\S]*?)</\" + f[0] + \">\"));\n                if (cur && cur.length > 0) q[f[1]] = cur[1];\n                break;\n        }\n    });\n    if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);\n    return p;\n}\nfunction write_ext_props(cp /*::, opts*/ ) /*:string*/ {\n    var o /*:Array<string>*/  = [], W = writextag;\n    if (!cp) cp = {};\n    cp.Application = \"SheetJS\";\n    o[o.length] = XML_HEADER;\n    o[o.length] = writextag(\"Properties\", null, {\n        \"xmlns\": XMLNS.EXT_PROPS,\n        \"xmlns:vt\": XMLNS.vt\n    });\n    EXT_PROPS.forEach(function(f) {\n        if (cp[f[1]] === undefined) return;\n        var v;\n        switch(f[2]){\n            case \"string\":\n                v = escapexml(String(cp[f[1]]));\n                break;\n            case \"bool\":\n                v = cp[f[1]] ? \"true\" : \"false\";\n                break;\n        }\n        if (v !== undefined) o[o.length] = W(f[0], v);\n    });\n    /* TODO: HeadingPairs, TitlesOfParts */ o[o.length] = W(\"HeadingPairs\", W(\"vt:vector\", W(\"vt:variant\", \"<vt:lpstr>Worksheets</vt:lpstr>\") + W(\"vt:variant\", W(\"vt:i4\", String(cp.Worksheets))), {\n        size: 2,\n        baseType: \"variant\"\n    }));\n    o[o.length] = W(\"TitlesOfParts\", W(\"vt:vector\", cp.SheetNames.map(function(s) {\n        return \"<vt:lpstr>\" + escapexml(s) + \"</vt:lpstr>\";\n    }).join(\"\"), {\n        size: cp.Worksheets,\n        baseType: \"lpstr\"\n    }));\n    if (o.length > 2) {\n        o[o.length] = \"</Properties>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* 15.2.12.2 Custom File Properties Part */ var custregex = /<[^>]+>[^<]*/g;\nfunction parse_cust_props(data /*:string*/ , opts) {\n    var p = {}, name = \"\";\n    var m = data.match(custregex);\n    if (m) for(var i = 0; i != m.length; ++i){\n        var x = m[i], y = parsexmltag(x);\n        switch(y[0]){\n            case \"<?xml\":\n                break;\n            case \"<Properties\":\n                break;\n            case \"<property\":\n                name = unescapexml(y.name);\n                break;\n            case \"</property>\":\n                name = null;\n                break;\n            default:\n                if (x.indexOf(\"<vt:\") === 0) {\n                    var toks = x.split(\">\");\n                    var type = toks[0].slice(4), text = toks[1];\n                    /* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */ switch(type){\n                        case \"lpstr\":\n                        case \"bstr\":\n                        case \"lpwstr\":\n                            p[name] = unescapexml(text);\n                            break;\n                        case \"bool\":\n                            p[name] = parsexmlbool(text);\n                            break;\n                        case \"i1\":\n                        case \"i2\":\n                        case \"i4\":\n                        case \"i8\":\n                        case \"int\":\n                        case \"uint\":\n                            p[name] = parseInt(text, 10);\n                            break;\n                        case \"r4\":\n                        case \"r8\":\n                        case \"decimal\":\n                            p[name] = parseFloat(text);\n                            break;\n                        case \"filetime\":\n                        case \"date\":\n                            p[name] = parseDate(text);\n                            break;\n                        case \"cy\":\n                        case \"error\":\n                            p[name] = unescapexml(text);\n                            break;\n                        default:\n                            if (type.slice(-1) == \"/\") break;\n                            if (opts.WTF && typeof console !== \"undefined\") console.warn(\"Unexpected\", x, type, toks);\n                    }\n                } else if (x.slice(0, 2) === \"</\") {} else if (opts.WTF) throw new Error(x);\n        }\n    }\n    return p;\n}\nfunction write_cust_props(cp /*::, opts*/ ) /*:string*/ {\n    var o = [\n        XML_HEADER,\n        writextag(\"Properties\", null, {\n            \"xmlns\": XMLNS.CUST_PROPS,\n            \"xmlns:vt\": XMLNS.vt\n        })\n    ];\n    if (!cp) return o.join(\"\");\n    var pid = 1;\n    keys(cp).forEach(function custprop(k) {\n        ++pid;\n        o[o.length] = writextag(\"property\", write_vt(cp[k], true), {\n            \"fmtid\": \"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\",\n            \"pid\": pid,\n            \"name\": escapexml(k)\n        });\n    });\n    if (o.length > 2) {\n        o[o.length] = \"</Properties>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* Common Name -> XLML Name */ var XLMLDocPropsMap = {\n    Title: \"Title\",\n    Subject: \"Subject\",\n    Author: \"Author\",\n    Keywords: \"Keywords\",\n    Comments: \"Description\",\n    LastAuthor: \"LastAuthor\",\n    RevNumber: \"Revision\",\n    Application: \"AppName\",\n    /* TotalTime: 'TotalTime', */ LastPrinted: \"LastPrinted\",\n    CreatedDate: \"Created\",\n    ModifiedDate: \"LastSaved\",\n    /* Pages */ /* Words */ /* Characters */ Category: \"Category\",\n    /* PresentationFormat */ Manager: \"Manager\",\n    Company: \"Company\",\n    /* Guid */ /* HyperlinkBase */ /* Bytes */ /* Lines */ /* Paragraphs */ /* CharactersWithSpaces */ AppVersion: \"Version\",\n    ContentStatus: \"ContentStatus\",\n    /* NOTE: missing from schema */ Identifier: \"Identifier\",\n    /* NOTE: missing from schema */ Language: \"Language\" /* NOTE: missing from schema */ \n};\nvar evert_XLMLDPM;\nfunction xlml_set_prop(Props, tag /*:string*/ , val) {\n    if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);\n    tag = evert_XLMLDPM[tag] || tag;\n    Props[tag] = val;\n}\nfunction xlml_write_docprops(Props, opts) {\n    var o /*:Array<string>*/  = [];\n    keys(XLMLDocPropsMap).map(function(m) {\n        for(var i = 0; i < CORE_PROPS.length; ++i)if (CORE_PROPS[i][1] == m) return CORE_PROPS[i];\n        for(i = 0; i < EXT_PROPS.length; ++i)if (EXT_PROPS[i][1] == m) return EXT_PROPS[i];\n        throw m;\n    }).forEach(function(p) {\n        if (Props[p[1]] == null) return;\n        var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];\n        switch(p[2]){\n            case \"date\":\n                m = new Date(m).toISOString().replace(/\\.\\d*Z/, \"Z\");\n                break;\n        }\n        if (typeof m == \"number\") m = String(m);\n        else if (m === true || m === false) {\n            m = m ? \"1\" : \"0\";\n        } else if (m instanceof Date) m = new Date(m).toISOString().replace(/\\.\\d*Z/, \"\");\n        o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));\n    });\n    return writextag(\"DocumentProperties\", o.join(\"\"), {\n        xmlns: XLMLNS.o\n    });\n}\nfunction xlml_write_custprops(Props, Custprops /*::, opts*/ ) {\n    var BLACKLIST = [\n        \"Worksheets\",\n        \"SheetNames\"\n    ];\n    var T = \"CustomDocumentProperties\";\n    var o /*:Array<string>*/  = [];\n    if (Props) keys(Props).forEach(function(k) {\n        /*:: if(!Props) return; */ if (!Object.prototype.hasOwnProperty.call(Props, k)) return;\n        for(var i = 0; i < CORE_PROPS.length; ++i)if (k == CORE_PROPS[i][1]) return;\n        for(i = 0; i < EXT_PROPS.length; ++i)if (k == EXT_PROPS[i][1]) return;\n        for(i = 0; i < BLACKLIST.length; ++i)if (k == BLACKLIST[i]) return;\n        var m = Props[k];\n        var t = \"string\";\n        if (typeof m == \"number\") {\n            t = \"float\";\n            m = String(m);\n        } else if (m === true || m === false) {\n            t = \"boolean\";\n            m = m ? \"1\" : \"0\";\n        } else m = String(m);\n        o.push(writextag(escapexmltag(k), m, {\n            \"dt:dt\": t\n        }));\n    });\n    if (Custprops) keys(Custprops).forEach(function(k) {\n        /*:: if(!Custprops) return; */ if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;\n        if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;\n        var m = Custprops[k];\n        var t = \"string\";\n        if (typeof m == \"number\") {\n            t = \"float\";\n            m = String(m);\n        } else if (m === true || m === false) {\n            t = \"boolean\";\n            m = m ? \"1\" : \"0\";\n        } else if (m instanceof Date) {\n            t = \"dateTime.tz\";\n            m = m.toISOString();\n        } else m = String(m);\n        o.push(writextag(escapexmltag(k), m, {\n            \"dt:dt\": t\n        }));\n    });\n    return \"<\" + T + ' xmlns=\"' + XLMLNS.o + '\">' + o.join(\"\") + \"</\" + T + \">\";\n}\n/* [MS-DTYP] 2.3.3 FILETIME */ /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */ /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */ function parse_FILETIME(blob) {\n    var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);\n    return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1000).toISOString().replace(/\\.000/, \"\");\n}\nfunction write_FILETIME(time /*:string|Date*/ ) {\n    var date = typeof time == \"string\" ? new Date(Date.parse(time)) : time;\n    var t = date.getTime() / 1000 + 11644473600;\n    var l = t % Math.pow(2, 32), h = (t - l) / Math.pow(2, 32);\n    l *= 1e7;\n    h *= 1e7;\n    var w = l / Math.pow(2, 32) | 0;\n    if (w > 0) {\n        l = l % Math.pow(2, 32);\n        h += w;\n    }\n    var o = new_buf(8);\n    o.write_shift(4, l);\n    o.write_shift(4, h);\n    return o;\n}\n/* [MS-OSHARED] 2.3.3.1.4 Lpstr */ function parse_lpstr(blob, type, pad /*:?number*/ ) {\n    var start = blob.l;\n    var str = blob.read_shift(0, \"lpstr-cp\");\n    if (pad) while(blob.l - start & 3)++blob.l;\n    return str;\n}\n/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */ function parse_lpwstr(blob, type, pad) {\n    var str = blob.read_shift(0, \"lpwstr\");\n    if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;\n    return str;\n}\n/* [MS-OSHARED] 2.3.3.1.11 VtString */ /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */ function parse_VtStringBase(blob, stringType, pad) {\n    if (stringType === 0x1F /*VT_LPWSTR*/ ) return parse_lpwstr(blob);\n    return parse_lpstr(blob, stringType, pad);\n}\nfunction parse_VtString(blob, t /*:number*/ , pad /*:?boolean*/ ) {\n    return parse_VtStringBase(blob, t, pad === false ? 0 : 4);\n}\nfunction parse_VtUnalignedString(blob, t /*:number*/ ) {\n    if (!t) throw new Error(\"VtUnalignedString must have positive length\");\n    return parse_VtStringBase(blob, t, 0);\n}\n/* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */ function parse_VtVecLpwstrValue(blob) /*:Array<string>*/ {\n    var length = blob.read_shift(4);\n    var ret /*:Array<string>*/  = [];\n    for(var i = 0; i != length; ++i){\n        var start = blob.l;\n        ret[i] = blob.read_shift(0, \"lpwstr\").replace(chr0, \"\");\n        if (blob.l - start & 0x02) blob.l += 2;\n    }\n    return ret;\n}\n/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */ function parse_VtVecUnalignedLpstrValue(blob) /*:Array<string>*/ {\n    var length = blob.read_shift(4);\n    var ret /*:Array<string>*/  = [];\n    for(var i = 0; i != length; ++i)ret[i] = blob.read_shift(0, \"lpstr-cp\").replace(chr0, \"\");\n    return ret;\n}\n/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */ function parse_VtHeadingPair(blob) {\n    var start = blob.l;\n    var headingString = parse_TypedPropertyValue(blob, VT_USTR);\n    if (blob[blob.l] == 0x00 && blob[blob.l + 1] == 0x00 && blob.l - start & 0x02) blob.l += 2;\n    var headerParts = parse_TypedPropertyValue(blob, VT_I4);\n    return [\n        headingString,\n        headerParts\n    ];\n}\n/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */ function parse_VtVecHeadingPairValue(blob) {\n    var cElements = blob.read_shift(4);\n    var out = [];\n    for(var i = 0; i < cElements / 2; ++i)out.push(parse_VtHeadingPair(blob));\n    return out;\n}\n/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */ function parse_dictionary(blob, CodePage) {\n    var cnt = blob.read_shift(4);\n    var dict /*:{[number]:string}*/  = {} /*:any*/ ;\n    for(var j = 0; j != cnt; ++j){\n        var pid = blob.read_shift(4);\n        var len = blob.read_shift(4);\n        dict[pid] = blob.read_shift(len, CodePage === 0x4B0 ? \"utf16le\" : \"utf8\").replace(chr0, \"\").replace(chr1, \"!\");\n        if (CodePage === 0x4B0 && len % 2) blob.l += 2;\n    }\n    if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2;\n    return dict;\n}\n/* [MS-OLEPS] 2.9 BLOB */ function parse_BLOB(blob) {\n    var size = blob.read_shift(4);\n    var bytes = blob.slice(blob.l, blob.l + size);\n    blob.l += size;\n    if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;\n    return bytes;\n}\n/* [MS-OLEPS] 2.11 ClipboardData */ function parse_ClipboardData(blob) {\n    // TODO\n    var o = {};\n    o.Size = blob.read_shift(4);\n    //o.Format = blob.read_shift(4);\n    blob.l += o.Size + 3 - (o.Size - 1) % 4;\n    return o;\n}\n/* [MS-OLEPS] 2.15 TypedPropertyValue */ function parse_TypedPropertyValue(blob, type /*:number*/ , _opts) /*:any*/ {\n    var t = blob.read_shift(2), ret, opts = _opts || {};\n    blob.l += 2;\n    if (type !== VT_VARIANT) {\n        if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error(\"Expected type \" + type + \" saw \" + t);\n    }\n    switch(type === VT_VARIANT ? t : type){\n        case 0x02 /*VT_I2*/ :\n            ret = blob.read_shift(2, \"i\");\n            if (!opts.raw) blob.l += 2;\n            return ret;\n        case 0x03 /*VT_I4*/ :\n            ret = blob.read_shift(4, \"i\");\n            return ret;\n        case 0x0B /*VT_BOOL*/ :\n            return blob.read_shift(4) !== 0x0;\n        case 0x13 /*VT_UI4*/ :\n            ret = blob.read_shift(4);\n            return ret;\n        case 0x1E /*VT_LPSTR*/ :\n            return parse_lpstr(blob, t, 4).replace(chr0, \"\");\n        case 0x1F /*VT_LPWSTR*/ :\n            return parse_lpwstr(blob);\n        case 0x40 /*VT_FILETIME*/ :\n            return parse_FILETIME(blob);\n        case 0x41 /*VT_BLOB*/ :\n            return parse_BLOB(blob);\n        case 0x47 /*VT_CF*/ :\n            return parse_ClipboardData(blob);\n        case 0x50 /*VT_STRING*/ :\n            return parse_VtString(blob, t, !opts.raw).replace(chr0, \"\");\n        case 0x51 /*VT_USTR*/ :\n            return parse_VtUnalignedString(blob, t /*, 4*/ ).replace(chr0, \"\");\n        case 0x100C /*VT_VECTOR|VT_VARIANT*/ :\n            return parse_VtVecHeadingPairValue(blob);\n        case 0x101E /*VT_VECTOR|VT_LPSTR*/ :\n        case 0x101F /*VT_VECTOR|VT_LPWSTR*/ :\n            return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);\n        default:\n            throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + t);\n    }\n}\nfunction write_TypedPropertyValue(type /*:number*/ , value) {\n    var o = new_buf(4), p = new_buf(4);\n    o.write_shift(4, type == 0x50 ? 0x1F : type);\n    switch(type){\n        case 0x03 /*VT_I4*/ :\n            p.write_shift(-4, value);\n            break;\n        case 0x05 /*VT_I4*/ :\n            p = new_buf(8);\n            p.write_shift(8, value, \"f\");\n            break;\n        case 0x0B /*VT_BOOL*/ :\n            p.write_shift(4, value ? 0x01 : 0x00);\n            break;\n        case 0x40 /*VT_FILETIME*/ :\n            /*:: if(typeof value !== \"string\" && !(value instanceof Date)) throw \"unreachable\"; */ p = write_FILETIME(value);\n            break;\n        case 0x1F /*VT_LPWSTR*/ :\n        case 0x50 /*VT_STRING*/ :\n            /*:: if(typeof value !== \"string\") throw \"unreachable\"; */ p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));\n            p.write_shift(4, value.length + 1);\n            p.write_shift(0, value, \"dbcs\");\n            while(p.l != p.length)p.write_shift(1, 0);\n            break;\n        default:\n            throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + value);\n    }\n    return bconcat([\n        o,\n        p\n    ]);\n}\n/* [MS-OLEPS] 2.20 PropertySet */ function parse_PropertySet(blob, PIDSI) {\n    var start_addr = blob.l;\n    var size = blob.read_shift(4);\n    var NumProps = blob.read_shift(4);\n    var Props = [], i = 0;\n    var CodePage = 0;\n    var Dictionary = -1, DictObj /*:{[number]:string}*/  = {} /*:any*/ ;\n    for(i = 0; i != NumProps; ++i){\n        var PropID = blob.read_shift(4);\n        var Offset = blob.read_shift(4);\n        Props[i] = [\n            PropID,\n            Offset + start_addr\n        ];\n    }\n    Props.sort(function(x, y) {\n        return x[1] - y[1];\n    });\n    var PropH = {};\n    for(i = 0; i != NumProps; ++i){\n        if (blob.l !== Props[i][1]) {\n            var fail = true;\n            if (i > 0 && PIDSI) switch(PIDSI[Props[i - 1][0]].t){\n                case 0x02 /*VT_I2*/ :\n                    if (blob.l + 2 === Props[i][1]) {\n                        blob.l += 2;\n                        fail = false;\n                    }\n                    break;\n                case 0x50 /*VT_STRING*/ :\n                    if (blob.l <= Props[i][1]) {\n                        blob.l = Props[i][1];\n                        fail = false;\n                    }\n                    break;\n                case 0x100C /*VT_VECTOR|VT_VARIANT*/ :\n                    if (blob.l <= Props[i][1]) {\n                        blob.l = Props[i][1];\n                        fail = false;\n                    }\n                    break;\n            }\n            if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {\n                fail = false;\n                blob.l = Props[i][1];\n            }\n            if (fail) throw new Error(\"Read Error: Expected address \" + Props[i][1] + \" at \" + blob.l + \" :\" + i);\n        }\n        if (PIDSI) {\n            var piddsi = PIDSI[Props[i][0]];\n            PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {\n                raw: true\n            });\n            if (piddsi.p === \"version\") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + \".\" + (\"0000\" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);\n            if (piddsi.n == \"CodePage\") switch(PropH[piddsi.n]){\n                case 0:\n                    PropH[piddsi.n] = 1252;\n                /* falls through */ case 874:\n                case 932:\n                case 936:\n                case 949:\n                case 950:\n                case 1250:\n                case 1251:\n                case 1253:\n                case 1254:\n                case 1255:\n                case 1256:\n                case 1257:\n                case 1258:\n                case 10000:\n                case 1200:\n                case 1201:\n                case 1252:\n                case 65000:\n                case -536:\n                case 65001:\n                case -535:\n                    set_cp(CodePage = PropH[piddsi.n] >>> 0 & 0xFFFF);\n                    break;\n                default:\n                    throw new Error(\"Unsupported CodePage: \" + PropH[piddsi.n]);\n            }\n        } else {\n            if (Props[i][0] === 0x1) {\n                CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);\n                set_cp(CodePage);\n                if (Dictionary !== -1) {\n                    var oldpos = blob.l;\n                    blob.l = Props[Dictionary][1];\n                    DictObj = parse_dictionary(blob, CodePage);\n                    blob.l = oldpos;\n                }\n            } else if (Props[i][0] === 0) {\n                if (CodePage === 0) {\n                    Dictionary = i;\n                    blob.l = Props[i + 1][1];\n                    continue;\n                }\n                DictObj = parse_dictionary(blob, CodePage);\n            } else {\n                var name = DictObj[Props[i][0]];\n                var val;\n                /* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */ switch(blob[blob.l]){\n                    case 0x41 /*VT_BLOB*/ :\n                        blob.l += 4;\n                        val = parse_BLOB(blob);\n                        break;\n                    case 0x1E /*VT_LPSTR*/ :\n                        blob.l += 4;\n                        val = parse_VtString(blob, blob[blob.l - 4]).replace(/\\u0000+$/, \"\");\n                        break;\n                    case 0x1F /*VT_LPWSTR*/ :\n                        blob.l += 4;\n                        val = parse_VtString(blob, blob[blob.l - 4]).replace(/\\u0000+$/, \"\");\n                        break;\n                    case 0x03 /*VT_I4*/ :\n                        blob.l += 4;\n                        val = blob.read_shift(4, \"i\");\n                        break;\n                    case 0x13 /*VT_UI4*/ :\n                        blob.l += 4;\n                        val = blob.read_shift(4);\n                        break;\n                    case 0x05 /*VT_R8*/ :\n                        blob.l += 4;\n                        val = blob.read_shift(8, \"f\");\n                        break;\n                    case 0x0B /*VT_BOOL*/ :\n                        blob.l += 4;\n                        val = parsebool(blob, 4);\n                        break;\n                    case 0x40 /*VT_FILETIME*/ :\n                        blob.l += 4;\n                        val = parseDate(parse_FILETIME(blob));\n                        break;\n                    default:\n                        throw new Error(\"unparsed value: \" + blob[blob.l]);\n                }\n                PropH[name] = val;\n            }\n        }\n    }\n    blob.l = start_addr + size; /* step ahead to skip padding */ \n    return PropH;\n}\nvar XLSPSSkip = [\n    \"CodePage\",\n    \"Thumbnail\",\n    \"_PID_LINKBASE\",\n    \"_PID_HLINKS\",\n    \"SystemIdentifier\",\n    \"FMTID\"\n]; //.concat(PseudoPropsPairs);\nfunction guess_property_type(val /*:any*/ ) /*:number*/ {\n    switch(typeof val){\n        case \"boolean\":\n            return 0x0B;\n        case \"number\":\n            return (val | 0) == val ? 0x03 : 0x05;\n        case \"string\":\n            return 0x1F;\n        case \"object\":\n            if (val instanceof Date) return 0x40;\n            break;\n    }\n    return -1;\n}\nfunction write_PropertySet(entries, RE, PIDSI) {\n    var hdr = new_buf(8), piao = [], prop = [];\n    var sz = 8, i = 0;\n    var pr = new_buf(8), pio = new_buf(8);\n    pr.write_shift(4, 0x0002);\n    pr.write_shift(4, 0x04B0);\n    pio.write_shift(4, 0x0001);\n    prop.push(pr);\n    piao.push(pio);\n    sz += 8 + pr.length;\n    if (!RE) {\n        pio = new_buf(8);\n        pio.write_shift(4, 0);\n        piao.unshift(pio);\n        var bufs = [\n            new_buf(4)\n        ];\n        bufs[0].write_shift(4, entries.length);\n        for(i = 0; i < entries.length; ++i){\n            var value = entries[i][0];\n            pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));\n            pr.write_shift(4, i + 2);\n            pr.write_shift(4, value.length + 1);\n            pr.write_shift(0, value, \"dbcs\");\n            while(pr.l != pr.length)pr.write_shift(1, 0);\n            bufs.push(pr);\n        }\n        pr = bconcat(bufs);\n        prop.unshift(pr);\n        sz += 8 + pr.length;\n    }\n    for(i = 0; i < entries.length; ++i){\n        if (RE && !RE[entries[i][0]]) continue;\n        if (XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1) continue;\n        if (entries[i][1] == null) continue;\n        var val = entries[i][1], idx = 0;\n        if (RE) {\n            idx = +RE[entries[i][0]];\n            var pinfo = PIDSI /*:: || {}*/ [idx] /*:: || {} */ ;\n            if (pinfo.p == \"version\" && typeof val == \"string\") {\n                /*:: if(typeof val !== \"string\") throw \"unreachable\"; */ var arr = val.split(\".\");\n                val = (+arr[0] << 16) + (+arr[1] || 0);\n            }\n            pr = write_TypedPropertyValue(pinfo.t, val);\n        } else {\n            var T = guess_property_type(val);\n            if (T == -1) {\n                T = 0x1F;\n                val = String(val);\n            }\n            pr = write_TypedPropertyValue(T, val);\n        }\n        prop.push(pr);\n        pio = new_buf(8);\n        pio.write_shift(4, !RE ? 2 + i : idx);\n        piao.push(pio);\n        sz += 8 + pr.length;\n    }\n    var w = 8 * (prop.length + 1);\n    for(i = 0; i < prop.length; ++i){\n        piao[i].write_shift(4, w);\n        w += prop[i].length;\n    }\n    hdr.write_shift(4, sz);\n    hdr.write_shift(4, prop.length);\n    return bconcat([\n        hdr\n    ].concat(piao).concat(prop));\n}\n/* [MS-OLEPS] 2.21 PropertySetStream */ function parse_PropertySetStream(file, PIDSI, clsid) {\n    var blob = file.content;\n    if (!blob) return {} /*:any*/ ;\n    prep_blob(blob, 0);\n    var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;\n    blob.chk(\"feff\", \"Byte Order: \");\n    /*var vers = */ blob.read_shift(2); // TODO: check version\n    var SystemIdentifier = blob.read_shift(4);\n    var CLSID = blob.read_shift(16);\n    if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error(\"Bad PropertySet CLSID \" + CLSID);\n    NumSets = blob.read_shift(4);\n    if (NumSets !== 1 && NumSets !== 2) throw new Error(\"Unrecognized #Sets: \" + NumSets);\n    FMTID0 = blob.read_shift(16);\n    Offset0 = blob.read_shift(4);\n    if (NumSets === 1 && Offset0 !== blob.l) throw new Error(\"Length mismatch: \" + Offset0 + \" !== \" + blob.l);\n    else if (NumSets === 2) {\n        FMTID1 = blob.read_shift(16);\n        Offset1 = blob.read_shift(4);\n    }\n    var PSet0 = parse_PropertySet(blob, PIDSI);\n    var rval = {\n        SystemIdentifier: SystemIdentifier\n    } /*:any*/ ;\n    for(var y in PSet0)rval[y] = PSet0[y];\n    //rval.blob = blob;\n    rval.FMTID = FMTID0;\n    //rval.PSet0 = PSet0;\n    if (NumSets === 1) return rval;\n    if (Offset1 - blob.l == 2) blob.l += 2;\n    if (blob.l !== Offset1) throw new Error(\"Length mismatch 2: \" + blob.l + \" !== \" + Offset1);\n    var PSet1;\n    try {\n        PSet1 = parse_PropertySet(blob, null);\n    } catch (e) {}\n    for(y in PSet1)rval[y] = PSet1[y];\n    rval.FMTID = [\n        FMTID0,\n        FMTID1\n    ]; // TODO: verify FMTID0/1\n    return rval;\n}\nfunction write_PropertySetStream(entries, clsid, RE, PIDSI /*:{[key:string|number]:any}*/ , entries2 /*:?any*/ , clsid2 /*:?any*/ ) {\n    var hdr = new_buf(entries2 ? 68 : 48);\n    var bufs = [\n        hdr\n    ];\n    hdr.write_shift(2, 0xFFFE);\n    hdr.write_shift(2, 0x0000); /* TODO: type 1 props */ \n    hdr.write_shift(4, 0x32363237);\n    hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, \"hex\");\n    hdr.write_shift(4, entries2 ? 2 : 1);\n    hdr.write_shift(16, clsid, \"hex\");\n    hdr.write_shift(4, entries2 ? 68 : 48);\n    var ps0 = write_PropertySet(entries, RE, PIDSI);\n    bufs.push(ps0);\n    if (entries2) {\n        var ps1 = write_PropertySet(entries2, null, null);\n        hdr.write_shift(16, clsid2, \"hex\");\n        hdr.write_shift(4, 68 + ps0.length);\n        bufs.push(ps1);\n    }\n    return bconcat(bufs);\n}\nfunction parsenoop2(blob, length) {\n    blob.read_shift(length);\n    return null;\n}\nfunction writezeroes(n, o) {\n    if (!o) o = new_buf(n);\n    for(var j = 0; j < n; ++j)o.write_shift(1, 0);\n    return o;\n}\nfunction parslurp(blob, length, cb) {\n    var arr = [], target = blob.l + length;\n    while(blob.l < target)arr.push(cb(blob, target - blob.l));\n    if (target !== blob.l) throw new Error(\"Slurp error\");\n    return arr;\n}\nfunction parsebool(blob, length /*:number*/ ) {\n    return blob.read_shift(length) === 0x1;\n}\nfunction writebool(v /*:any*/ , o) {\n    if (!o) o = new_buf(2);\n    o.write_shift(2, +!!v);\n    return o;\n}\nfunction parseuint16(blob /*::, length:?number, opts:?any*/ ) {\n    return blob.read_shift(2, \"u\");\n}\nfunction writeuint16(v /*:number*/ , o) {\n    if (!o) o = new_buf(2);\n    o.write_shift(2, v);\n    return o;\n}\nfunction parseuint16a(blob, length /*:: :?number, opts:?any*/ ) {\n    return parslurp(blob, length, parseuint16);\n}\n/* --- 2.5 Structures --- */ /* [MS-XLS] 2.5.10 Bes (boolean or error) */ function parse_Bes(blob /*::, length*/ ) {\n    var v = blob.read_shift(1), t = blob.read_shift(1);\n    return t === 0x01 ? v : v === 0x01;\n}\nfunction write_Bes(v, t /*:string*/ , o) {\n    if (!o) o = new_buf(2);\n    o.write_shift(1, t == \"e\" ? +v : +!!v);\n    o.write_shift(1, t == \"e\" ? 1 : 0);\n    return o;\n}\n/* [MS-XLS] 2.5.240 ShortXLUnicodeString */ function parse_ShortXLUnicodeString(blob, length, opts) {\n    var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);\n    var encoding = \"sbcs-cont\";\n    var cp = current_codepage;\n    if (opts && opts.biff >= 8) current_codepage = 1200;\n    if (!opts || opts.biff == 8) {\n        var fHighByte = blob.read_shift(1);\n        if (fHighByte) {\n            encoding = \"dbcs-cont\";\n        }\n    } else if (opts.biff == 12) {\n        encoding = \"wstr\";\n    }\n    if (opts.biff >= 2 && opts.biff <= 5) encoding = \"cpstr\";\n    var o = cch ? blob.read_shift(cch, encoding) : \"\";\n    current_codepage = cp;\n    return o;\n}\n/* 2.5.293 XLUnicodeRichExtendedString */ function parse_XLUnicodeRichExtendedString(blob) {\n    var cp = current_codepage;\n    current_codepage = 1200;\n    var cch = blob.read_shift(2), flags = blob.read_shift(1);\n    var /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;\n    var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs\n    var cRun = 0, cbExtRst;\n    var z = {};\n    if (fRichSt) cRun = blob.read_shift(2);\n    if (fExtSt) cbExtRst = blob.read_shift(4);\n    var encoding = width == 2 ? \"dbcs-cont\" : \"sbcs-cont\";\n    var msg = cch === 0 ? \"\" : blob.read_shift(cch, encoding);\n    if (fRichSt) blob.l += 4 * cRun; //TODO: parse this\n    if (fExtSt) blob.l += cbExtRst; //TODO: parse this\n    z.t = msg;\n    if (!fRichSt) {\n        z.raw = \"<t>\" + z.t + \"</t>\";\n        z.r = z.t;\n    }\n    current_codepage = cp;\n    return z;\n}\nfunction write_XLUnicodeRichExtendedString(xlstr /*:: :XLString, opts*/ ) {\n    var str = xlstr.t || \"\", nfmts = 1;\n    var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));\n    hdr.write_shift(2, str.length);\n    hdr.write_shift(1, (nfmts > 1 ? 0x08 : 0x00) | 0x01);\n    if (nfmts > 1) hdr.write_shift(2, nfmts);\n    var otext = new_buf(2 * str.length);\n    otext.write_shift(2 * str.length, str, \"utf16le\");\n    var out = [\n        hdr,\n        otext\n    ];\n    return bconcat(out);\n}\n/* 2.5.296 XLUnicodeStringNoCch */ function parse_XLUnicodeStringNoCch(blob, cch, opts) {\n    var retval;\n    if (opts) {\n        if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, \"cpstr\");\n        if (opts.biff >= 12) return blob.read_shift(cch, \"dbcs-cont\");\n    }\n    var fHighByte = blob.read_shift(1);\n    if (fHighByte === 0) {\n        retval = blob.read_shift(cch, \"sbcs-cont\");\n    } else {\n        retval = blob.read_shift(cch, \"dbcs-cont\");\n    }\n    return retval;\n}\n/* 2.5.294 XLUnicodeString */ function parse_XLUnicodeString(blob, length, opts) {\n    var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n    if (cch === 0) {\n        blob.l++;\n        return \"\";\n    }\n    return parse_XLUnicodeStringNoCch(blob, cch, opts);\n}\n/* BIFF5 override */ function parse_XLUnicodeString2(blob, length, opts) {\n    if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);\n    var cch = blob.read_shift(1);\n    if (cch === 0) {\n        blob.l++;\n        return \"\";\n    }\n    return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? \"cpstr\" : \"sbcs-cont\");\n}\n/* TODO: BIFF5 and lower, codepage awareness */ function write_XLUnicodeString(str, opts, o) {\n    if (!o) o = new_buf(3 + 2 * str.length);\n    o.write_shift(2, str.length);\n    o.write_shift(1, 1);\n    o.write_shift(31, str, \"utf16le\");\n    return o;\n}\n/* [MS-XLS] 2.5.61 ControlInfo */ function parse_ControlInfo(blob /*::, length, opts*/ ) {\n    var flags = blob.read_shift(1);\n    blob.l++;\n    var accel = blob.read_shift(2);\n    blob.l += 2;\n    return [\n        flags,\n        accel\n    ];\n}\n/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */ function parse_URLMoniker(blob /*::, length, opts*/ ) {\n    var len = blob.read_shift(4), start = blob.l;\n    var extra = false;\n    if (len > 24) {\n        /* look ahead */ blob.l += len - 24;\n        if (blob.read_shift(16) === \"795881f43b1d7f48af2c825dc4852763\") extra = true;\n        blob.l = start;\n    }\n    var url = blob.read_shift((extra ? len - 24 : len) >> 1, \"utf16le\").replace(chr0, \"\");\n    if (extra) blob.l += 24;\n    return url;\n}\n/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */ function parse_FileMoniker(blob /*::, length*/ ) {\n    var cAnti = blob.read_shift(2);\n    var preamble = \"\";\n    while(cAnti-- > 0)preamble += \"../\";\n    var ansiPath = blob.read_shift(0, \"lpstr-ansi\");\n    blob.l += 2; //var endServer = blob.read_shift(2);\n    if (blob.read_shift(2) != 0xDEAD) throw new Error(\"Bad FileMoniker\");\n    var sz = blob.read_shift(4);\n    if (sz === 0) return preamble + ansiPath.replace(/\\\\/g, \"/\");\n    var bytes = blob.read_shift(4);\n    if (blob.read_shift(2) != 3) throw new Error(\"Bad FileMoniker\");\n    var unicodePath = blob.read_shift(bytes >> 1, \"utf16le\").replace(chr0, \"\");\n    return preamble + unicodePath;\n}\n/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */ function parse_HyperlinkMoniker(blob, length) {\n    var clsid = blob.read_shift(16);\n    length -= 16;\n    switch(clsid){\n        case \"e0c9ea79f9bace118c8200aa004ba90b\":\n            return parse_URLMoniker(blob, length);\n        case \"0303000000000000c000000000000046\":\n            return parse_FileMoniker(blob, length);\n        default:\n            throw new Error(\"Unsupported Moniker \" + clsid);\n    }\n}\n/* [MS-OSHARED] 2.3.7.9 HyperlinkString */ function parse_HyperlinkString(blob /*::, length*/ ) {\n    var len = blob.read_shift(4);\n    var o = len > 0 ? blob.read_shift(len, \"utf16le\").replace(chr0, \"\") : \"\";\n    return o;\n}\nfunction write_HyperlinkString(str /*:string*/ , o) {\n    if (!o) o = new_buf(6 + str.length * 2);\n    o.write_shift(4, 1 + str.length);\n    for(var i = 0; i < str.length; ++i)o.write_shift(2, str.charCodeAt(i));\n    o.write_shift(2, 0);\n    return o;\n}\n/* [MS-OSHARED] 2.3.7.1 Hyperlink Object */ function parse_Hyperlink(blob, length) /*:Hyperlink*/ {\n    var end = blob.l + length;\n    var sVer = blob.read_shift(4);\n    if (sVer !== 2) throw new Error(\"Unrecognized streamVersion: \" + sVer);\n    var flags = blob.read_shift(2);\n    blob.l += 2;\n    var displayName, targetFrameName, moniker, oleMoniker, Loc = \"\", guid, fileTime;\n    if (flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);\n    if (flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);\n    if ((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);\n    if ((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);\n    if (flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);\n    if (flags & 0x0020) guid = blob.read_shift(16);\n    if (flags & 0x0040) fileTime = parse_FILETIME(blob /*, 8*/ );\n    blob.l = end;\n    var target = targetFrameName || moniker || oleMoniker || \"\";\n    if (target && Loc) target += \"#\" + Loc;\n    if (!target) target = \"#\" + Loc;\n    if (flags & 0x0002 && target.charAt(0) == \"/\" && target.charAt(1) != \"/\") target = \"file://\" + target;\n    var out = {\n        Target: target\n    } /*:any*/ ;\n    if (guid) out.guid = guid;\n    if (fileTime) out.time = fileTime;\n    if (displayName) out.Tooltip = displayName;\n    return out;\n}\nfunction write_Hyperlink(hl) {\n    var out = new_buf(512), i = 0;\n    var Target = hl.Target;\n    if (Target.slice(0, 7) == \"file://\") Target = Target.slice(7);\n    var hashidx = Target.indexOf(\"#\");\n    var F = hashidx > -1 ? 0x1f : 0x17;\n    switch(Target.charAt(0)){\n        case \"#\":\n            F = 0x1c;\n            break;\n        case \".\":\n            F &= ~2;\n            break;\n    }\n    out.write_shift(4, 2);\n    out.write_shift(4, F);\n    var data = [\n        8,\n        6815827,\n        6619237,\n        4849780,\n        83\n    ];\n    for(i = 0; i < data.length; ++i)out.write_shift(4, data[i]);\n    if (F == 0x1C) {\n        Target = Target.slice(1);\n        write_HyperlinkString(Target, out);\n    } else if (F & 0x02) {\n        data = \"e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b\".split(\" \");\n        for(i = 0; i < data.length; ++i)out.write_shift(1, parseInt(data[i], 16));\n        var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;\n        out.write_shift(4, 2 * (Pretarget.length + 1));\n        for(i = 0; i < Pretarget.length; ++i)out.write_shift(2, Pretarget.charCodeAt(i));\n        out.write_shift(2, 0);\n        if (F & 0x08) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : \"\", out);\n    } else {\n        data = \"03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46\".split(\" \");\n        for(i = 0; i < data.length; ++i)out.write_shift(1, parseInt(data[i], 16));\n        var P = 0;\n        while(Target.slice(P * 3, P * 3 + 3) == \"../\" || Target.slice(P * 3, P * 3 + 3) == \"..\\\\\")++P;\n        out.write_shift(2, P);\n        out.write_shift(4, Target.length - 3 * P + 1);\n        for(i = 0; i < Target.length - 3 * P; ++i)out.write_shift(1, Target.charCodeAt(i + 3 * P) & 0xFF);\n        out.write_shift(1, 0);\n        out.write_shift(2, 0xFFFF);\n        out.write_shift(2, 0xDEAD);\n        for(i = 0; i < 6; ++i)out.write_shift(4, 0);\n    }\n    return out.slice(0, out.l);\n}\n/* 2.5.178 LongRGBA */ function parse_LongRGBA(blob /*::, length*/ ) {\n    var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1);\n    return [\n        r,\n        g,\n        b,\n        a\n    ];\n}\n/* 2.5.177 LongRGB */ function parse_LongRGB(blob, length) {\n    var x = parse_LongRGBA(blob, length);\n    x[3] = 0;\n    return x;\n}\n/* [MS-XLS] 2.5.19 */ function parse_XLSCell(blob /*::, length*/ ) /*:Cell*/ {\n    var rw = blob.read_shift(2); // 0-indexed\n    var col = blob.read_shift(2);\n    var ixfe = blob.read_shift(2);\n    return {\n        r: rw,\n        c: col,\n        ixfe: ixfe\n    } /*:any*/ ;\n}\nfunction write_XLSCell(R /*:number*/ , C /*:number*/ , ixfe /*:?number*/ , o) {\n    if (!o) o = new_buf(6);\n    o.write_shift(2, R);\n    o.write_shift(2, C);\n    o.write_shift(2, ixfe || 0);\n    return o;\n}\n/* [MS-XLS] 2.5.134 */ function parse_frtHeader(blob) {\n    var rt = blob.read_shift(2);\n    var flags = blob.read_shift(2); // TODO: parse these flags\n    blob.l += 8;\n    return {\n        type: rt,\n        flags: flags\n    };\n}\nfunction parse_OptXLUnicodeString(blob, length, opts) {\n    return length === 0 ? \"\" : parse_XLUnicodeString2(blob, length, opts);\n}\n/* [MS-XLS] 2.5.344 */ function parse_XTI(blob, length, opts) {\n    var w = opts.biff > 8 ? 4 : 2;\n    var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w, \"i\"), itabLast = blob.read_shift(w, \"i\");\n    return [\n        iSupBook,\n        itabFirst,\n        itabLast\n    ];\n}\n/* [MS-XLS] 2.5.218 */ function parse_RkRec(blob) {\n    var ixfe = blob.read_shift(2);\n    var RK = parse_RkNumber(blob);\n    return [\n        ixfe,\n        RK\n    ];\n}\n/* [MS-XLS] 2.5.1 */ function parse_AddinUdf(blob, length, opts) {\n    blob.l += 4;\n    length -= 4;\n    var l = blob.l + length;\n    var udfName = parse_ShortXLUnicodeString(blob, length, opts);\n    var cb = blob.read_shift(2);\n    l -= blob.l;\n    if (cb !== l) throw new Error(\"Malformed AddinUdf: padding = \" + l + \" != \" + cb);\n    blob.l += cb;\n    return udfName;\n}\n/* [MS-XLS] 2.5.209 TODO: Check sizes */ function parse_Ref8U(blob /*::, length*/ ) {\n    var rwFirst = blob.read_shift(2);\n    var rwLast = blob.read_shift(2);\n    var colFirst = blob.read_shift(2);\n    var colLast = blob.read_shift(2);\n    return {\n        s: {\n            c: colFirst,\n            r: rwFirst\n        },\n        e: {\n            c: colLast,\n            r: rwLast\n        }\n    };\n}\nfunction write_Ref8U(r /*:Range*/ , o) {\n    if (!o) o = new_buf(8);\n    o.write_shift(2, r.s.r);\n    o.write_shift(2, r.e.r);\n    o.write_shift(2, r.s.c);\n    o.write_shift(2, r.e.c);\n    return o;\n}\n/* [MS-XLS] 2.5.211 */ function parse_RefU(blob /*::, length*/ ) {\n    var rwFirst = blob.read_shift(2);\n    var rwLast = blob.read_shift(2);\n    var colFirst = blob.read_shift(1);\n    var colLast = blob.read_shift(1);\n    return {\n        s: {\n            c: colFirst,\n            r: rwFirst\n        },\n        e: {\n            c: colLast,\n            r: rwLast\n        }\n    };\n}\n/* [MS-XLS] 2.5.207 */ var parse_Ref = parse_RefU;\n/* [MS-XLS] 2.5.143 */ function parse_FtCmo(blob /*::, length*/ ) {\n    blob.l += 4;\n    var ot = blob.read_shift(2);\n    var id = blob.read_shift(2);\n    var flags = blob.read_shift(2);\n    blob.l += 12;\n    return [\n        id,\n        ot,\n        flags\n    ];\n}\n/* [MS-XLS] 2.5.149 */ function parse_FtNts(blob) {\n    var out = {};\n    blob.l += 4;\n    blob.l += 16; // GUID TODO\n    out.fSharedNote = blob.read_shift(2);\n    blob.l += 4;\n    return out;\n}\n/* [MS-XLS] 2.5.142 */ function parse_FtCf(blob) {\n    var out = {};\n    blob.l += 4;\n    blob.cf = blob.read_shift(2);\n    return out;\n}\n/* [MS-XLS] 2.5.140 - 2.5.154 and friends */ function parse_FtSkip(blob) {\n    blob.l += 2;\n    blob.l += blob.read_shift(2);\n}\nvar FtTab = {\n    /*::[*/ 0x00: parse_FtSkip,\n    /* FtEnd */ /*::[*/ 0x04: parse_FtSkip,\n    /* FtMacro */ /*::[*/ 0x05: parse_FtSkip,\n    /* FtButton */ /*::[*/ 0x06: parse_FtSkip,\n    /* FtGmo */ /*::[*/ 0x07: parse_FtCf,\n    /* FtCf */ /*::[*/ 0x08: parse_FtSkip,\n    /* FtPioGrbit */ /*::[*/ 0x09: parse_FtSkip,\n    /* FtPictFmla */ /*::[*/ 0x0A: parse_FtSkip,\n    /* FtCbls */ /*::[*/ 0x0B: parse_FtSkip,\n    /* FtRbo */ /*::[*/ 0x0C: parse_FtSkip,\n    /* FtSbs */ /*::[*/ 0x0D: parse_FtNts,\n    /* FtNts */ /*::[*/ 0x0E: parse_FtSkip,\n    /* FtSbsFmla */ /*::[*/ 0x0F: parse_FtSkip,\n    /* FtGboData */ /*::[*/ 0x10: parse_FtSkip,\n    /* FtEdoData */ /*::[*/ 0x11: parse_FtSkip,\n    /* FtRboData */ /*::[*/ 0x12: parse_FtSkip,\n    /* FtCblsData */ /*::[*/ 0x13: parse_FtSkip,\n    /* FtLbsData */ /*::[*/ 0x14: parse_FtSkip,\n    /* FtCblsFmla */ /*::[*/ 0x15: parse_FtCmo\n};\nfunction parse_FtArray(blob, length /*::, ot*/ ) {\n    var tgt = blob.l + length;\n    var fts = [];\n    while(blob.l < tgt){\n        var ft = blob.read_shift(2);\n        blob.l -= 2;\n        try {\n            fts.push(FtTab[ft](blob, tgt - blob.l));\n        } catch (e) {\n            blob.l = tgt;\n            return fts;\n        }\n    }\n    if (blob.l != tgt) blob.l = tgt; //throw new Error(\"bad Object Ft-sequence\");\n    return fts;\n}\n/* --- 2.4 Records --- */ /* [MS-XLS] 2.4.21 */ function parse_BOF(blob, length) {\n    var o = {\n        BIFFVer: 0,\n        dt: 0\n    };\n    o.BIFFVer = blob.read_shift(2);\n    length -= 2;\n    if (length >= 2) {\n        o.dt = blob.read_shift(2);\n        blob.l -= 2;\n    }\n    switch(o.BIFFVer){\n        case 0x0600:\n        /* BIFF8 */ case 0x0500:\n        /* BIFF5 */ case 0x0400:\n        /* BIFF4 */ case 0x0300:\n        /* BIFF3 */ case 0x0200:\n        /* BIFF2 */ case 0x0002:\n        case 0x0007:\n            break;\n        default:\n            if (length > 6) throw new Error(\"Unexpected BIFF Ver \" + o.BIFFVer);\n    }\n    blob.read_shift(length);\n    return o;\n}\nfunction write_BOF(wb /*:Workbook*/ , t /*:number*/ , o) {\n    var h = 0x0600, w = 16;\n    switch(o.bookType){\n        case \"biff8\":\n            break;\n        case \"biff5\":\n            h = 0x0500;\n            w = 8;\n            break;\n        case \"biff4\":\n            h = 0x0004;\n            w = 6;\n            break;\n        case \"biff3\":\n            h = 0x0003;\n            w = 6;\n            break;\n        case \"biff2\":\n            h = 0x0002;\n            w = 4;\n            break;\n        case \"xla\":\n            break;\n        default:\n            throw new Error(\"unsupported BIFF version\");\n    }\n    var out = new_buf(w);\n    out.write_shift(2, h);\n    out.write_shift(2, t);\n    if (w > 4) out.write_shift(2, 0x7262);\n    if (w > 6) out.write_shift(2, 0x07CD);\n    if (w > 8) {\n        out.write_shift(2, 0xC009);\n        out.write_shift(2, 0x0001);\n        out.write_shift(2, 0x0706);\n        out.write_shift(2, 0x0000);\n    }\n    return out;\n}\n/* [MS-XLS] 2.4.146 */ function parse_InterfaceHdr(blob, length) {\n    if (length === 0) return 0x04b0;\n    if (blob.read_shift(2) !== 0x04b0) {}\n    return 0x04b0;\n}\n/* [MS-XLS] 2.4.349 */ function parse_WriteAccess(blob, length, opts) {\n    if (opts.enc) {\n        blob.l += length;\n        return \"\";\n    }\n    var l = blob.l;\n    // TODO: make sure XLUnicodeString doesnt overrun\n    var UserName = parse_XLUnicodeString2(blob, 0, opts);\n    blob.read_shift(length + l - blob.l);\n    return UserName;\n}\nfunction write_WriteAccess(s /*:string*/ , opts) {\n    var b8 = !opts || opts.biff == 8;\n    var o = new_buf(b8 ? 112 : 54);\n    o.write_shift(opts.biff == 8 ? 2 : 1, 7);\n    if (b8) o.write_shift(1, 0);\n    o.write_shift(4, 0x33336853);\n    o.write_shift(4, 0x00534A74 | (b8 ? 0 : 0x20000000));\n    while(o.l < o.length)o.write_shift(1, b8 ? 0 : 32);\n    return o;\n}\n/* [MS-XLS] 2.4.351 */ function parse_WsBool(blob, length, opts) {\n    var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);\n    return {\n        fDialog: flags & 0x10,\n        fBelow: flags & 0x40,\n        fRight: flags & 0x80\n    };\n}\n/* [MS-XLS] 2.4.28 */ function parse_BoundSheet8(blob, length, opts) {\n    var pos = blob.read_shift(4);\n    var hidden = blob.read_shift(1) & 0x03;\n    var dt = blob.read_shift(1);\n    switch(dt){\n        case 0:\n            dt = \"Worksheet\";\n            break;\n        case 1:\n            dt = \"Macrosheet\";\n            break;\n        case 2:\n            dt = \"Chartsheet\";\n            break;\n        case 6:\n            dt = \"VBAModule\";\n            break;\n    }\n    var name = parse_ShortXLUnicodeString(blob, 0, opts);\n    if (name.length === 0) name = \"Sheet1\";\n    return {\n        pos: pos,\n        hs: hidden,\n        dt: dt,\n        name: name\n    };\n}\nfunction write_BoundSheet8(data, opts) {\n    var w = !opts || opts.biff >= 8 ? 2 : 1;\n    var o = new_buf(8 + w * data.name.length);\n    o.write_shift(4, data.pos);\n    o.write_shift(1, data.hs || 0);\n    o.write_shift(1, data.dt);\n    o.write_shift(1, data.name.length);\n    if (opts.biff >= 8) o.write_shift(1, 1);\n    o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? \"sbcs\" : \"utf16le\");\n    var out = o.slice(0, o.l);\n    out.l = o.l;\n    return out;\n}\n/* [MS-XLS] 2.4.265 TODO */ function parse_SST(blob, length) /*:SST*/ {\n    var end = blob.l + length;\n    var cnt = blob.read_shift(4);\n    var ucnt = blob.read_shift(4);\n    var strs /*:SST*/  = [];\n    for(var i = 0; i != ucnt && blob.l < end; ++i){\n        strs.push(parse_XLUnicodeRichExtendedString(blob));\n    }\n    strs.Count = cnt;\n    strs.Unique = ucnt;\n    return strs;\n}\nfunction write_SST(sst, opts) {\n    var header = new_buf(8);\n    header.write_shift(4, sst.Count);\n    header.write_shift(4, sst.Unique);\n    var strs = [];\n    for(var j = 0; j < sst.length; ++j)strs[j] = write_XLUnicodeRichExtendedString(sst[j], opts);\n    var o = bconcat([\n        header\n    ].concat(strs));\n    /*::(*/ o /*:: :any)*/ .parts = [\n        header.length\n    ].concat(strs.map(function(str) {\n        return str.length;\n    }));\n    return o;\n}\n/* [MS-XLS] 2.4.107 */ function parse_ExtSST(blob, length) {\n    var extsst = {};\n    extsst.dsst = blob.read_shift(2);\n    blob.l += length - 2;\n    return extsst;\n}\n/* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */ function parse_Row(blob) {\n    var z = {} /*:any*/ ;\n    z.r = blob.read_shift(2);\n    z.c = blob.read_shift(2);\n    z.cnt = blob.read_shift(2) - z.c;\n    var miyRw = blob.read_shift(2);\n    blob.l += 4; // reserved(2), unused(2)\n    var flags = blob.read_shift(1); // various flags\n    blob.l += 3; // reserved(8), ixfe(12), flags(4)\n    if (flags & 0x07) z.level = flags & 0x07;\n    // collapsed: flags & 0x10\n    if (flags & 0x20) z.hidden = true;\n    if (flags & 0x40) z.hpt = miyRw / 20;\n    return z;\n}\n/* [MS-XLS] 2.4.125 */ function parse_ForceFullCalculation(blob) {\n    var header = parse_frtHeader(blob);\n    if (header.type != 0x08A3) throw new Error(\"Invalid Future Record \" + header.type);\n    var fullcalc = blob.read_shift(4);\n    return fullcalc !== 0x0;\n}\n/* [MS-XLS] 2.4.215 rt */ function parse_RecalcId(blob) {\n    blob.read_shift(2);\n    return blob.read_shift(4);\n}\n/* [MS-XLS] 2.4.87 */ function parse_DefaultRowHeight(blob, length, opts) {\n    var f = 0;\n    if (!(opts && opts.biff == 2)) {\n        f = blob.read_shift(2);\n    }\n    var miyRw = blob.read_shift(2);\n    if (opts && opts.biff == 2) {\n        f = 1 - (miyRw >> 15);\n        miyRw &= 0x7fff;\n    }\n    var fl = {\n        Unsynced: f & 1,\n        DyZero: (f & 2) >> 1,\n        ExAsc: (f & 4) >> 2,\n        ExDsc: (f & 8) >> 3\n    };\n    return [\n        fl,\n        miyRw\n    ];\n}\n/* [MS-XLS] 2.4.345 TODO */ function parse_Window1(blob) {\n    var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);\n    var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);\n    var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);\n    return {\n        Pos: [\n            xWn,\n            yWn\n        ],\n        Dim: [\n            dxWn,\n            dyWn\n        ],\n        Flags: flags,\n        CurTab: iTabCur,\n        FirstTab: iTabFirst,\n        Selected: ctabSel,\n        TabRatio: wTabRatio\n    };\n}\nfunction write_Window1() {\n    var o = new_buf(18);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0x7260);\n    o.write_shift(2, 0x44c0);\n    o.write_shift(2, 0x38);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, 1);\n    o.write_shift(2, 0x01f4);\n    return o;\n}\n/* [MS-XLS] 2.4.346 TODO */ function parse_Window2(blob, length, opts) {\n    if (opts && opts.biff >= 2 && opts.biff < 5) return {};\n    var f = blob.read_shift(2);\n    return {\n        RTL: f & 0x40\n    };\n}\nfunction write_Window2(view) {\n    var o = new_buf(18), f = 0x6b6;\n    if (view && view.RTL) f |= 0x40;\n    o.write_shift(2, f);\n    o.write_shift(4, 0);\n    o.write_shift(4, 64);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    return o;\n}\n/* [MS-XLS] 2.4.189 TODO */ function parse_Pane() {}\n/* [MS-XLS] 2.4.122 TODO */ function parse_Font(blob, length, opts) {\n    var o /*:any*/  = {\n        dyHeight: blob.read_shift(2),\n        fl: blob.read_shift(2)\n    };\n    switch(opts && opts.biff || 8){\n        case 2:\n            break;\n        case 3:\n        case 4:\n            blob.l += 2;\n            break;\n        default:\n            blob.l += 10;\n            break;\n    }\n    o.name = parse_ShortXLUnicodeString(blob, 0, opts);\n    return o;\n}\nfunction write_Font(data, opts) {\n    var name = data.name || \"Arial\";\n    var b5 = opts && opts.biff == 5, w = b5 ? 15 + name.length : 16 + 2 * name.length;\n    var o = new_buf(w);\n    o.write_shift(2, (data.sz || 12) * 20);\n    o.write_shift(4, 0);\n    o.write_shift(2, 400);\n    o.write_shift(4, 0);\n    o.write_shift(2, 0);\n    o.write_shift(1, name.length);\n    if (!b5) o.write_shift(1, 1);\n    o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? \"sbcs\" : \"utf16le\");\n    return o;\n}\n/* [MS-XLS] 2.4.149 */ function parse_LabelSst(blob) {\n    var cell = parse_XLSCell(blob);\n    cell.isst = blob.read_shift(4);\n    return cell;\n}\nfunction write_LabelSst(R /*:number*/ , C /*:number*/ , v /*:number*/ , os /*:number*/  /*::, opts*/ ) {\n    var o = new_buf(10);\n    write_XLSCell(R, C, os, o);\n    o.write_shift(4, v);\n    return o;\n}\n/* [MS-XLS] 2.4.148 */ function parse_Label(blob, length, opts) {\n    if (opts.biffguess && opts.biff == 2) opts.biff = 5;\n    var target = blob.l + length;\n    var cell = parse_XLSCell(blob, 6);\n    if (opts.biff == 2) blob.l++;\n    var str = parse_XLUnicodeString(blob, target - blob.l, opts);\n    cell.val = str;\n    return cell;\n}\nfunction write_Label(R /*:number*/ , C /*:number*/ , v /*:string*/ , os /*:number*/ , opts) {\n    var b8 = !opts || opts.biff == 8;\n    var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);\n    write_XLSCell(R, C, os, o);\n    o.write_shift(2, v.length);\n    if (b8) o.write_shift(1, 1);\n    o.write_shift((1 + b8) * v.length, v, b8 ? \"utf16le\" : \"sbcs\");\n    return o;\n}\n/* [MS-XLS] 2.4.126 Number Formats */ function parse_Format(blob, length, opts) {\n    var numFmtId = blob.read_shift(2);\n    var fmtstr = parse_XLUnicodeString2(blob, 0, opts);\n    return [\n        numFmtId,\n        fmtstr\n    ];\n}\nfunction write_Format(i /*:number*/ , f /*:string*/ , opts, o) {\n    var b5 = opts && opts.biff == 5;\n    if (!o) o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);\n    o.write_shift(2, i);\n    o.write_shift(b5 ? 1 : 2, f.length);\n    if (!b5) o.write_shift(1, 1);\n    o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? \"sbcs\" : \"utf16le\");\n    var out = o.length > o.l ? o.slice(0, o.l) : o;\n    if (out.l == null) out.l = out.length;\n    return out;\n}\nvar parse_BIFF2Format = parse_XLUnicodeString2;\n/* [MS-XLS] 2.4.90 */ function parse_Dimensions(blob, length, opts) {\n    var end = blob.l + length;\n    var w = opts.biff == 8 || !opts.biff ? 4 : 2;\n    var r = blob.read_shift(w), R = blob.read_shift(w);\n    var c = blob.read_shift(2), C = blob.read_shift(2);\n    blob.l = end;\n    return {\n        s: {\n            r: r,\n            c: c\n        },\n        e: {\n            r: R,\n            c: C\n        }\n    };\n}\nfunction write_Dimensions(range, opts) {\n    var w = opts.biff == 8 || !opts.biff ? 4 : 2;\n    var o = new_buf(2 * w + 6);\n    o.write_shift(w, range.s.r);\n    o.write_shift(w, range.e.r + 1);\n    o.write_shift(2, range.s.c);\n    o.write_shift(2, range.e.c + 1);\n    o.write_shift(2, 0);\n    return o;\n}\n/* [MS-XLS] 2.4.220 */ function parse_RK(blob) {\n    var rw = blob.read_shift(2), col = blob.read_shift(2);\n    var rkrec = parse_RkRec(blob);\n    return {\n        r: rw,\n        c: col,\n        ixfe: rkrec[0],\n        rknum: rkrec[1]\n    };\n}\n/* [MS-XLS] 2.4.175 */ function parse_MulRk(blob, length) {\n    var target = blob.l + length - 2;\n    var rw = blob.read_shift(2), col = blob.read_shift(2);\n    var rkrecs = [];\n    while(blob.l < target)rkrecs.push(parse_RkRec(blob));\n    if (blob.l !== target) throw new Error(\"MulRK read error\");\n    var lastcol = blob.read_shift(2);\n    if (rkrecs.length != lastcol - col + 1) throw new Error(\"MulRK length mismatch\");\n    return {\n        r: rw,\n        c: col,\n        C: lastcol,\n        rkrec: rkrecs\n    };\n}\n/* [MS-XLS] 2.4.174 */ function parse_MulBlank(blob, length) {\n    var target = blob.l + length - 2;\n    var rw = blob.read_shift(2), col = blob.read_shift(2);\n    var ixfes = [];\n    while(blob.l < target)ixfes.push(blob.read_shift(2));\n    if (blob.l !== target) throw new Error(\"MulBlank read error\");\n    var lastcol = blob.read_shift(2);\n    if (ixfes.length != lastcol - col + 1) throw new Error(\"MulBlank length mismatch\");\n    return {\n        r: rw,\n        c: col,\n        C: lastcol,\n        ixfe: ixfes\n    };\n}\n/* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */ function parse_CellStyleXF(blob, length, style, opts) {\n    var o = {};\n    var a = blob.read_shift(4), b = blob.read_shift(4);\n    var c = blob.read_shift(4), d = blob.read_shift(2);\n    o.patternType = XLSFillPattern[c >> 26];\n    if (!opts.cellStyles) return o;\n    o.alc = a & 0x07;\n    o.fWrap = a >> 3 & 0x01;\n    o.alcV = a >> 4 & 0x07;\n    o.fJustLast = a >> 7 & 0x01;\n    o.trot = a >> 8 & 0xFF;\n    o.cIndent = a >> 16 & 0x0F;\n    o.fShrinkToFit = a >> 20 & 0x01;\n    o.iReadOrder = a >> 22 & 0x02;\n    o.fAtrNum = a >> 26 & 0x01;\n    o.fAtrFnt = a >> 27 & 0x01;\n    o.fAtrAlc = a >> 28 & 0x01;\n    o.fAtrBdr = a >> 29 & 0x01;\n    o.fAtrPat = a >> 30 & 0x01;\n    o.fAtrProt = a >> 31 & 0x01;\n    o.dgLeft = b & 0x0F;\n    o.dgRight = b >> 4 & 0x0F;\n    o.dgTop = b >> 8 & 0x0F;\n    o.dgBottom = b >> 12 & 0x0F;\n    o.icvLeft = b >> 16 & 0x7F;\n    o.icvRight = b >> 23 & 0x7F;\n    o.grbitDiag = b >> 30 & 0x03;\n    o.icvTop = c & 0x7F;\n    o.icvBottom = c >> 7 & 0x7F;\n    o.icvDiag = c >> 14 & 0x7F;\n    o.dgDiag = c >> 21 & 0x0F;\n    o.icvFore = d & 0x7F;\n    o.icvBack = d >> 7 & 0x7F;\n    o.fsxButton = d >> 14 & 0x01;\n    return o;\n}\n//function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}\n//function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}\n/* [MS-XLS] 2.4.353 TODO: actually do this right */ function parse_XF(blob, length, opts) {\n    var o = {};\n    o.ifnt = blob.read_shift(2);\n    o.numFmtId = blob.read_shift(2);\n    o.flags = blob.read_shift(2);\n    o.fStyle = o.flags >> 2 & 0x01;\n    length -= 6;\n    o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);\n    return o;\n}\nfunction write_XF(data, ixfeP, opts, o) {\n    var b5 = opts && opts.biff == 5;\n    if (!o) o = new_buf(b5 ? 16 : 20);\n    o.write_shift(2, 0);\n    if (data.style) {\n        o.write_shift(2, data.numFmtId || 0);\n        o.write_shift(2, 0xFFF4);\n    } else {\n        o.write_shift(2, data.numFmtId || 0);\n        o.write_shift(2, ixfeP << 4);\n    }\n    var f = 0;\n    if (data.numFmtId > 0 && b5) f |= 0x0400;\n    o.write_shift(4, f);\n    o.write_shift(4, 0);\n    if (!b5) o.write_shift(4, 0);\n    o.write_shift(2, 0);\n    return o;\n}\n/* [MS-XLS] 2.4.134 */ function parse_Guts(blob) {\n    blob.l += 4;\n    var out = [\n        blob.read_shift(2),\n        blob.read_shift(2)\n    ];\n    if (out[0] !== 0) out[0]--;\n    if (out[1] !== 0) out[1]--;\n    if (out[0] > 7 || out[1] > 7) throw new Error(\"Bad Gutters: \" + out.join(\"|\"));\n    return out;\n}\nfunction write_Guts(guts /*:Array<number>*/ ) {\n    var o = new_buf(8);\n    o.write_shift(4, 0);\n    o.write_shift(2, guts[0] ? guts[0] + 1 : 0);\n    o.write_shift(2, guts[1] ? guts[1] + 1 : 0);\n    return o;\n}\n/* [MS-XLS] 2.4.24 */ function parse_BoolErr(blob, length, opts) {\n    var cell = parse_XLSCell(blob, 6);\n    if (opts.biff == 2 || length == 9) ++blob.l;\n    var val = parse_Bes(blob, 2);\n    cell.val = val;\n    cell.t = val === true || val === false ? \"b\" : \"e\";\n    return cell;\n}\nfunction write_BoolErr(R /*:number*/ , C /*:number*/ , v, os /*:number*/ , opts, t /*:string*/ ) {\n    var o = new_buf(8);\n    write_XLSCell(R, C, os, o);\n    write_Bes(v, t, o);\n    return o;\n}\n/* [MS-XLS] 2.4.180 Number */ function parse_Number(blob, length, opts) {\n    if (opts.biffguess && opts.biff == 2) opts.biff = 5;\n    var cell = parse_XLSCell(blob, 6);\n    var xnum = parse_Xnum(blob, 8);\n    cell.val = xnum;\n    return cell;\n}\nfunction write_Number(R /*:number*/ , C /*:number*/ , v, os /*:: :number, opts*/ ) {\n    var o = new_buf(14);\n    write_XLSCell(R, C, os, o);\n    write_Xnum(v, o);\n    return o;\n}\nvar parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136\n/* [MS-XLS] 2.4.271 */ function parse_SupBook(blob, length, opts) {\n    var end = blob.l + length;\n    var ctab = blob.read_shift(2);\n    var cch = blob.read_shift(2);\n    opts.sbcch = cch;\n    if (cch == 0x0401 || cch == 0x3A01) return [\n        cch,\n        ctab\n    ];\n    if (cch < 0x01 || cch > 0xff) throw new Error(\"Unexpected SupBook type: \" + cch);\n    var virtPath = parse_XLUnicodeStringNoCch(blob, cch);\n    /* TODO: 2.5.277 Virtual Path */ var rgst = [];\n    while(end > blob.l)rgst.push(parse_XLUnicodeString(blob));\n    return [\n        cch,\n        ctab,\n        virtPath,\n        rgst\n    ];\n}\n/* [MS-XLS] 2.4.105 TODO */ function parse_ExternName(blob, length, opts) {\n    var flags = blob.read_shift(2);\n    var body;\n    var o = {\n        fBuiltIn: flags & 0x01,\n        fWantAdvise: flags >>> 1 & 0x01,\n        fWantPict: flags >>> 2 & 0x01,\n        fOle: flags >>> 3 & 0x01,\n        fOleLink: flags >>> 4 & 0x01,\n        cf: flags >>> 5 & 0x3FF,\n        fIcon: flags >>> 15 & 0x01\n    } /*:any*/ ;\n    if (opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length - 2, opts);\n    //else throw new Error(\"unsupported SupBook cch: \" + opts.sbcch);\n    o.body = body || blob.read_shift(length - 2);\n    if (typeof body === \"string\") o.Name = body;\n    return o;\n}\n/* [MS-XLS] 2.4.150 TODO */ var XLSLblBuiltIn = [\n    \"_xlnm.Consolidate_Area\",\n    \"_xlnm.Auto_Open\",\n    \"_xlnm.Auto_Close\",\n    \"_xlnm.Extract\",\n    \"_xlnm.Database\",\n    \"_xlnm.Criteria\",\n    \"_xlnm.Print_Area\",\n    \"_xlnm.Print_Titles\",\n    \"_xlnm.Recorder\",\n    \"_xlnm.Data_Form\",\n    \"_xlnm.Auto_Activate\",\n    \"_xlnm.Auto_Deactivate\",\n    \"_xlnm.Sheet_Title\",\n    \"_xlnm._FilterDatabase\"\n];\nfunction parse_Lbl(blob, length, opts) {\n    var target = blob.l + length;\n    var flags = blob.read_shift(2);\n    var chKey = blob.read_shift(1);\n    var cch = blob.read_shift(1);\n    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n    var itab = 0;\n    if (!opts || opts.biff >= 5) {\n        if (opts.biff != 5) blob.l += 2;\n        itab = blob.read_shift(2);\n        if (opts.biff == 5) blob.l += 2;\n        blob.l += 4;\n    }\n    var name = parse_XLUnicodeStringNoCch(blob, cch, opts);\n    if (flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];\n    var npflen = target - blob.l;\n    if (opts && opts.biff == 2) --npflen;\n    /*jshint -W018 */ var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);\n    /*jshint +W018 */ return {\n        chKey: chKey,\n        Name: name,\n        itab: itab,\n        rgce: rgce\n    };\n}\n/* [MS-XLS] 2.4.106 TODO: verify filename encoding */ function parse_ExternSheet(blob, length, opts) {\n    if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);\n    var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);\n    while(len-- !== 0)o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));\n    // [iSupBook, itabFirst, itabLast];\n    if (blob.l != target) throw new Error(\"Bad ExternSheet: \" + blob.l + \" != \" + target);\n    return o;\n}\nfunction parse_BIFF5ExternSheet(blob, length, opts) {\n    if (blob[blob.l + 1] == 0x03) blob[blob.l]++;\n    var o = parse_ShortXLUnicodeString(blob, length, opts);\n    return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;\n}\n/* [MS-XLS] 2.4.176 TODO: check older biff */ function parse_NameCmt(blob, length, opts) {\n    if (opts.biff < 8) {\n        blob.l += length;\n        return;\n    }\n    var cchName = blob.read_shift(2);\n    var cchComment = blob.read_shift(2);\n    var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);\n    var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);\n    return [\n        name,\n        comment\n    ];\n}\n/* [MS-XLS] 2.4.260 */ function parse_ShrFmla(blob, length, opts) {\n    var ref = parse_RefU(blob, 6);\n    blob.l++;\n    var cUse = blob.read_shift(1);\n    length -= 8;\n    return [\n        parse_SharedParsedFormula(blob, length, opts),\n        cUse,\n        ref\n    ];\n}\n/* [MS-XLS] 2.4.4 TODO */ function parse_Array(blob, length, opts) {\n    var ref = parse_Ref(blob, 6);\n    /* TODO: fAlwaysCalc */ switch(opts.biff){\n        case 2:\n            blob.l++;\n            length -= 7;\n            break;\n        case 3:\n        case 4:\n            blob.l += 2;\n            length -= 8;\n            break;\n        default:\n            blob.l += 6;\n            length -= 12;\n    }\n    return [\n        ref,\n        parse_ArrayParsedFormula(blob, length, opts, ref)\n    ];\n}\n/* [MS-XLS] 2.4.173 */ function parse_MTRSettings(blob) {\n    var fMTREnabled = blob.read_shift(4) !== 0x00;\n    var fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n    var cUserThreadCount = blob.read_shift(4);\n    return [\n        fMTREnabled,\n        fUserSetThreadCount,\n        cUserThreadCount\n    ];\n}\n/* [MS-XLS] 2.5.186 TODO: BIFF5 */ function parse_NoteSh(blob, length, opts) {\n    if (opts.biff < 8) return;\n    var row = blob.read_shift(2), col = blob.read_shift(2);\n    var flags = blob.read_shift(2), idObj = blob.read_shift(2);\n    var stAuthor = parse_XLUnicodeString2(blob, 0, opts);\n    if (opts.biff < 8) blob.read_shift(1);\n    return [\n        {\n            r: row,\n            c: col\n        },\n        stAuthor,\n        idObj,\n        flags\n    ];\n}\n/* [MS-XLS] 2.4.179 */ function parse_Note(blob, length, opts) {\n    /* TODO: Support revisions */ return parse_NoteSh(blob, length, opts);\n}\n/* [MS-XLS] 2.4.168 */ function parse_MergeCells(blob, length) /*:Array<Range>*/ {\n    var merges /*:Array<Range>*/  = [];\n    var cmcs = blob.read_shift(2);\n    while(cmcs--)merges.push(parse_Ref8U(blob, length));\n    return merges;\n}\nfunction write_MergeCells(merges /*:Array<Range>*/ ) {\n    var o = new_buf(2 + merges.length * 8);\n    o.write_shift(2, merges.length);\n    for(var i = 0; i < merges.length; ++i)write_Ref8U(merges[i], o);\n    return o;\n}\n/* [MS-XLS] 2.4.181 TODO: parse all the things! */ function parse_Obj(blob, length, opts) {\n    if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);\n    var cmo = parse_FtCmo(blob, 22); // id, ot, flags\n    var fts = parse_FtArray(blob, length - 22, cmo[1]);\n    return {\n        cmo: cmo,\n        ft: fts\n    };\n}\n/* from older spec */ var parse_BIFF5OT = {\n    0x08: function(blob, length) {\n        var tgt = blob.l + length;\n        blob.l += 10; // todo\n        var cf = blob.read_shift(2);\n        blob.l += 4;\n        blob.l += 2; //var cbPictFmla = blob.read_shift(2);\n        blob.l += 2;\n        blob.l += 2; //var grbit = blob.read_shift(2);\n        blob.l += 4;\n        var cchName = blob.read_shift(1);\n        blob.l += cchName; // TODO: stName\n        blob.l = tgt; // TODO: fmla\n        return {\n            fmt: cf\n        };\n    }\n};\nfunction parse_BIFF5Obj(blob, length, opts) {\n    blob.l += 4; //var cnt = blob.read_shift(4);\n    var ot = blob.read_shift(2);\n    var id = blob.read_shift(2);\n    var grbit = blob.read_shift(2);\n    blob.l += 2; //var colL = blob.read_shift(2);\n    blob.l += 2; //var dxL = blob.read_shift(2);\n    blob.l += 2; //var rwT = blob.read_shift(2);\n    blob.l += 2; //var dyT = blob.read_shift(2);\n    blob.l += 2; //var colR = blob.read_shift(2);\n    blob.l += 2; //var dxR = blob.read_shift(2);\n    blob.l += 2; //var rwB = blob.read_shift(2);\n    blob.l += 2; //var dyB = blob.read_shift(2);\n    blob.l += 2; //var cbMacro = blob.read_shift(2);\n    blob.l += 6;\n    length -= 36;\n    var fts = [];\n    fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));\n    return {\n        cmo: [\n            id,\n            ot,\n            grbit\n        ],\n        ft: fts\n    };\n}\n/* [MS-XLS] 2.4.329 TODO: parse properly */ function parse_TxO(blob, length, opts) {\n    var s = blob.l;\n    var texts = \"\";\n    try {\n        blob.l += 4;\n        var ot = (opts.lastobj || {\n            cmo: [\n                0,\n                0\n            ]\n        }).cmo[1];\n        var controlInfo; // eslint-disable-line no-unused-vars\n        if ([\n            0,\n            5,\n            7,\n            11,\n            12,\n            14\n        ].indexOf(ot) == -1) blob.l += 6;\n        else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars\n        var cchText = blob.read_shift(2);\n        /*var cbRuns = */ blob.read_shift(2);\n        /*var ifntEmpty = */ parseuint16(blob, 2);\n        var len = blob.read_shift(2);\n        blob.l += len;\n        //var fmla = parse_ObjFmla(blob, s + length - blob.l);\n        for(var i = 1; i < blob.lens.length - 1; ++i){\n            if (blob.l - s != blob.lens[i]) throw new Error(\"TxO: bad continue record\");\n            var hdr = blob[blob.l];\n            var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);\n            texts += t;\n            if (texts.length >= (hdr ? cchText : 2 * cchText)) break;\n        }\n        if (texts.length !== cchText && texts.length !== cchText * 2) {\n            throw new Error(\"cchText: \" + cchText + \" != \" + texts.length);\n        }\n        blob.l = s + length;\n        /* [MS-XLS] 2.5.272 TxORuns */ //\tvar rgTxoRuns = [];\n        //\tfor(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;\n        //\tvar cchText2 = blob.read_shift(2);\n        //\tif(cchText2 !== cchText) throw new Error(\"TxOLastRun mismatch: \" + cchText2 + \" \" + cchText);\n        //\tblob.l += 6;\n        //\tif(s + length != blob.l) throw new Error(\"TxO \" + (s + length) + \", at \" + blob.l);\n        return {\n            t: texts\n        };\n    } catch (e) {\n        blob.l = s + length;\n        return {\n            t: texts\n        };\n    }\n}\n/* [MS-XLS] 2.4.140 */ function parse_HLink(blob, length) {\n    var ref = parse_Ref8U(blob, 8);\n    blob.l += 16; /* CLSID */ \n    var hlink = parse_Hyperlink(blob, length - 24);\n    return [\n        ref,\n        hlink\n    ];\n}\nfunction write_HLink(hl) {\n    var O = new_buf(24);\n    var ref = decode_cell(hl[0]);\n    O.write_shift(2, ref.r);\n    O.write_shift(2, ref.r);\n    O.write_shift(2, ref.c);\n    O.write_shift(2, ref.c);\n    var clsid = \"d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b\".split(\" \");\n    for(var i = 0; i < 16; ++i)O.write_shift(1, parseInt(clsid[i], 16));\n    return bconcat([\n        O,\n        write_Hyperlink(hl[1])\n    ]);\n}\n/* [MS-XLS] 2.4.141 */ function parse_HLinkTooltip(blob, length) {\n    blob.read_shift(2);\n    var ref = parse_Ref8U(blob, 8);\n    var wzTooltip = blob.read_shift((length - 10) / 2, \"dbcs-cont\");\n    wzTooltip = wzTooltip.replace(chr0, \"\");\n    return [\n        ref,\n        wzTooltip\n    ];\n}\nfunction write_HLinkTooltip(hl) {\n    var TT = hl[1].Tooltip;\n    var O = new_buf(10 + 2 * (TT.length + 1));\n    O.write_shift(2, 0x0800);\n    var ref = decode_cell(hl[0]);\n    O.write_shift(2, ref.r);\n    O.write_shift(2, ref.r);\n    O.write_shift(2, ref.c);\n    O.write_shift(2, ref.c);\n    for(var i = 0; i < TT.length; ++i)O.write_shift(2, TT.charCodeAt(i));\n    O.write_shift(2, 0);\n    return O;\n}\n/* [MS-XLS] 2.4.63 */ function parse_Country(blob) /*:[string|number, string|number]*/ {\n    var o = [\n        0,\n        0\n    ], d;\n    d = blob.read_shift(2);\n    o[0] = CountryEnum[d] || d;\n    d = blob.read_shift(2);\n    o[1] = CountryEnum[d] || d;\n    return o;\n}\nfunction write_Country(o) {\n    if (!o) o = new_buf(4);\n    o.write_shift(2, 0x01);\n    o.write_shift(2, 0x01);\n    return o;\n}\n/* [MS-XLS] 2.4.50 ClrtClient */ function parse_ClrtClient(blob) {\n    var ccv = blob.read_shift(2);\n    var o = [];\n    while(ccv-- > 0)o.push(parse_LongRGB(blob, 8));\n    return o;\n}\n/* [MS-XLS] 2.4.188 */ function parse_Palette(blob) {\n    var ccv = blob.read_shift(2);\n    var o = [];\n    while(ccv-- > 0)o.push(parse_LongRGB(blob, 8));\n    return o;\n}\n/* [MS-XLS] 2.4.354 */ function parse_XFCRC(blob) {\n    blob.l += 2;\n    var o = {\n        cxfs: 0,\n        crc: 0\n    };\n    o.cxfs = blob.read_shift(2);\n    o.crc = blob.read_shift(4);\n    return o;\n}\n/* [MS-XLS] 2.4.53 TODO: parse flags */ /* [MS-XLSB] 2.4.323 TODO: parse flags */ function parse_ColInfo(blob, length, opts) {\n    if (!opts.cellStyles) return parsenoop(blob, length);\n    var w = opts && opts.biff >= 12 ? 4 : 2;\n    var colFirst = blob.read_shift(w);\n    var colLast = blob.read_shift(w);\n    var coldx = blob.read_shift(w);\n    var ixfe = blob.read_shift(w);\n    var flags = blob.read_shift(2);\n    if (w == 2) blob.l += 2;\n    var o = {\n        s: colFirst,\n        e: colLast,\n        w: coldx,\n        ixfe: ixfe,\n        flags: flags\n    } /*:any*/ ;\n    if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 0x7;\n    return o;\n}\nfunction write_ColInfo(col, idx) {\n    var o = new_buf(12);\n    o.write_shift(2, idx);\n    o.write_shift(2, idx);\n    o.write_shift(2, col.width * 256);\n    o.write_shift(2, 0);\n    var f = 0;\n    if (col.hidden) f |= 1;\n    o.write_shift(1, f);\n    f = col.level || 0;\n    o.write_shift(1, f);\n    o.write_shift(2, 0);\n    return o;\n}\n/* [MS-XLS] 2.4.257 */ function parse_Setup(blob, length) {\n    var o = {};\n    if (length < 32) return o;\n    blob.l += 16;\n    o.header = parse_Xnum(blob, 8);\n    o.footer = parse_Xnum(blob, 8);\n    blob.l += 2;\n    return o;\n}\n/* [MS-XLS] 2.4.261 */ function parse_ShtProps(blob, length, opts) {\n    var def = {\n        area: false\n    };\n    if (opts.biff != 5) {\n        blob.l += length;\n        return def;\n    }\n    var d = blob.read_shift(1);\n    blob.l += 3;\n    if (d & 0x10) def.area = true;\n    return def;\n}\n/* [MS-XLS] 2.4.241 */ function write_RRTabId(n /*:number*/ ) {\n    var out = new_buf(2 * n);\n    for(var i = 0; i < n; ++i)out.write_shift(2, i + 1);\n    return out;\n}\nvar parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */ \nvar parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */ \nvar parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */ \n/* --- Specific to versions before BIFF8 --- */ function parse_ImData(blob) {\n    var cf = blob.read_shift(2);\n    var env = blob.read_shift(2);\n    var lcb = blob.read_shift(4);\n    var o = {\n        fmt: cf,\n        env: env,\n        len: lcb,\n        data: blob.slice(blob.l, blob.l + lcb)\n    };\n    blob.l += lcb;\n    return o;\n}\n/* BIFF2_??? where ??? is the name from [XLS] */ function parse_BIFF2STR(blob, length, opts) {\n    if (opts.biffguess && opts.biff == 5) opts.biff = 2;\n    var cell = parse_XLSCell(blob, 6);\n    ++blob.l;\n    var str = parse_XLUnicodeString2(blob, length - 7, opts);\n    cell.t = \"str\";\n    cell.val = str;\n    return cell;\n}\nfunction parse_BIFF2NUM(blob /*::, length*/ ) {\n    var cell = parse_XLSCell(blob, 6);\n    ++blob.l;\n    var num = parse_Xnum(blob, 8);\n    cell.t = \"n\";\n    cell.val = num;\n    return cell;\n}\nfunction write_BIFF2NUM(r /*:number*/ , c /*:number*/ , val /*:number*/ ) {\n    var out = new_buf(15);\n    write_BIFF2Cell(out, r, c);\n    out.write_shift(8, val, \"f\");\n    return out;\n}\nfunction parse_BIFF2INT(blob) {\n    var cell = parse_XLSCell(blob, 6);\n    ++blob.l;\n    var num = blob.read_shift(2);\n    cell.t = \"n\";\n    cell.val = num;\n    return cell;\n}\nfunction write_BIFF2INT(r /*:number*/ , c /*:number*/ , val /*:number*/ ) {\n    var out = new_buf(9);\n    write_BIFF2Cell(out, r, c);\n    out.write_shift(2, val);\n    return out;\n}\nfunction parse_BIFF2STRING(blob) {\n    var cch = blob.read_shift(1);\n    if (cch === 0) {\n        blob.l++;\n        return \"\";\n    }\n    return blob.read_shift(cch, \"sbcs-cont\");\n}\n/* TODO: convert to BIFF8 font struct */ function parse_BIFF2FONTXTRA(blob, length) {\n    blob.l += 6; // unknown\n    blob.l += 2; // font weight \"bls\"\n    blob.l += 1; // charset\n    blob.l += 3; // unknown\n    blob.l += 1; // font family\n    blob.l += length - 13;\n}\n/* TODO: parse rich text runs */ function parse_RString(blob, length, opts) {\n    var end = blob.l + length;\n    var cell = parse_XLSCell(blob, 6);\n    var cch = blob.read_shift(2);\n    var str = parse_XLUnicodeStringNoCch(blob, cch, opts);\n    blob.l = end;\n    cell.t = \"str\";\n    cell.val = str;\n    return cell;\n}\n/* from js-harb (C) 2014-present  SheetJS */ var DBF_SUPPORTED_VERSIONS = [\n    0x02,\n    0x03,\n    0x30,\n    0x31,\n    0x83,\n    0x8B,\n    0x8C,\n    0xF5\n];\nvar DBF = /*#__PURE__*/ function() {\n    var dbf_codepage_map = {\n        /* Code Pages Supported by Visual FoxPro */ /*::[*/ 0x01: 437,\n        /*::[*/ 0x02: 850,\n        /*::[*/ 0x03: 1252,\n        /*::[*/ 0x04: 10000,\n        /*::[*/ 0x64: 852,\n        /*::[*/ 0x65: 866,\n        /*::[*/ 0x66: 865,\n        /*::[*/ 0x67: 861,\n        /*::[*/ 0x68: 895,\n        /*::[*/ 0x69: 620,\n        /*::[*/ 0x6A: 737,\n        /*::[*/ 0x6B: 857,\n        /*::[*/ 0x78: 950,\n        /*::[*/ 0x79: 949,\n        /*::[*/ 0x7A: 936,\n        /*::[*/ 0x7B: 932,\n        /*::[*/ 0x7C: 874,\n        /*::[*/ 0x7D: 1255,\n        /*::[*/ 0x7E: 1256,\n        /*::[*/ 0x96: 10007,\n        /*::[*/ 0x97: 10029,\n        /*::[*/ 0x98: 10006,\n        /*::[*/ 0xC8: 1250,\n        /*::[*/ 0xC9: 1251,\n        /*::[*/ 0xCA: 1254,\n        /*::[*/ 0xCB: 1253,\n        /* shapefile DBF extension */ /*::[*/ 0x00: 20127,\n        /*::[*/ 0x08: 865,\n        /*::[*/ 0x09: 437,\n        /*::[*/ 0x0A: 850,\n        /*::[*/ 0x0B: 437,\n        /*::[*/ 0x0D: 437,\n        /*::[*/ 0x0E: 850,\n        /*::[*/ 0x0F: 437,\n        /*::[*/ 0x10: 850,\n        /*::[*/ 0x11: 437,\n        /*::[*/ 0x12: 850,\n        /*::[*/ 0x13: 932,\n        /*::[*/ 0x14: 850,\n        /*::[*/ 0x15: 437,\n        /*::[*/ 0x16: 850,\n        /*::[*/ 0x17: 865,\n        /*::[*/ 0x18: 437,\n        /*::[*/ 0x19: 437,\n        /*::[*/ 0x1A: 850,\n        /*::[*/ 0x1B: 437,\n        /*::[*/ 0x1C: 863,\n        /*::[*/ 0x1D: 850,\n        /*::[*/ 0x1F: 852,\n        /*::[*/ 0x22: 852,\n        /*::[*/ 0x23: 852,\n        /*::[*/ 0x24: 860,\n        /*::[*/ 0x25: 850,\n        /*::[*/ 0x26: 866,\n        /*::[*/ 0x37: 850,\n        /*::[*/ 0x40: 852,\n        /*::[*/ 0x4D: 936,\n        /*::[*/ 0x4E: 949,\n        /*::[*/ 0x4F: 950,\n        /*::[*/ 0x50: 874,\n        /*::[*/ 0x57: 1252,\n        /*::[*/ 0x58: 1252,\n        /*::[*/ 0x59: 1252,\n        /*::[*/ 0x6C: 863,\n        /*::[*/ 0x86: 737,\n        /*::[*/ 0x87: 852,\n        /*::[*/ 0x88: 857,\n        /*::[*/ 0xCC: 1257,\n        /*::[*/ 0xFF: 16969\n    };\n    var dbf_reverse_map = evert({\n        /*::[*/ 0x01: 437,\n        /*::[*/ 0x02: 850,\n        /*::[*/ 0x03: 1252,\n        /*::[*/ 0x04: 10000,\n        /*::[*/ 0x64: 852,\n        /*::[*/ 0x65: 866,\n        /*::[*/ 0x66: 865,\n        /*::[*/ 0x67: 861,\n        /*::[*/ 0x68: 895,\n        /*::[*/ 0x69: 620,\n        /*::[*/ 0x6A: 737,\n        /*::[*/ 0x6B: 857,\n        /*::[*/ 0x78: 950,\n        /*::[*/ 0x79: 949,\n        /*::[*/ 0x7A: 936,\n        /*::[*/ 0x7B: 932,\n        /*::[*/ 0x7C: 874,\n        /*::[*/ 0x7D: 1255,\n        /*::[*/ 0x7E: 1256,\n        /*::[*/ 0x96: 10007,\n        /*::[*/ 0x97: 10029,\n        /*::[*/ 0x98: 10006,\n        /*::[*/ 0xC8: 1250,\n        /*::[*/ 0xC9: 1251,\n        /*::[*/ 0xCA: 1254,\n        /*::[*/ 0xCB: 1253,\n        /*::[*/ 0x00: 20127\n    });\n    /* TODO: find an actual specification */ function dbf_to_aoa(buf, opts) /*:AOA*/ {\n        var out /*:AOA*/  = [];\n        var d /*:Block*/  = new_raw_buf(1);\n        switch(opts.type){\n            case \"base64\":\n                d = s2a(Base64_decode(buf));\n                break;\n            case \"binary\":\n                d = s2a(buf);\n                break;\n            case \"buffer\":\n            case \"array\":\n                d = buf;\n                break;\n        }\n        prep_blob(d, 0);\n        /* header */ var ft = d.read_shift(1);\n        var memo = !!(ft & 0x88);\n        var vfp = false, l7 = false;\n        switch(ft){\n            case 0x02:\n                break; // dBASE II\n            case 0x03:\n                break; // dBASE III\n            case 0x30:\n                vfp = true;\n                memo = true;\n                break; // VFP\n            case 0x31:\n                vfp = true;\n                memo = true;\n                break; // VFP with autoincrement\n            // 0x43 dBASE IV SQL table files\n            // 0x63 dBASE IV SQL system files\n            case 0x83:\n                break; // dBASE III with memo\n            case 0x8B:\n                break; // dBASE IV with memo\n            case 0x8C:\n                l7 = true;\n                break; // dBASE Level 7 with memo\n            // case 0xCB dBASE IV SQL table files with memo\n            case 0xF5:\n                break; // FoxPro 2.x with memo\n            // case 0xFB FoxBASE\n            default:\n                throw new Error(\"DBF Unsupported Version: \" + ft.toString(16));\n        }\n        var nrow = 0, fpos = 0x0209;\n        if (ft == 0x02) nrow = d.read_shift(2);\n        d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD\n        if (ft != 0x02) nrow = d.read_shift(4);\n        if (nrow > 1048576) nrow = 1e6;\n        if (ft != 0x02) fpos = d.read_shift(2); // header length\n        var rlen = d.read_shift(2); // record length\n        var /*flags = 0,*/ current_cp = opts.codepage || 1252;\n        if (ft != 0x02) {\n            d.l += 16;\n            /*flags = */ d.read_shift(1);\n            //if(memo && ((flags & 0x02) === 0)) throw new Error(\"DBF Flags \" + flags.toString(16) + \" ft \" + ft.toString(16));\n            /* codepage present in FoxPro and dBASE Level 7 */ if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];\n            d.l += 1;\n            d.l += 2;\n        }\n        if (l7) d.l += 36; // Level 7: 32 byte \"Language driver name\", 4 byte reserved\n        /*:: type DBFField = { name:string; len:number; type:string; } */ var fields /*:Array<DBFField>*/  = [], field /*:DBFField*/  = {} /*:any*/ ;\n        var hend = Math.min(d.length, ft == 0x02 ? 0x209 : fpos - 10 - (vfp ? 264 : 0));\n        var ww = l7 ? 32 : 11;\n        while(d.l < hend && d[d.l] != 0x0d){\n            field = {} /*:any*/ ;\n            field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\\u0000\\r\\n].*$/g, \"\");\n            d.l += ww;\n            field.type = String.fromCharCode(d.read_shift(1));\n            if (ft != 0x02 && !l7) field.offset = d.read_shift(4);\n            field.len = d.read_shift(1);\n            if (ft == 0x02) field.offset = d.read_shift(2);\n            field.dec = d.read_shift(1);\n            if (field.name.length) fields.push(field);\n            if (ft != 0x02) d.l += l7 ? 13 : 14;\n            switch(field.type){\n                case \"B\":\n                    if ((!vfp || field.len != 8) && opts.WTF) console.log(\"Skipping \" + field.name + \":\" + field.type);\n                    break;\n                case \"G\":\n                case \"P\":\n                    if (opts.WTF) console.log(\"Skipping \" + field.name + \":\" + field.type);\n                    break;\n                case \"+\":\n                case \"0\":\n                case \"@\":\n                case \"C\":\n                case \"D\":\n                case \"F\":\n                case \"I\":\n                case \"L\":\n                case \"M\":\n                case \"N\":\n                case \"O\":\n                case \"T\":\n                case \"Y\":\n                    break;\n                default:\n                    throw new Error(\"Unknown Field Type: \" + field.type);\n            }\n        }\n        if (d[d.l] !== 0x0D) d.l = fpos - 1;\n        if (d.read_shift(1) !== 0x0D) throw new Error(\"DBF Terminator not found \" + d.l + \" \" + d[d.l]);\n        d.l = fpos;\n        /* data */ var R = 0, C = 0;\n        out[0] = [];\n        for(C = 0; C != fields.length; ++C)out[0][C] = fields[C].name;\n        while(nrow-- > 0){\n            if (d[d.l] === 0x2A) {\n                // TODO: record marked as deleted -- create a hidden row?\n                d.l += rlen;\n                continue;\n            }\n            ++d.l;\n            out[++R] = [];\n            C = 0;\n            for(C = 0; C != fields.length; ++C){\n                var dd = d.slice(d.l, d.l + fields[C].len);\n                d.l += fields[C].len;\n                prep_blob(dd, 0);\n                var s = $cptable.utils.decode(current_cp, dd);\n                switch(fields[C].type){\n                    case \"C\":\n                        // NOTE: it is conventional to write '  /  /  ' for empty dates\n                        if (s.trim().length) out[R][C] = s.replace(/\\s+$/, \"\");\n                        break;\n                    case \"D\":\n                        if (s.length === 8) out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));\n                        else out[R][C] = s;\n                        break;\n                    case \"F\":\n                        out[R][C] = parseFloat(s.trim());\n                        break;\n                    case \"+\":\n                    case \"I\":\n                        out[R][C] = l7 ? dd.read_shift(-4, \"i\") ^ 0x80000000 : dd.read_shift(4, \"i\");\n                        break;\n                    case \"L\":\n                        switch(s.trim().toUpperCase()){\n                            case \"Y\":\n                            case \"T\":\n                                out[R][C] = true;\n                                break;\n                            case \"N\":\n                            case \"F\":\n                                out[R][C] = false;\n                                break;\n                            case \"\":\n                            case \"?\":\n                                break;\n                            default:\n                                throw new Error(\"DBF Unrecognized L:|\" + s + \"|\");\n                        }\n                        break;\n                    case \"M\":\n                        /* TODO: handle memo files */ if (!memo) throw new Error(\"DBF Unexpected MEMO for type \" + ft.toString(16));\n                        out[R][C] = \"##MEMO##\" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));\n                        break;\n                    case \"N\":\n                        s = s.replace(/\\u0000/g, \"\").trim();\n                        // NOTE: dBASE II interprets \"  .  \" as 0\n                        if (s && s != \".\") out[R][C] = +s || 0;\n                        break;\n                    case \"@\":\n                        // NOTE: dBASE specs appear to be incorrect\n                        out[R][C] = new Date(dd.read_shift(-8, \"f\") - 0x388317533400);\n                        break;\n                    case \"T\":\n                        out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4));\n                        break;\n                    case \"Y\":\n                        out[R][C] = dd.read_shift(4, \"i\") / 1e4 + dd.read_shift(4, \"i\") / 1e4 * Math.pow(2, 32);\n                        break;\n                    case \"O\":\n                        out[R][C] = -dd.read_shift(-8, \"f\");\n                        break;\n                    case \"B\":\n                        if (vfp && fields[C].len == 8) {\n                            out[R][C] = dd.read_shift(8, \"f\");\n                            break;\n                        }\n                    /* falls through */ case \"G\":\n                    case \"P\":\n                        dd.l += fields[C].len;\n                        break;\n                    case \"0\":\n                        if (fields[C].name === \"_NullFlags\") break;\n                    /* falls through */ default:\n                        throw new Error(\"DBF Unsupported data type \" + fields[C].type);\n                }\n            }\n        }\n        if (ft != 0x02) {\n            if (d.l < d.length && d[d.l++] != 0x1A) throw new Error(\"DBF EOF Marker missing \" + (d.l - 1) + \" of \" + d.length + \" \" + d[d.l - 1].toString(16));\n        }\n        if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);\n        opts.DBF = fields;\n        return out;\n    }\n    function dbf_to_sheet(buf, opts) /*:Worksheet*/ {\n        var o = opts || {};\n        if (!o.dateNF) o.dateNF = \"yyyymmdd\";\n        var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);\n        ws[\"!cols\"] = o.DBF.map(function(field) {\n            return {\n                wch: field.len,\n                DBF: field\n            };\n        });\n        delete o.DBF;\n        return ws;\n    }\n    function dbf_to_workbook(buf, opts) /*:Workbook*/ {\n        try {\n            return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);\n        } catch (e) {\n            if (opts && opts.WTF) throw e;\n        }\n        return {\n            SheetNames: [],\n            Sheets: {}\n        };\n    }\n    var _RLEN = {\n        \"B\": 8,\n        \"C\": 250,\n        \"L\": 1,\n        \"D\": 8,\n        \"?\": 0,\n        \"\": 0\n    };\n    function sheet_to_dbf(ws /*:Worksheet*/ , opts /*:WriteOpts*/ ) {\n        var o = opts || {};\n        if (+o.codepage >= 0) set_cp(+o.codepage);\n        if (o.type == \"string\") throw new Error(\"Cannot write DBF to JS string\");\n        var ba = buf_array();\n        var aoa /*:AOA*/  = sheet_to_json(ws, {\n            header: 1,\n            raw: true,\n            cellDates: true\n        });\n        var headers = aoa[0], data = aoa.slice(1), cols = ws[\"!cols\"] || [];\n        var i = 0, j = 0, hcnt = 0, rlen = 1;\n        for(i = 0; i < headers.length; ++i){\n            if (((cols[i] || {}).DBF || {}).name) {\n                headers[i] = cols[i].DBF.name;\n                ++hcnt;\n                continue;\n            }\n            if (headers[i] == null) continue;\n            ++hcnt;\n            if (typeof headers[i] === \"number\") headers[i] = headers[i].toString(10);\n            if (typeof headers[i] !== \"string\") throw new Error(\"DBF Invalid column name \" + headers[i] + \" |\" + typeof headers[i] + \"|\");\n            if (headers.indexOf(headers[i]) !== i) {\n                for(j = 0; j < 1024; ++j)if (headers.indexOf(headers[i] + \"_\" + j) == -1) {\n                    headers[i] += \"_\" + j;\n                    break;\n                }\n            }\n        }\n        var range = safe_decode_range(ws[\"!ref\"]);\n        var coltypes /*:Array<string>*/  = [];\n        var colwidths /*:Array<number>*/  = [];\n        var coldecimals /*:Array<number>*/  = [];\n        for(i = 0; i <= range.e.c - range.s.c; ++i){\n            var guess = \"\", _guess = \"\", maxlen = 0;\n            var col /*:Array<any>*/  = [];\n            for(j = 0; j < data.length; ++j){\n                if (data[j][i] != null) col.push(data[j][i]);\n            }\n            if (col.length == 0 || headers[i] == null) {\n                coltypes[i] = \"?\";\n                continue;\n            }\n            for(j = 0; j < col.length; ++j){\n                switch(typeof col[j]){\n                    /* TODO: check if L2 compat is desired */ case \"number\":\n                        _guess = \"B\";\n                        break;\n                    case \"string\":\n                        _guess = \"C\";\n                        break;\n                    case \"boolean\":\n                        _guess = \"L\";\n                        break;\n                    case \"object\":\n                        _guess = col[j] instanceof Date ? \"D\" : \"C\";\n                        break;\n                    default:\n                        _guess = \"C\";\n                }\n                maxlen = Math.max(maxlen, String(col[j]).length);\n                guess = guess && guess != _guess ? \"C\" : _guess;\n            //if(guess == 'C') break;\n            }\n            if (maxlen > 250) maxlen = 250;\n            _guess = ((cols[i] || {}).DBF || {}).type;\n            /* TODO: more fine grained control over DBF type resolution */ if (_guess == \"C\") {\n                if (cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;\n            }\n            if (guess == \"B\" && _guess == \"N\") {\n                guess = \"N\";\n                coldecimals[i] = cols[i].DBF.dec;\n                maxlen = cols[i].DBF.len;\n            }\n            colwidths[i] = guess == \"C\" || _guess == \"N\" ? maxlen : _RLEN[guess] || 0;\n            rlen += colwidths[i];\n            coltypes[i] = guess;\n        }\n        var h = ba.next(32);\n        h.write_shift(4, 0x13021130);\n        h.write_shift(4, data.length);\n        h.write_shift(2, 296 + 32 * hcnt);\n        h.write_shift(2, rlen);\n        for(i = 0; i < 4; ++i)h.write_shift(4, 0);\n        h.write_shift(4, 0x00000000 | (+dbf_reverse_map[/*::String(*/ current_ansi /*::)*/ ] || 0x03) << 8);\n        for(i = 0, j = 0; i < headers.length; ++i){\n            if (headers[i] == null) continue;\n            var hf = ba.next(32);\n            var _f = (headers[i].slice(-10) + \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\").slice(0, 11);\n            hf.write_shift(1, _f, \"sbcs\");\n            hf.write_shift(1, coltypes[i] == \"?\" ? \"C\" : coltypes[i], \"sbcs\");\n            hf.write_shift(4, j);\n            hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);\n            hf.write_shift(1, coldecimals[i] || 0);\n            hf.write_shift(1, 0x02);\n            hf.write_shift(4, 0);\n            hf.write_shift(1, 0);\n            hf.write_shift(4, 0);\n            hf.write_shift(4, 0);\n            j += colwidths[i] || _RLEN[coltypes[i]] || 0;\n        }\n        var hb = ba.next(264);\n        hb.write_shift(4, 0x0000000D);\n        for(i = 0; i < 65; ++i)hb.write_shift(4, 0x00000000);\n        for(i = 0; i < data.length; ++i){\n            var rout = ba.next(rlen);\n            rout.write_shift(1, 0);\n            for(j = 0; j < headers.length; ++j){\n                if (headers[j] == null) continue;\n                switch(coltypes[j]){\n                    case \"L\":\n                        rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46);\n                        break;\n                    case \"B\":\n                        rout.write_shift(8, data[i][j] || 0, \"f\");\n                        break;\n                    case \"N\":\n                        var _n = \"0\";\n                        if (typeof data[i][j] == \"number\") _n = data[i][j].toFixed(coldecimals[j] || 0);\n                        for(hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt)rout.write_shift(1, 0x20);\n                        rout.write_shift(1, _n, \"sbcs\");\n                        break;\n                    case \"D\":\n                        if (!data[i][j]) rout.write_shift(8, \"00000000\", \"sbcs\");\n                        else {\n                            rout.write_shift(4, (\"0000\" + data[i][j].getFullYear()).slice(-4), \"sbcs\");\n                            rout.write_shift(2, (\"00\" + (data[i][j].getMonth() + 1)).slice(-2), \"sbcs\");\n                            rout.write_shift(2, (\"00\" + data[i][j].getDate()).slice(-2), \"sbcs\");\n                        }\n                        break;\n                    case \"C\":\n                        var _s = String(data[i][j] != null ? data[i][j] : \"\").slice(0, colwidths[j]);\n                        rout.write_shift(1, _s, \"sbcs\");\n                        for(hcnt = 0; hcnt < colwidths[j] - _s.length; ++hcnt)rout.write_shift(1, 0x20);\n                        break;\n                }\n            }\n        // data\n        }\n        ba.next(1).write_shift(1, 0x1A);\n        return ba.end();\n    }\n    return {\n        to_workbook: dbf_to_workbook,\n        to_sheet: dbf_to_sheet,\n        from_sheet: sheet_to_dbf\n    };\n}();\nvar SYLK = /*#__PURE__*/ function() {\n    /* TODO: stress test sequences */ var sylk_escapes = {\n        AA: \"\\xc0\",\n        BA: \"\\xc1\",\n        CA: \"\\xc2\",\n        DA: 195,\n        HA: \"\\xc4\",\n        JA: 197,\n        AE: \"\\xc8\",\n        BE: \"\\xc9\",\n        CE: \"\\xca\",\n        HE: \"\\xcb\",\n        AI: \"\\xcc\",\n        BI: \"\\xcd\",\n        CI: \"\\xce\",\n        HI: \"\\xcf\",\n        AO: \"\\xd2\",\n        BO: \"\\xd3\",\n        CO: \"\\xd4\",\n        DO: 213,\n        HO: \"\\xd6\",\n        AU: \"\\xd9\",\n        BU: \"\\xda\",\n        CU: \"\\xdb\",\n        HU: \"\\xdc\",\n        Aa: \"\\xe0\",\n        Ba: \"\\xe1\",\n        Ca: \"\\xe2\",\n        Da: 227,\n        Ha: \"\\xe4\",\n        Ja: 229,\n        Ae: \"\\xe8\",\n        Be: \"\\xe9\",\n        Ce: \"\\xea\",\n        He: \"\\xeb\",\n        Ai: \"\\xec\",\n        Bi: \"\\xed\",\n        Ci: \"\\xee\",\n        Hi: \"\\xef\",\n        Ao: \"\\xf2\",\n        Bo: \"\\xf3\",\n        Co: \"\\xf4\",\n        Do: 245,\n        Ho: \"\\xf6\",\n        Au: \"\\xf9\",\n        Bu: \"\\xfa\",\n        Cu: \"\\xfb\",\n        Hu: \"\\xfc\",\n        KC: \"\\xc7\",\n        Kc: \"\\xe7\",\n        q: \"\\xe6\",\n        z: \"œ\",\n        a: \"\\xc6\",\n        j: \"Œ\",\n        DN: 209,\n        Dn: 241,\n        Hy: 255,\n        S: 169,\n        c: 170,\n        R: 174,\n        \"B \": 180,\n        /*::[*/ 0: 176,\n        /*::[*/ 1: 177,\n        /*::[*/ 2: 178,\n        /*::[*/ 3: 179,\n        /*::[*/ 5: 181,\n        /*::[*/ 6: 182,\n        /*::[*/ 7: 183,\n        Q: 185,\n        k: 186,\n        b: 208,\n        i: 216,\n        l: 222,\n        s: 240,\n        y: 248,\n        \"!\": 161,\n        '\"': 162,\n        \"#\": 163,\n        \"(\": 164,\n        \"%\": 165,\n        \"'\": 167,\n        \"H \": 168,\n        \"+\": 171,\n        \";\": 187,\n        \"<\": 188,\n        \"=\": 189,\n        \">\": 190,\n        \"?\": 191,\n        \"{\": 223\n    } /*:any*/ ;\n    var sylk_char_regex = new RegExp(\"\\x1bN(\" + keys(sylk_escapes).join(\"|\").replace(/\\|\\|\\|/, \"|\\\\||\").replace(/([?()+])/g, \"\\\\$1\") + \"|\\\\|)\", \"gm\");\n    var sylk_char_fn = function(_, $1) {\n        var o = sylk_escapes[$1];\n        return typeof o == \"number\" ? _getansi(o) : o;\n    };\n    var decode_sylk_char = function($$, $1, $2) {\n        var newcc = $1.charCodeAt(0) - 0x20 << 4 | $2.charCodeAt(0) - 0x30;\n        return newcc == 59 ? $$ : _getansi(newcc);\n    };\n    sylk_escapes[\"|\"] = 254;\n    /* TODO: find an actual specification */ function sylk_to_aoa(d /*:RawData*/ , opts) /*:[AOA, Worksheet]*/ {\n        switch(opts.type){\n            case \"base64\":\n                return sylk_to_aoa_str(Base64_decode(d), opts);\n            case \"binary\":\n                return sylk_to_aoa_str(d, opts);\n            case \"buffer\":\n                return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString(\"binary\") : a2s(d), opts);\n            case \"array\":\n                return sylk_to_aoa_str(cc2str(d), opts);\n        }\n        throw new Error(\"Unrecognized type \" + opts.type);\n    }\n    function sylk_to_aoa_str(str /*:string*/ , opts) /*:[AOA, Worksheet]*/ {\n        var records = str.split(/[\\n\\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr /*:AOA*/  = [];\n        var formats /*:Array<string>*/  = [];\n        var next_cell_format /*:string|null*/  = null;\n        var sht = {}, rowinfo /*:Array<RowInfo>*/  = [], colinfo /*:Array<ColInfo>*/  = [], cw /*:Array<string>*/  = [];\n        var Mval = 0, j;\n        if (+opts.codepage >= 0) set_cp(+opts.codepage);\n        for(; ri !== records.length; ++ri){\n            Mval = 0;\n            var rstr = records[ri].trim().replace(/\\x1B([\\x20-\\x2F])([\\x30-\\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);\n            var record = rstr.replace(/;;/g, \"\\x00\").split(\";\").map(function(x) {\n                return x.replace(/\\u0000/g, \";\");\n            });\n            var RT = record[0], val;\n            if (rstr.length > 0) switch(RT){\n                case \"ID\":\n                    break; /* header */ \n                case \"E\":\n                    break; /* EOF */ \n                case \"B\":\n                    break; /* dimensions */ \n                case \"O\":\n                    break; /* options? */ \n                case \"W\":\n                    break; /* window? */ \n                case \"P\":\n                    if (record[1].charAt(0) == \"P\") formats.push(rstr.slice(3).replace(/;;/g, \";\"));\n                    break;\n                case \"C\":\n                    var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;\n                    for(rj = 1; rj < record.length; ++rj)switch(record[rj].charAt(0)){\n                        case \"A\":\n                            break; // TODO: comment\n                        case \"X\":\n                            C = parseInt(record[rj].slice(1)) - 1;\n                            C_seen_X = true;\n                            break;\n                        case \"Y\":\n                            R = parseInt(record[rj].slice(1)) - 1;\n                            if (!C_seen_X) C = 0;\n                            for(j = arr.length; j <= R; ++j)arr[j] = [];\n                            break;\n                        case \"K\":\n                            val = record[rj].slice(1);\n                            if (val.charAt(0) === '\"') val = val.slice(1, val.length - 1);\n                            else if (val === \"TRUE\") val = true;\n                            else if (val === \"FALSE\") val = false;\n                            else if (!isNaN(fuzzynum(val))) {\n                                val = fuzzynum(val);\n                                if (next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);\n                            } else if (!isNaN(fuzzydate(val).getDate())) {\n                                val = parseDate(val);\n                            }\n                            if (typeof $cptable !== \"undefined\" && typeof val == \"string\" && (opts || {}).type != \"string\" && (opts || {}).codepage) val = $cptable.utils.decode(opts.codepage, val);\n                            C_seen_K = true;\n                            break;\n                        case \"E\":\n                            C_seen_E = true;\n                            var formula = rc_to_a1(record[rj].slice(1), {\n                                r: R,\n                                c: C\n                            });\n                            arr[R][C] = [\n                                arr[R][C],\n                                formula\n                            ];\n                            break;\n                        case \"S\":\n                            C_seen_S = true;\n                            arr[R][C] = [\n                                arr[R][C],\n                                \"S5S\"\n                            ];\n                            break;\n                        case \"G\":\n                            break; // unknown\n                        case \"R\":\n                            _R = parseInt(record[rj].slice(1)) - 1;\n                            break;\n                        case \"C\":\n                            _C = parseInt(record[rj].slice(1)) - 1;\n                            break;\n                        default:\n                            if (opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n                    }\n                    if (C_seen_K) {\n                        if (arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;\n                        else arr[R][C] = val;\n                        next_cell_format = null;\n                    }\n                    if (C_seen_S) {\n                        if (C_seen_E) throw new Error(\"SYLK shared formula cannot have own formula\");\n                        var shrbase = _R > -1 && arr[_R][_C];\n                        if (!shrbase || !shrbase[1]) throw new Error(\"SYLK shared formula cannot find base\");\n                        arr[R][C][1] = shift_formula_str(shrbase[1], {\n                            r: R - _R,\n                            c: C - _C\n                        });\n                    }\n                    break;\n                case \"F\":\n                    var F_seen = 0;\n                    for(rj = 1; rj < record.length; ++rj)switch(record[rj].charAt(0)){\n                        case \"X\":\n                            C = parseInt(record[rj].slice(1)) - 1;\n                            ++F_seen;\n                            break;\n                        case \"Y\":\n                            R = parseInt(record[rj].slice(1)) - 1; /*C = 0;*/ \n                            for(j = arr.length; j <= R; ++j)arr[j] = [];\n                            break;\n                        case \"M\":\n                            Mval = parseInt(record[rj].slice(1)) / 20;\n                            break;\n                        case \"F\":\n                            break; /* ??? */ \n                        case \"G\":\n                            break; /* hide grid */ \n                        case \"P\":\n                            next_cell_format = formats[parseInt(record[rj].slice(1))];\n                            break;\n                        case \"S\":\n                            break; /* cell style */ \n                        case \"D\":\n                            break; /* column */ \n                        case \"N\":\n                            break; /* font */ \n                        case \"W\":\n                            cw = record[rj].slice(1).split(\" \");\n                            for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j){\n                                Mval = parseInt(cw[2], 10);\n                                colinfo[j - 1] = Mval === 0 ? {\n                                    hidden: true\n                                } : {\n                                    wch: Mval\n                                };\n                                process_col(colinfo[j - 1]);\n                            }\n                            break;\n                        case \"C\":\n                            /* default column format */ C = parseInt(record[rj].slice(1)) - 1;\n                            if (!colinfo[C]) colinfo[C] = {};\n                            break;\n                        case \"R\":\n                            /* row properties */ R = parseInt(record[rj].slice(1)) - 1;\n                            if (!rowinfo[R]) rowinfo[R] = {};\n                            if (Mval > 0) {\n                                rowinfo[R].hpt = Mval;\n                                rowinfo[R].hpx = pt2px(Mval);\n                            } else if (Mval === 0) rowinfo[R].hidden = true;\n                            break;\n                        default:\n                            if (opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n                    }\n                    if (F_seen < 1) next_cell_format = null;\n                    break;\n                default:\n                    if (opts && opts.WTF) throw new Error(\"SYLK bad record \" + rstr);\n            }\n        }\n        if (rowinfo.length > 0) sht[\"!rows\"] = rowinfo;\n        if (colinfo.length > 0) sht[\"!cols\"] = colinfo;\n        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n        return [\n            arr,\n            sht\n        ];\n    }\n    function sylk_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {\n        var aoasht = sylk_to_aoa(d, opts);\n        var aoa = aoasht[0], ws = aoasht[1];\n        var o = aoa_to_sheet(aoa, opts);\n        keys(ws).forEach(function(k) {\n            o[k] = ws[k];\n        });\n        return o;\n    }\n    function sylk_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {\n        return sheet_to_workbook(sylk_to_sheet(d, opts), opts);\n    }\n    function write_ws_cell_sylk(cell /*:Cell*/ , ws /*:Worksheet*/ , R /*:number*/ , C /*:number*/  /*::, opts*/ ) /*:string*/ {\n        var o = \"C;Y\" + (R + 1) + \";X\" + (C + 1) + \";K\";\n        switch(cell.t){\n            case \"n\":\n                o += cell.v || 0;\n                if (cell.f && !cell.F) o += \";E\" + a1_to_rc(cell.f, {\n                    r: R,\n                    c: C\n                });\n                break;\n            case \"b\":\n                o += cell.v ? \"TRUE\" : \"FALSE\";\n                break;\n            case \"e\":\n                o += cell.w || cell.v;\n                break;\n            case \"d\":\n                o += '\"' + (cell.w || cell.v) + '\"';\n                break;\n            case \"s\":\n                o += '\"' + cell.v.replace(/\"/g, \"\").replace(/;/g, \";;\") + '\"';\n                break;\n        }\n        return o;\n    }\n    function write_ws_cols_sylk(out, cols) {\n        cols.forEach(function(col, i) {\n            var rec = \"F;W\" + (i + 1) + \" \" + (i + 1) + \" \";\n            if (col.hidden) rec += \"0\";\n            else {\n                if (typeof col.width == \"number\" && !col.wpx) col.wpx = width2px(col.width);\n                if (typeof col.wpx == \"number\" && !col.wch) col.wch = px2char(col.wpx);\n                if (typeof col.wch == \"number\") rec += Math.round(col.wch);\n            }\n            if (rec.charAt(rec.length - 1) != \" \") out.push(rec);\n        });\n    }\n    function write_ws_rows_sylk(out /*:Array<string>*/ , rows /*:Array<RowInfo>*/ ) {\n        rows.forEach(function(row, i) {\n            var rec = \"F;\";\n            if (row.hidden) rec += \"M0;\";\n            else if (row.hpt) rec += \"M\" + 20 * row.hpt + \";\";\n            else if (row.hpx) rec += \"M\" + 20 * px2pt(row.hpx) + \";\";\n            if (rec.length > 2) out.push(rec + \"R\" + (i + 1));\n        });\n    }\n    function sheet_to_sylk(ws /*:Worksheet*/ , opts /*:?any*/ ) /*:string*/ {\n        var preamble /*:Array<string>*/  = [\n            \"ID;PWXL;N;E\"\n        ], o /*:Array<string>*/  = [];\n        var r = safe_decode_range(ws[\"!ref\"]), cell /*:Cell*/ ;\n        var dense = Array.isArray(ws);\n        var RS = \"\\r\\n\";\n        preamble.push(\"P;PGeneral\");\n        preamble.push(\"F;P0;DG0G8;M255\");\n        if (ws[\"!cols\"]) write_ws_cols_sylk(preamble, ws[\"!cols\"]);\n        if (ws[\"!rows\"]) write_ws_rows_sylk(preamble, ws[\"!rows\"]);\n        preamble.push(\"B;Y\" + (r.e.r - r.s.r + 1) + \";X\" + (r.e.c - r.s.c + 1) + \";D\" + [\n            r.s.c,\n            r.s.r,\n            r.e.c,\n            r.e.r\n        ].join(\" \"));\n        for(var R = r.s.r; R <= r.e.r; ++R){\n            for(var C = r.s.c; C <= r.e.c; ++C){\n                var coord = encode_cell({\n                    r: R,\n                    c: C\n                });\n                cell = dense ? (ws[R] || [])[C] : ws[coord];\n                if (!cell || cell.v == null && (!cell.f || cell.F)) continue;\n                o.push(write_ws_cell_sylk(cell, ws, R, C, opts));\n            }\n        }\n        return preamble.join(RS) + RS + o.join(RS) + RS + \"E\" + RS;\n    }\n    return {\n        to_workbook: sylk_to_workbook,\n        to_sheet: sylk_to_sheet,\n        from_sheet: sheet_to_sylk\n    };\n}();\nvar DIF = /*#__PURE__*/ function() {\n    function dif_to_aoa(d /*:RawData*/ , opts) /*:AOA*/ {\n        switch(opts.type){\n            case \"base64\":\n                return dif_to_aoa_str(Base64_decode(d), opts);\n            case \"binary\":\n                return dif_to_aoa_str(d, opts);\n            case \"buffer\":\n                return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString(\"binary\") : a2s(d), opts);\n            case \"array\":\n                return dif_to_aoa_str(cc2str(d), opts);\n        }\n        throw new Error(\"Unrecognized type \" + opts.type);\n    }\n    function dif_to_aoa_str(str /*:string*/ , opts) /*:AOA*/ {\n        var records = str.split(\"\\n\"), R = -1, C = -1, ri = 0, arr /*:AOA*/  = [];\n        for(; ri !== records.length; ++ri){\n            if (records[ri].trim() === \"BOT\") {\n                arr[++R] = [];\n                C = 0;\n                continue;\n            }\n            if (R < 0) continue;\n            var metadata = records[ri].trim().split(\",\");\n            var type = metadata[0], value = metadata[1];\n            ++ri;\n            var data = records[ri] || \"\";\n            while((data.match(/[\"]/g) || []).length & 1 && ri < records.length - 1)data += \"\\n\" + records[++ri];\n            data = data.trim();\n            switch(+type){\n                case -1:\n                    if (data === \"BOT\") {\n                        arr[++R] = [];\n                        C = 0;\n                        continue;\n                    } else if (data !== \"EOD\") throw new Error(\"Unrecognized DIF special command \" + data);\n                    break;\n                case 0:\n                    if (data === \"TRUE\") arr[R][C] = true;\n                    else if (data === \"FALSE\") arr[R][C] = false;\n                    else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);\n                    else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);\n                    else arr[R][C] = value;\n                    ++C;\n                    break;\n                case 1:\n                    data = data.slice(1, data.length - 1);\n                    data = data.replace(/\"\"/g, '\"');\n                    if (DIF_XL && data && data.match(/^=\".*\"$/)) data = data.slice(2, -1);\n                    arr[R][C++] = data !== \"\" ? data : null;\n                    break;\n            }\n            if (data === \"EOD\") break;\n        }\n        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n        return arr;\n    }\n    function dif_to_sheet(str /*:string*/ , opts) /*:Worksheet*/ {\n        return aoa_to_sheet(dif_to_aoa(str, opts), opts);\n    }\n    function dif_to_workbook(str /*:string*/ , opts) /*:Workbook*/ {\n        return sheet_to_workbook(dif_to_sheet(str, opts), opts);\n    }\n    var sheet_to_dif = /*#__PURE__*/ function() {\n        var push_field = function pf(o /*:Array<string>*/ , topic /*:string*/ , v /*:number*/ , n /*:number*/ , s /*:string*/ ) {\n            o.push(topic);\n            o.push(v + \",\" + n);\n            o.push('\"' + s.replace(/\"/g, '\"\"') + '\"');\n        };\n        var push_value = function po(o /*:Array<string>*/ , type /*:number*/ , v /*:any*/ , s /*:string*/ ) {\n            o.push(type + \",\" + v);\n            o.push(type == 1 ? '\"' + s.replace(/\"/g, '\"\"') + '\"' : s);\n        };\n        return function sheet_to_dif(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {\n            var o /*:Array<string>*/  = [];\n            var r = safe_decode_range(ws[\"!ref\"]), cell /*:Cell*/ ;\n            var dense = Array.isArray(ws);\n            push_field(o, \"TABLE\", 0, 1, \"sheetjs\");\n            push_field(o, \"VECTORS\", 0, r.e.r - r.s.r + 1, \"\");\n            push_field(o, \"TUPLES\", 0, r.e.c - r.s.c + 1, \"\");\n            push_field(o, \"DATA\", 0, 0, \"\");\n            for(var R = r.s.r; R <= r.e.r; ++R){\n                push_value(o, -1, 0, \"BOT\");\n                for(var C = r.s.c; C <= r.e.c; ++C){\n                    var coord = encode_cell({\n                        r: R,\n                        c: C\n                    });\n                    cell = dense ? (ws[R] || [])[C] : ws[coord];\n                    if (!cell) {\n                        push_value(o, 1, 0, \"\");\n                        continue;\n                    }\n                    switch(cell.t){\n                        case \"n\":\n                            var val = DIF_XL ? cell.w : cell.v;\n                            if (!val && cell.v != null) val = cell.v;\n                            if (val == null) {\n                                if (DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, \"=\" + cell.f);\n                                else push_value(o, 1, 0, \"\");\n                            } else push_value(o, 0, val, \"V\");\n                            break;\n                        case \"b\":\n                            push_value(o, 0, cell.v ? 1 : 0, cell.v ? \"TRUE\" : \"FALSE\");\n                            break;\n                        case \"s\":\n                            push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '=\"' + cell.v + '\"');\n                            break;\n                        case \"d\":\n                            if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));\n                            if (DIF_XL) push_value(o, 0, cell.w, \"V\");\n                            else push_value(o, 1, 0, cell.w);\n                            break;\n                        default:\n                            push_value(o, 1, 0, \"\");\n                    }\n                }\n            }\n            push_value(o, -1, 0, \"EOD\");\n            var RS = \"\\r\\n\";\n            var oo = o.join(RS);\n            //while((oo.length & 0x7F) != 0) oo += \"\\0\";\n            return oo;\n        };\n    }();\n    return {\n        to_workbook: dif_to_workbook,\n        to_sheet: dif_to_sheet,\n        from_sheet: sheet_to_dif\n    };\n}();\nvar ETH = /*#__PURE__*/ function() {\n    function decode(s /*:string*/ ) /*:string*/ {\n        return s.replace(/\\\\b/g, \"\\\\\").replace(/\\\\c/g, \":\").replace(/\\\\n/g, \"\\n\");\n    }\n    function encode(s /*:string*/ ) /*:string*/ {\n        return s.replace(/\\\\/g, \"\\\\b\").replace(/:/g, \"\\\\c\").replace(/\\n/g, \"\\\\n\");\n    }\n    function eth_to_aoa(str /*:string*/ , opts) /*:AOA*/ {\n        var records = str.split(\"\\n\"), R = -1, C = -1, ri = 0, arr /*:AOA*/  = [];\n        for(; ri !== records.length; ++ri){\n            var record = records[ri].trim().split(\":\");\n            if (record[0] !== \"cell\") continue;\n            var addr = decode_cell(record[1]);\n            if (arr.length <= addr.r) {\n                for(R = arr.length; R <= addr.r; ++R)if (!arr[R]) arr[R] = [];\n            }\n            R = addr.r;\n            C = addr.c;\n            switch(record[2]){\n                case \"t\":\n                    arr[R][C] = decode(record[3]);\n                    break;\n                case \"v\":\n                    arr[R][C] = +record[3];\n                    break;\n                case \"vtf\":\n                    var _f = record[record.length - 1];\n                /* falls through */ case \"vtc\":\n                    switch(record[3]){\n                        case \"nl\":\n                            arr[R][C] = +record[4] ? true : false;\n                            break;\n                        default:\n                            arr[R][C] = +record[4];\n                            break;\n                    }\n                    if (record[2] == \"vtf\") arr[R][C] = [\n                        arr[R][C],\n                        _f\n                    ];\n            }\n        }\n        if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);\n        return arr;\n    }\n    function eth_to_sheet(d /*:string*/ , opts) /*:Worksheet*/ {\n        return aoa_to_sheet(eth_to_aoa(d, opts), opts);\n    }\n    function eth_to_workbook(d /*:string*/ , opts) /*:Workbook*/ {\n        return sheet_to_workbook(eth_to_sheet(d, opts), opts);\n    }\n    var header = [\n        \"socialcalc:version:1.5\",\n        \"MIME-Version: 1.0\",\n        \"Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave\"\n    ].join(\"\\n\");\n    var sep = [\n        \"--SocialCalcSpreadsheetControlSave\",\n        \"Content-type: text/plain; charset=UTF-8\"\n    ].join(\"\\n\") + \"\\n\";\n    /* TODO: the other parts */ var meta = [\n        \"# SocialCalc Spreadsheet Control Save\",\n        \"part:sheet\"\n    ].join(\"\\n\");\n    var end = \"--SocialCalcSpreadsheetControlSave--\";\n    function sheet_to_eth_data(ws /*:Worksheet*/ ) /*:string*/ {\n        if (!ws || !ws[\"!ref\"]) return \"\";\n        var o /*:Array<string>*/  = [], oo /*:Array<string>*/  = [], cell, coord = \"\";\n        var r = decode_range(ws[\"!ref\"]);\n        var dense = Array.isArray(ws);\n        for(var R = r.s.r; R <= r.e.r; ++R){\n            for(var C = r.s.c; C <= r.e.c; ++C){\n                coord = encode_cell({\n                    r: R,\n                    c: C\n                });\n                cell = dense ? (ws[R] || [])[C] : ws[coord];\n                if (!cell || cell.v == null || cell.t === \"z\") continue;\n                oo = [\n                    \"cell\",\n                    coord,\n                    \"t\"\n                ];\n                switch(cell.t){\n                    case \"s\":\n                    case \"str\":\n                        oo.push(encode(cell.v));\n                        break;\n                    case \"n\":\n                        if (!cell.f) {\n                            oo[2] = \"v\";\n                            oo[3] = cell.v;\n                        } else {\n                            oo[2] = \"vtf\";\n                            oo[3] = \"n\";\n                            oo[4] = cell.v;\n                            oo[5] = encode(cell.f);\n                        }\n                        break;\n                    case \"b\":\n                        oo[2] = \"vt\" + (cell.f ? \"f\" : \"c\");\n                        oo[3] = \"nl\";\n                        oo[4] = cell.v ? \"1\" : \"0\";\n                        oo[5] = encode(cell.f || (cell.v ? \"TRUE\" : \"FALSE\"));\n                        break;\n                    case \"d\":\n                        var t = datenum(parseDate(cell.v));\n                        oo[2] = \"vtc\";\n                        oo[3] = \"nd\";\n                        oo[4] = \"\" + t;\n                        oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);\n                        break;\n                    case \"e\":\n                        continue;\n                }\n                o.push(oo.join(\":\"));\n            }\n        }\n        o.push(\"sheet:c:\" + (r.e.c - r.s.c + 1) + \":r:\" + (r.e.r - r.s.r + 1) + \":tvf:1\");\n        o.push(\"valueformat:1:text-wiki\");\n        //o.push(\"copiedfrom:\" + ws['!ref']); // clipboard only\n        return o.join(\"\\n\");\n    }\n    function sheet_to_eth(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {\n        return [\n            header,\n            sep,\n            meta,\n            sep,\n            sheet_to_eth_data(ws),\n            end\n        ].join(\"\\n\");\n    // return [\"version:1.5\", sheet_to_eth_data(ws)].join(\"\\n\"); // clipboard form\n    }\n    return {\n        to_workbook: eth_to_workbook,\n        to_sheet: eth_to_sheet,\n        from_sheet: sheet_to_eth\n    };\n}();\nvar PRN = /*#__PURE__*/ function() {\n    function set_text_arr(data /*:string*/ , arr /*:AOA*/ , R /*:number*/ , C /*:number*/ , o /*:any*/ ) {\n        if (o.raw) arr[R][C] = data;\n        else if (data === \"\") {} else if (data === \"TRUE\") arr[R][C] = true;\n        else if (data === \"FALSE\") arr[R][C] = false;\n        else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);\n        else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);\n        else arr[R][C] = data;\n    }\n    function prn_to_aoa_str(f /*:string*/ , opts) /*:AOA*/ {\n        var o = opts || {};\n        var arr /*:AOA*/  = [];\n        if (!f || f.length === 0) return arr;\n        var lines = f.split(/[\\r\\n]/);\n        var L = lines.length - 1;\n        while(L >= 0 && lines[L].length === 0)--L;\n        var start = 10, idx = 0;\n        var R = 0;\n        for(; R <= L; ++R){\n            idx = lines[R].indexOf(\" \");\n            if (idx == -1) idx = lines[R].length;\n            else idx++;\n            start = Math.max(start, idx);\n        }\n        for(R = 0; R <= L; ++R){\n            arr[R] = [];\n            /* TODO: confirm that widths are always 10 */ var C = 0;\n            set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);\n            for(C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);\n        }\n        if (o.sheetRows) arr = arr.slice(0, o.sheetRows);\n        return arr;\n    }\n    // List of accepted CSV separators\n    var guess_seps = {\n        /*::[*/ 0x2C: \",\",\n        /*::[*/ 0x09: \"\t\",\n        /*::[*/ 0x3B: \";\",\n        /*::[*/ 0x7C: \"|\"\n    };\n    // CSV separator weights to be used in case of equal numbers\n    var guess_sep_weights = {\n        /*::[*/ 0x2C: 3,\n        /*::[*/ 0x09: 2,\n        /*::[*/ 0x3B: 1,\n        /*::[*/ 0x7C: 0\n    };\n    function guess_sep(str) {\n        var cnt = {}, instr = false, end = 0, cc = 0;\n        for(; end < str.length; ++end){\n            if ((cc = str.charCodeAt(end)) == 0x22) instr = !instr;\n            else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;\n        }\n        cc = [];\n        for(end in cnt)if (Object.prototype.hasOwnProperty.call(cnt, end)) {\n            cc.push([\n                cnt[end],\n                end\n            ]);\n        }\n        if (!cc.length) {\n            cnt = guess_sep_weights;\n            for(end in cnt)if (Object.prototype.hasOwnProperty.call(cnt, end)) {\n                cc.push([\n                    cnt[end],\n                    end\n                ]);\n            }\n        }\n        cc.sort(function(a, b) {\n            return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];\n        });\n        return guess_seps[cc.pop()[1]] || 0x2C;\n    }\n    function dsv_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {\n        var o = opts || {};\n        var sep = \"\";\n        if (DENSE != null && o.dense == null) o.dense = DENSE;\n        var ws /*:Worksheet*/  = o.dense ? [] : {} /*:any*/ ;\n        var range /*:Range*/  = {\n            s: {\n                c: 0,\n                r: 0\n            },\n            e: {\n                c: 0,\n                r: 0\n            }\n        } /*:any*/ ;\n        if (str.slice(0, 4) == \"sep=\") {\n            // If the line ends in \\r\\n\n            if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {\n                sep = str.charAt(4);\n                str = str.slice(7);\n            } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {\n                sep = str.charAt(4);\n                str = str.slice(6);\n            } else sep = guess_sep(str.slice(0, 1024));\n        } else if (o && o.FS) sep = o.FS;\n        else sep = guess_sep(str.slice(0, 1024));\n        var R = 0, C = 0, v = 0;\n        var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);\n        str = str.replace(/\\r\\n/mg, \"\\n\");\n        var _re /*:?RegExp*/  = o.dateNF != null ? dateNF_regex(o.dateNF) : null;\n        function finish_cell() {\n            var s = str.slice(start, end);\n            var cell = {} /*:any*/ ;\n            if (s.charAt(0) == '\"' && s.charAt(s.length - 1) == '\"') s = s.slice(1, -1).replace(/\"\"/g, '\"');\n            if (s.length === 0) cell.t = \"z\";\n            else if (o.raw) {\n                cell.t = \"s\";\n                cell.v = s;\n            } else if (s.trim().length === 0) {\n                cell.t = \"s\";\n                cell.v = s;\n            } else if (s.charCodeAt(0) == 0x3D) {\n                if (s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) {\n                    cell.t = \"s\";\n                    cell.v = s.slice(2, -1).replace(/\"\"/g, '\"');\n                } else if (fuzzyfmla(s)) {\n                    cell.t = \"n\";\n                    cell.f = s.slice(1);\n                } else {\n                    cell.t = \"s\";\n                    cell.v = s;\n                }\n            } else if (s == \"TRUE\") {\n                cell.t = \"b\";\n                cell.v = true;\n            } else if (s == \"FALSE\") {\n                cell.t = \"b\";\n                cell.v = false;\n            } else if (!isNaN(v = fuzzynum(s))) {\n                cell.t = \"n\";\n                if (o.cellText !== false) cell.w = s;\n                cell.v = v;\n            } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {\n                cell.z = o.dateNF || table_fmt[14];\n                var k = 0;\n                if (_re && s.match(_re)) {\n                    s = dateNF_fix(s, o.dateNF, s.match(_re) || []);\n                    k = 1;\n                }\n                if (o.cellDates) {\n                    cell.t = \"d\";\n                    cell.v = parseDate(s, k);\n                } else {\n                    cell.t = \"n\";\n                    cell.v = datenum(parseDate(s, k));\n                }\n                if (o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);\n                if (!o.cellNF) delete cell.z;\n            } else {\n                cell.t = \"s\";\n                cell.v = s;\n            }\n            if (cell.t == \"z\") {} else if (o.dense) {\n                if (!ws[R]) ws[R] = [];\n                ws[R][C] = cell;\n            } else ws[encode_cell({\n                c: C,\n                r: R\n            })] = cell;\n            start = end + 1;\n            startcc = str.charCodeAt(start);\n            if (range.e.c < C) range.e.c = C;\n            if (range.e.r < R) range.e.r = R;\n            if (cc == sepcc) ++C;\n            else {\n                C = 0;\n                ++R;\n                if (o.sheetRows && o.sheetRows <= R) return true;\n            }\n        }\n        outer: for(; end < str.length; ++end)switch(cc = str.charCodeAt(end)){\n            case 0x22:\n                if (startcc === 0x22) instr = !instr;\n                break;\n            case sepcc:\n            case 0x0a:\n            case 0x0d:\n                if (!instr && finish_cell()) break outer;\n                break;\n            default:\n                break;\n        }\n        if (end - start > 0) finish_cell();\n        ws[\"!ref\"] = encode_range(range);\n        return ws;\n    }\n    function prn_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {\n        if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);\n        if (opts.FS) return dsv_to_sheet_str(str, opts);\n        if (str.slice(0, 4) == \"sep=\") return dsv_to_sheet_str(str, opts);\n        if (str.indexOf(\"\t\") >= 0 || str.indexOf(\",\") >= 0 || str.indexOf(\";\") >= 0) return dsv_to_sheet_str(str, opts);\n        return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);\n    }\n    function prn_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {\n        var str = \"\", bytes = opts.type == \"string\" ? [\n            0,\n            0,\n            0,\n            0\n        ] : firstbyte(d, opts);\n        switch(opts.type){\n            case \"base64\":\n                str = Base64_decode(d);\n                break;\n            case \"binary\":\n                str = d;\n                break;\n            case \"buffer\":\n                if (opts.codepage == 65001) str = d.toString(\"utf8\"); // TODO: test if buf\n                else if (opts.codepage && typeof $cptable !== \"undefined\") str = $cptable.utils.decode(opts.codepage, d);\n                else str = has_buf && Buffer.isBuffer(d) ? d.toString(\"binary\") : a2s(d);\n                break;\n            case \"array\":\n                str = cc2str(d);\n                break;\n            case \"string\":\n                str = d;\n                break;\n            default:\n                throw new Error(\"Unrecognized type \" + opts.type);\n        }\n        if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));\n        else if (opts.type != \"string\" && opts.type != \"buffer\" && opts.codepage == 65001) str = utf8read(str);\n        else if (opts.type == \"binary\" && typeof $cptable !== \"undefined\" && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));\n        if (str.slice(0, 19) == \"socialcalc:version:\") return ETH.to_sheet(opts.type == \"string\" ? str : utf8read(str), opts);\n        return prn_to_sheet_str(str, opts);\n    }\n    function prn_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {\n        return sheet_to_workbook(prn_to_sheet(d, opts), opts);\n    }\n    function sheet_to_prn(ws /*:Worksheet*/  /*::, opts:?any*/ ) /*:string*/ {\n        var o /*:Array<string>*/  = [];\n        var r = safe_decode_range(ws[\"!ref\"]), cell /*:Cell*/ ;\n        var dense = Array.isArray(ws);\n        for(var R = r.s.r; R <= r.e.r; ++R){\n            var oo /*:Array<string>*/  = [];\n            for(var C = r.s.c; C <= r.e.c; ++C){\n                var coord = encode_cell({\n                    r: R,\n                    c: C\n                });\n                cell = dense ? (ws[R] || [])[C] : ws[coord];\n                if (!cell || cell.v == null) {\n                    oo.push(\"          \");\n                    continue;\n                }\n                var w = (cell.w || (format_cell(cell), cell.w) || \"\").slice(0, 10);\n                while(w.length < 10)w += \" \";\n                oo.push(w + (C === 0 ? \" \" : \"\"));\n            }\n            o.push(oo.join(\"\"));\n        }\n        return o.join(\"\\n\");\n    }\n    return {\n        to_workbook: prn_to_workbook,\n        to_sheet: prn_to_sheet,\n        from_sheet: sheet_to_prn\n    };\n}();\n/* Excel defaults to SYLK but warns if data is not valid */ function read_wb_ID(d, opts) {\n    var o = opts || {}, OLD_WTF = !!o.WTF;\n    o.WTF = true;\n    try {\n        var out = SYLK.to_workbook(d, o);\n        o.WTF = OLD_WTF;\n        return out;\n    } catch (e) {\n        o.WTF = OLD_WTF;\n        if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;\n        return PRN.to_workbook(d, opts);\n    }\n}\nvar WK_ = /*#__PURE__*/ function() {\n    function lotushopper(data, cb /*:RecordHopperCB*/ , opts /*:any*/ ) {\n        if (!data) return;\n        prep_blob(data, data.l || 0);\n        var Enum = opts.Enum || WK1Enum;\n        while(data.l < data.length){\n            var RT = data.read_shift(2);\n            var R = Enum[RT] || Enum[0xFFFF];\n            var length = data.read_shift(2);\n            var tgt = data.l + length;\n            var d = R.f && R.f(data, length, opts);\n            data.l = tgt;\n            if (cb(d, R, RT)) return;\n        }\n    }\n    function lotus_to_workbook(d /*:RawData*/ , opts) {\n        switch(opts.type){\n            case \"base64\":\n                return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);\n            case \"binary\":\n                return lotus_to_workbook_buf(s2a(d), opts);\n            case \"buffer\":\n            case \"array\":\n                return lotus_to_workbook_buf(d, opts);\n        }\n        throw \"Unsupported type \" + opts.type;\n    }\n    function lotus_to_workbook_buf(d, opts) /*:Workbook*/ {\n        if (!d) return d;\n        var o = opts || {};\n        if (DENSE != null && o.dense == null) o.dense = DENSE;\n        var s /*:Worksheet*/  = o.dense ? [] : {}, n = \"Sheet1\", next_n = \"\", sidx = 0;\n        var sheets = {}, snames = [], realnames = [];\n        var refguess = {\n            s: {\n                r: 0,\n                c: 0\n            },\n            e: {\n                r: 0,\n                c: 0\n            }\n        };\n        var sheetRows = o.sheetRows || 0;\n        if (d[2] == 0x00) {\n            if (d[3] == 0x08 || d[3] == 0x09) {\n                if (d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error(\"Unsupported Works 3 for Mac file\");\n            }\n        }\n        if (d[2] == 0x02) {\n            o.Enum = WK1Enum;\n            lotushopper(d, function(val, R, RT) {\n                switch(RT){\n                    case 0x00:\n                        /* BOF */ o.vers = val;\n                        if (val >= 0x1000) o.qpro = true;\n                        break;\n                    case 0x06:\n                        refguess = val;\n                        break; /* RANGE */ \n                    case 0xCC:\n                        if (val) next_n = val;\n                        break; /* SHEETNAMECS */ \n                    case 0xDE:\n                        next_n = val;\n                        break; /* SHEETNAMELP */ \n                    case 0x0F:\n                    /* LABEL */ case 0x33:\n                        /* STRING */ if (!o.qpro) val[1].v = val[1].v.slice(1);\n                    /* falls through */ case 0x0D:\n                    /* INTEGER */ case 0x0E:\n                    /* NUMBER */ case 0x10:\n                        /* FORMULA */ /* TODO: actual translation of the format code */ if (RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {\n                            val[1].z = o.dateNF || table_fmt[14];\n                            if (o.cellDates) {\n                                val[1].t = \"d\";\n                                val[1].v = numdate(val[1].v);\n                            }\n                        }\n                        if (o.qpro) {\n                            if (val[3] > sidx) {\n                                s[\"!ref\"] = encode_range(refguess);\n                                sheets[n] = s;\n                                snames.push(n);\n                                s = o.dense ? [] : {};\n                                refguess = {\n                                    s: {\n                                        r: 0,\n                                        c: 0\n                                    },\n                                    e: {\n                                        r: 0,\n                                        c: 0\n                                    }\n                                };\n                                sidx = val[3];\n                                n = next_n || \"Sheet\" + (sidx + 1);\n                                next_n = \"\";\n                            }\n                        }\n                        var tmpcell = o.dense ? (s[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];\n                        if (tmpcell) {\n                            tmpcell.t = val[1].t;\n                            tmpcell.v = val[1].v;\n                            if (val[1].z != null) tmpcell.z = val[1].z;\n                            if (val[1].f != null) tmpcell.f = val[1].f;\n                            break;\n                        }\n                        if (o.dense) {\n                            if (!s[val[0].r]) s[val[0].r] = [];\n                            s[val[0].r][val[0].c] = val[1];\n                        } else s[encode_cell(val[0])] = val[1];\n                        break;\n                    default:\n                }\n            }, o);\n        } else if (d[2] == 0x1A || d[2] == 0x0E) {\n            o.Enum = WK3Enum;\n            if (d[2] == 0x0E) {\n                o.qpro = true;\n                d.l = 0;\n            }\n            lotushopper(d, function(val, R, RT) {\n                switch(RT){\n                    case 0xCC:\n                        n = val;\n                        break; /* SHEETNAMECS */ \n                    case 0x16:\n                        /* LABEL16 */ val[1].v = val[1].v.slice(1);\n                    /* falls through */ case 0x17:\n                    /* NUMBER17 */ case 0x18:\n                    /* NUMBER18 */ case 0x19:\n                    /* FORMULA19 */ case 0x25:\n                    /* NUMBER25 */ case 0x27:\n                    /* NUMBER27 */ case 0x28:\n                        /* FORMULA28 */ if (val[3] > sidx) {\n                            s[\"!ref\"] = encode_range(refguess);\n                            sheets[n] = s;\n                            snames.push(n);\n                            s = o.dense ? [] : {};\n                            refguess = {\n                                s: {\n                                    r: 0,\n                                    c: 0\n                                },\n                                e: {\n                                    r: 0,\n                                    c: 0\n                                }\n                            };\n                            sidx = val[3];\n                            n = \"Sheet\" + (sidx + 1);\n                        }\n                        if (sheetRows > 0 && val[0].r >= sheetRows) break;\n                        if (o.dense) {\n                            if (!s[val[0].r]) s[val[0].r] = [];\n                            s[val[0].r][val[0].c] = val[1];\n                        } else s[encode_cell(val[0])] = val[1];\n                        if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;\n                        if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;\n                        break;\n                    case 0x1B:\n                        /* XFORMAT */ if (val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];\n                        break;\n                    case 0x0601:\n                        /* SHEETINFOQP */ realnames[val[0]] = val[1];\n                        if (val[0] == sidx) n = val[1];\n                        break;\n                    default:\n                        break;\n                }\n            }, o);\n        } else throw new Error(\"Unrecognized LOTUS BOF \" + d[2]);\n        s[\"!ref\"] = encode_range(refguess);\n        sheets[next_n || n] = s;\n        snames.push(next_n || n);\n        if (!realnames.length) return {\n            SheetNames: snames,\n            Sheets: sheets\n        };\n        var osheets = {}, rnames = [];\n        /* TODO: verify no collisions */ for(var i = 0; i < realnames.length; ++i)if (sheets[snames[i]]) {\n            rnames.push(realnames[i] || snames[i]);\n            osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];\n        } else {\n            rnames.push(realnames[i]);\n            osheets[realnames[i]] = {\n                \"!ref\": \"A1\"\n            };\n        }\n        return {\n            SheetNames: rnames,\n            Sheets: osheets\n        };\n    }\n    function sheet_to_wk1(ws /*:Worksheet*/ , opts /*:WriteOpts*/ ) {\n        var o = opts || {};\n        if (+o.codepage >= 0) set_cp(+o.codepage);\n        if (o.type == \"string\") throw new Error(\"Cannot write WK1 to JS string\");\n        var ba = buf_array();\n        var range = safe_decode_range(ws[\"!ref\"]);\n        var dense = Array.isArray(ws);\n        var cols = [];\n        write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));\n        write_biff_rec(ba, 0x06, write_RANGE(range));\n        var max_R = Math.min(range.e.r, 8191);\n        for(var R = range.s.r; R <= max_R; ++R){\n            var rr = encode_row(R);\n            for(var C = range.s.c; C <= range.e.c; ++C){\n                if (R === range.s.r) cols[C] = encode_col(C);\n                var ref = cols[C] + rr;\n                var cell = dense ? (ws[R] || [])[C] : ws[ref];\n                if (!cell || cell.t == \"z\") continue;\n                /* TODO: formula records */ if (cell.t == \"n\") {\n                    if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));\n                    else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));\n                } else {\n                    var str = format_cell(cell);\n                    write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));\n                }\n            }\n        }\n        write_biff_rec(ba, 0x01);\n        return ba.end();\n    }\n    function book_to_wk3(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {\n        var o = opts || {};\n        if (+o.codepage >= 0) set_cp(+o.codepage);\n        if (o.type == \"string\") throw new Error(\"Cannot write WK3 to JS string\");\n        var ba = buf_array();\n        write_biff_rec(ba, 0x00, write_BOF_WK3(wb));\n        for(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i)if ((wb.Sheets[wb.SheetNames[i]] || {})[\"!ref\"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));\n        var wsidx = 0;\n        for(i = 0; i < wb.SheetNames.length; ++i){\n            var ws = wb.Sheets[wb.SheetNames[i]];\n            if (!ws || !ws[\"!ref\"]) continue;\n            var range = safe_decode_range(ws[\"!ref\"]);\n            var dense = Array.isArray(ws);\n            var cols = [];\n            var max_R = Math.min(range.e.r, 8191);\n            for(var R = range.s.r; R <= max_R; ++R){\n                var rr = encode_row(R);\n                for(var C = range.s.c; C <= range.e.c; ++C){\n                    if (R === range.s.r) cols[C] = encode_col(C);\n                    var ref = cols[C] + rr;\n                    var cell = dense ? (ws[R] || [])[C] : ws[ref];\n                    if (!cell || cell.t == \"z\") continue;\n                    /* TODO: FORMULA19 NUMBER18 records */ if (cell.t == \"n\") {\n                        write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));\n                    } else {\n                        var str = format_cell(cell);\n                        /* TODO: max len? */ write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));\n                    }\n                }\n            }\n            ++wsidx;\n        }\n        write_biff_rec(ba, 0x01);\n        return ba.end();\n    }\n    function write_BOF_WK1(v /*:number*/ ) {\n        var out = new_buf(2);\n        out.write_shift(2, v);\n        return out;\n    }\n    function write_BOF_WK3(wb /*:Workbook*/ ) {\n        var out = new_buf(26);\n        out.write_shift(2, 0x1000);\n        out.write_shift(2, 0x0004);\n        out.write_shift(4, 0x0000);\n        var rows = 0, cols = 0, wscnt = 0;\n        for(var i = 0; i < wb.SheetNames.length; ++i){\n            var name = wb.SheetNames[i];\n            var ws = wb.Sheets[name];\n            if (!ws || !ws[\"!ref\"]) continue;\n            ++wscnt;\n            var range = decode_range(ws[\"!ref\"]);\n            if (rows < range.e.r) rows = range.e.r;\n            if (cols < range.e.c) cols = range.e.c;\n        }\n        if (rows > 8191) rows = 8191;\n        out.write_shift(2, rows);\n        out.write_shift(1, wscnt);\n        out.write_shift(1, cols);\n        out.write_shift(2, 0x00);\n        out.write_shift(2, 0x00);\n        out.write_shift(1, 0x01);\n        out.write_shift(1, 0x02);\n        out.write_shift(4, 0);\n        out.write_shift(4, 0);\n        return out;\n    }\n    function parse_RANGE(blob, length, opts) {\n        var o = {\n            s: {\n                c: 0,\n                r: 0\n            },\n            e: {\n                c: 0,\n                r: 0\n            }\n        };\n        if (length == 8 && opts.qpro) {\n            o.s.c = blob.read_shift(1);\n            blob.l++;\n            o.s.r = blob.read_shift(2);\n            o.e.c = blob.read_shift(1);\n            blob.l++;\n            o.e.r = blob.read_shift(2);\n            return o;\n        }\n        o.s.c = blob.read_shift(2);\n        o.s.r = blob.read_shift(2);\n        if (length == 12 && opts.qpro) blob.l += 2;\n        o.e.c = blob.read_shift(2);\n        o.e.r = blob.read_shift(2);\n        if (length == 12 && opts.qpro) blob.l += 2;\n        if (o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;\n        return o;\n    }\n    function write_RANGE(range) {\n        var out = new_buf(8);\n        out.write_shift(2, range.s.c);\n        out.write_shift(2, range.s.r);\n        out.write_shift(2, range.e.c);\n        out.write_shift(2, range.e.r);\n        return out;\n    }\n    function parse_cell(blob, length, opts) {\n        var o = [\n            {\n                c: 0,\n                r: 0\n            },\n            {\n                t: \"n\",\n                v: 0\n            },\n            0,\n            0\n        ];\n        if (opts.qpro && opts.vers != 0x5120) {\n            o[0].c = blob.read_shift(1);\n            o[3] = blob.read_shift(1);\n            o[0].r = blob.read_shift(2);\n            blob.l += 2;\n        } else {\n            o[2] = blob.read_shift(1);\n            o[0].c = blob.read_shift(2);\n            o[0].r = blob.read_shift(2);\n        }\n        return o;\n    }\n    function parse_LABEL(blob, length, opts) {\n        var tgt = blob.l + length;\n        var o = parse_cell(blob, length, opts);\n        o[1].t = \"s\";\n        if (opts.vers == 0x5120) {\n            blob.l++;\n            var len = blob.read_shift(1);\n            o[1].v = blob.read_shift(len, \"utf8\");\n            return o;\n        }\n        if (opts.qpro) blob.l++;\n        o[1].v = blob.read_shift(tgt - blob.l, \"cstr\");\n        return o;\n    }\n    function write_LABEL(R, C, s) {\n        /* TODO: encoding */ var o = new_buf(7 + s.length);\n        o.write_shift(1, 0xFF);\n        o.write_shift(2, C);\n        o.write_shift(2, R);\n        o.write_shift(1, 0x27); // ??\n        for(var i = 0; i < o.length; ++i){\n            var cc = s.charCodeAt(i);\n            o.write_shift(1, cc >= 0x80 ? 0x5F : cc);\n        }\n        o.write_shift(1, 0);\n        return o;\n    }\n    function parse_INTEGER(blob, length, opts) {\n        var o = parse_cell(blob, length, opts);\n        o[1].v = blob.read_shift(2, \"i\");\n        return o;\n    }\n    function write_INTEGER(R, C, v) {\n        var o = new_buf(7);\n        o.write_shift(1, 0xFF);\n        o.write_shift(2, C);\n        o.write_shift(2, R);\n        o.write_shift(2, v, \"i\");\n        return o;\n    }\n    function parse_NUMBER(blob, length, opts) {\n        var o = parse_cell(blob, length, opts);\n        o[1].v = blob.read_shift(8, \"f\");\n        return o;\n    }\n    function write_NUMBER(R, C, v) {\n        var o = new_buf(13);\n        o.write_shift(1, 0xFF);\n        o.write_shift(2, C);\n        o.write_shift(2, R);\n        o.write_shift(8, v, \"f\");\n        return o;\n    }\n    function parse_FORMULA(blob, length, opts) {\n        var tgt = blob.l + length;\n        var o = parse_cell(blob, length, opts);\n        /* TODO: formula */ o[1].v = blob.read_shift(8, \"f\");\n        if (opts.qpro) blob.l = tgt;\n        else {\n            var flen = blob.read_shift(2);\n            wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);\n            blob.l += flen;\n        }\n        return o;\n    }\n    function wk1_parse_rc(B, V, col) {\n        var rel = V & 0x8000;\n        V &= ~0x8000;\n        V = (rel ? B : 0) + (V >= 0x2000 ? V - 0x4000 : V);\n        return (rel ? \"\" : \"$\") + (col ? encode_col(V) : encode_row(V));\n    }\n    /* var oprec = [\n\t\t8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,\n\t\t3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8\n\t]; */ /* TODO: flesh out */ var FuncTab = {\n        0x33: [\n            \"FALSE\",\n            0\n        ],\n        0x34: [\n            \"TRUE\",\n            0\n        ],\n        0x46: [\n            \"LEN\",\n            1\n        ],\n        0x50: [\n            \"SUM\",\n            69\n        ],\n        0x51: [\n            \"AVERAGEA\",\n            69\n        ],\n        0x52: [\n            \"COUNTA\",\n            69\n        ],\n        0x53: [\n            \"MINA\",\n            69\n        ],\n        0x54: [\n            \"MAXA\",\n            69\n        ],\n        0x6F: [\n            \"T\",\n            1\n        ]\n    };\n    var BinOpTab = [\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"^\",\n        \"=\",\n        \"<>\",\n        \"<=\",\n        \">=\",\n        \"<\",\n        \">\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"&\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\" // eslint-disable-line no-mixed-spaces-and-tabs\n    ];\n    function wk1_fmla_to_csf(blob, o) {\n        prep_blob(blob, 0);\n        var out = [], argc = 0, R = \"\", C = \"\", argL = \"\", argR = \"\";\n        while(blob.l < blob.length){\n            var cc = blob[blob.l++];\n            switch(cc){\n                case 0x00:\n                    out.push(blob.read_shift(8, \"f\"));\n                    break;\n                case 0x01:\n                    {\n                        C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n                        R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n                        out.push(C + R);\n                    }\n                    break;\n                case 0x02:\n                    {\n                        var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n                        var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n                        C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);\n                        R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);\n                        out.push(c + r + \":\" + C + R);\n                    }\n                    break;\n                case 0x03:\n                    if (blob.l < blob.length) {\n                        console.error(\"WK1 premature formula end\");\n                        return;\n                    }\n                    break;\n                case 0x04:\n                    out.push(\"(\" + out.pop() + \")\");\n                    break;\n                case 0x05:\n                    out.push(blob.read_shift(2));\n                    break;\n                case 0x06:\n                    {\n                        /* TODO: text encoding */ var Z = \"\";\n                        while(cc = blob[blob.l++])Z += String.fromCharCode(cc);\n                        out.push('\"' + Z.replace(/\"/g, '\"\"') + '\"');\n                    }\n                    break;\n                case 0x08:\n                    out.push(\"-\" + out.pop());\n                    break;\n                case 0x17:\n                    out.push(\"+\" + out.pop());\n                    break;\n                case 0x16:\n                    out.push(\"NOT(\" + out.pop() + \")\");\n                    break;\n                case 0x14:\n                case 0x15:\n                    {\n                        argR = out.pop();\n                        argL = out.pop();\n                        out.push([\n                            \"AND\",\n                            \"OR\"\n                        ][cc - 0x14] + \"(\" + argL + \",\" + argR + \")\");\n                    }\n                    break;\n                default:\n                    if (cc < 0x20 && BinOpTab[cc]) {\n                        argR = out.pop();\n                        argL = out.pop();\n                        out.push(argL + BinOpTab[cc] + argR);\n                    } else if (FuncTab[cc]) {\n                        argc = FuncTab[cc][1];\n                        if (argc == 69) argc = blob[blob.l++];\n                        if (argc > out.length) {\n                            console.error(\"WK1 bad formula parse 0x\" + cc.toString(16) + \":|\" + out.join(\"|\") + \"|\");\n                            return;\n                        }\n                        var args = out.slice(-argc);\n                        out.length -= argc;\n                        out.push(FuncTab[cc][0] + \"(\" + args.join(\",\") + \")\");\n                    } else if (cc <= 0x07) return console.error(\"WK1 invalid opcode \" + cc.toString(16));\n                    else if (cc <= 0x18) return console.error(\"WK1 unsupported op \" + cc.toString(16));\n                    else if (cc <= 0x1E) return console.error(\"WK1 invalid opcode \" + cc.toString(16));\n                    else if (cc <= 0x73) return console.error(\"WK1 unsupported function opcode \" + cc.toString(16));\n                    else return console.error(\"WK1 unrecognized opcode \" + cc.toString(16));\n            }\n        }\n        if (out.length == 1) o[1].f = \"\" + out[0];\n        else console.error(\"WK1 bad formula parse |\" + out.join(\"|\") + \"|\");\n    }\n    function parse_cell_3(blob /*::, length*/ ) {\n        var o = [\n            {\n                c: 0,\n                r: 0\n            },\n            {\n                t: \"n\",\n                v: 0\n            },\n            0\n        ];\n        o[0].r = blob.read_shift(2);\n        o[3] = blob[blob.l++];\n        o[0].c = blob[blob.l++];\n        return o;\n    }\n    function parse_LABEL_16(blob, length) {\n        var o = parse_cell_3(blob, length);\n        o[1].t = \"s\";\n        o[1].v = blob.read_shift(length - 4, \"cstr\");\n        return o;\n    }\n    function write_LABEL_16(R, C, wsidx, s) {\n        /* TODO: encoding */ var o = new_buf(6 + s.length);\n        o.write_shift(2, R);\n        o.write_shift(1, wsidx);\n        o.write_shift(1, C);\n        o.write_shift(1, 0x27);\n        for(var i = 0; i < s.length; ++i){\n            var cc = s.charCodeAt(i);\n            o.write_shift(1, cc >= 0x80 ? 0x5F : cc);\n        }\n        o.write_shift(1, 0);\n        return o;\n    }\n    function parse_NUMBER_18(blob, length) {\n        var o = parse_cell_3(blob, length);\n        o[1].v = blob.read_shift(2);\n        var v = o[1].v >> 1;\n        if (o[1].v & 0x1) {\n            switch(v & 0x07){\n                case 0:\n                    v = (v >> 3) * 5000;\n                    break;\n                case 1:\n                    v = (v >> 3) * 500;\n                    break;\n                case 2:\n                    v = (v >> 3) / 20;\n                    break;\n                case 3:\n                    v = (v >> 3) / 200;\n                    break;\n                case 4:\n                    v = (v >> 3) / 2000;\n                    break;\n                case 5:\n                    v = (v >> 3) / 20000;\n                    break;\n                case 6:\n                    v = (v >> 3) / 16;\n                    break;\n                case 7:\n                    v = (v >> 3) / 64;\n                    break;\n            }\n        }\n        o[1].v = v;\n        return o;\n    }\n    function parse_NUMBER_17(blob, length) {\n        var o = parse_cell_3(blob, length);\n        var v1 = blob.read_shift(4);\n        var v2 = blob.read_shift(4);\n        var e = blob.read_shift(2);\n        if (e == 0xFFFF) {\n            if (v1 === 0 && v2 === 0xC0000000) {\n                o[1].t = \"e\";\n                o[1].v = 0x0F;\n            } else if (v1 === 0 && v2 === 0xD0000000) {\n                o[1].t = \"e\";\n                o[1].v = 0x2A;\n            } else o[1].v = 0;\n            return o;\n        }\n        var s = e & 0x8000;\n        e = (e & 0x7FFF) - 16446;\n        o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));\n        return o;\n    }\n    function write_NUMBER_17(R, C, wsidx, v) {\n        var o = new_buf(14);\n        o.write_shift(2, R);\n        o.write_shift(1, wsidx);\n        o.write_shift(1, C);\n        if (v == 0) {\n            o.write_shift(4, 0);\n            o.write_shift(4, 0);\n            o.write_shift(2, 0xFFFF);\n            return o;\n        }\n        var s = 0, e = 0, v1 = 0, v2 = 0;\n        if (v < 0) {\n            s = 1;\n            v = -v;\n        }\n        e = Math.log2(v) | 0;\n        v /= Math.pow(2, e - 31);\n        v2 = v >>> 0;\n        if ((v2 & 0x80000000) == 0) {\n            v /= 2;\n            ++e;\n            v2 = v >>> 0;\n        }\n        v -= v2;\n        v2 |= 0x80000000;\n        v2 >>>= 0;\n        v *= Math.pow(2, 32);\n        v1 = v >>> 0;\n        o.write_shift(4, v1);\n        o.write_shift(4, v2);\n        e += 0x3FFF + (s ? 0x8000 : 0);\n        o.write_shift(2, e);\n        return o;\n    }\n    function parse_FORMULA_19(blob, length) {\n        var o = parse_NUMBER_17(blob, 14);\n        blob.l += length - 14; /* TODO: WK3 formula */ \n        return o;\n    }\n    function parse_NUMBER_25(blob, length) {\n        var o = parse_cell_3(blob, length);\n        var v1 = blob.read_shift(4);\n        o[1].v = v1 >> 6;\n        return o;\n    }\n    function parse_NUMBER_27(blob, length) {\n        var o = parse_cell_3(blob, length);\n        var v1 = blob.read_shift(8, \"f\");\n        o[1].v = v1;\n        return o;\n    }\n    function parse_FORMULA_28(blob, length) {\n        var o = parse_NUMBER_27(blob, 14);\n        blob.l += length - 10; /* TODO: formula */ \n        return o;\n    }\n    function parse_SHEETNAMECS(blob, length) {\n        return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, \"cstr\") : \"\";\n    }\n    function parse_SHEETNAMELP(blob, length) {\n        var len = blob[blob.l++];\n        if (len > length - 1) len = length - 1;\n        var o = \"\";\n        while(o.length < len)o += String.fromCharCode(blob[blob.l++]);\n        return o;\n    }\n    function parse_SHEETINFOQP(blob, length, opts) {\n        if (!opts.qpro || length < 21) return;\n        var id = blob.read_shift(1);\n        blob.l += 17;\n        blob.l += 1; //var len = blob.read_shift(1);\n        blob.l += 2;\n        var nm = blob.read_shift(length - 21, \"cstr\");\n        return [\n            id,\n            nm\n        ];\n    }\n    function parse_XFORMAT(blob, length) {\n        var o = {}, tgt = blob.l + length;\n        while(blob.l < tgt){\n            var dt = blob.read_shift(2);\n            if (dt == 0x36b0) {\n                o[dt] = [\n                    0,\n                    \"\"\n                ];\n                o[dt][0] = blob.read_shift(2);\n                while(blob[blob.l]){\n                    o[dt][1] += String.fromCharCode(blob[blob.l]);\n                    blob.l++;\n                }\n                blob.l++;\n            }\n        // TODO: 0x3a99 ??\n        }\n        return o;\n    }\n    function write_XFORMAT_SHEETNAME(name, wsidx) {\n        var out = new_buf(5 + name.length);\n        out.write_shift(2, 0x36b0);\n        out.write_shift(2, wsidx);\n        for(var i = 0; i < name.length; ++i){\n            var cc = name.charCodeAt(i);\n            out[out.l++] = cc > 0x7F ? 0x5F : cc;\n        }\n        out[out.l++] = 0;\n        return out;\n    }\n    var WK1Enum = {\n        /*::[*/ 0x0000: {\n            n: \"BOF\",\n            f: parseuint16\n        },\n        /*::[*/ 0x0001: {\n            n: \"EOF\"\n        },\n        /*::[*/ 0x0002: {\n            n: \"CALCMODE\"\n        },\n        /*::[*/ 0x0003: {\n            n: \"CALCORDER\"\n        },\n        /*::[*/ 0x0004: {\n            n: \"SPLIT\"\n        },\n        /*::[*/ 0x0005: {\n            n: \"SYNC\"\n        },\n        /*::[*/ 0x0006: {\n            n: \"RANGE\",\n            f: parse_RANGE\n        },\n        /*::[*/ 0x0007: {\n            n: \"WINDOW1\"\n        },\n        /*::[*/ 0x0008: {\n            n: \"COLW1\"\n        },\n        /*::[*/ 0x0009: {\n            n: \"WINTWO\"\n        },\n        /*::[*/ 0x000A: {\n            n: \"COLW2\"\n        },\n        /*::[*/ 0x000B: {\n            n: \"NAME\"\n        },\n        /*::[*/ 0x000C: {\n            n: \"BLANK\"\n        },\n        /*::[*/ 0x000D: {\n            n: \"INTEGER\",\n            f: parse_INTEGER\n        },\n        /*::[*/ 0x000E: {\n            n: \"NUMBER\",\n            f: parse_NUMBER\n        },\n        /*::[*/ 0x000F: {\n            n: \"LABEL\",\n            f: parse_LABEL\n        },\n        /*::[*/ 0x0010: {\n            n: \"FORMULA\",\n            f: parse_FORMULA\n        },\n        /*::[*/ 0x0018: {\n            n: \"TABLE\"\n        },\n        /*::[*/ 0x0019: {\n            n: \"ORANGE\"\n        },\n        /*::[*/ 0x001A: {\n            n: \"PRANGE\"\n        },\n        /*::[*/ 0x001B: {\n            n: \"SRANGE\"\n        },\n        /*::[*/ 0x001C: {\n            n: \"FRANGE\"\n        },\n        /*::[*/ 0x001D: {\n            n: \"KRANGE1\"\n        },\n        /*::[*/ 0x0020: {\n            n: \"HRANGE\"\n        },\n        /*::[*/ 0x0023: {\n            n: \"KRANGE2\"\n        },\n        /*::[*/ 0x0024: {\n            n: \"PROTEC\"\n        },\n        /*::[*/ 0x0025: {\n            n: \"FOOTER\"\n        },\n        /*::[*/ 0x0026: {\n            n: \"HEADER\"\n        },\n        /*::[*/ 0x0027: {\n            n: \"SETUP\"\n        },\n        /*::[*/ 0x0028: {\n            n: \"MARGINS\"\n        },\n        /*::[*/ 0x0029: {\n            n: \"LABELFMT\"\n        },\n        /*::[*/ 0x002A: {\n            n: \"TITLES\"\n        },\n        /*::[*/ 0x002B: {\n            n: \"SHEETJS\"\n        },\n        /*::[*/ 0x002D: {\n            n: \"GRAPH\"\n        },\n        /*::[*/ 0x002E: {\n            n: \"NGRAPH\"\n        },\n        /*::[*/ 0x002F: {\n            n: \"CALCCOUNT\"\n        },\n        /*::[*/ 0x0030: {\n            n: \"UNFORMATTED\"\n        },\n        /*::[*/ 0x0031: {\n            n: \"CURSORW12\"\n        },\n        /*::[*/ 0x0032: {\n            n: \"WINDOW\"\n        },\n        /*::[*/ 0x0033: {\n            n: \"STRING\",\n            f: parse_LABEL\n        },\n        /*::[*/ 0x0037: {\n            n: \"PASSWORD\"\n        },\n        /*::[*/ 0x0038: {\n            n: \"LOCKED\"\n        },\n        /*::[*/ 0x003C: {\n            n: \"QUERY\"\n        },\n        /*::[*/ 0x003D: {\n            n: \"QUERYNAME\"\n        },\n        /*::[*/ 0x003E: {\n            n: \"PRINT\"\n        },\n        /*::[*/ 0x003F: {\n            n: \"PRINTNAME\"\n        },\n        /*::[*/ 0x0040: {\n            n: \"GRAPH2\"\n        },\n        /*::[*/ 0x0041: {\n            n: \"GRAPHNAME\"\n        },\n        /*::[*/ 0x0042: {\n            n: \"ZOOM\"\n        },\n        /*::[*/ 0x0043: {\n            n: \"SYMSPLIT\"\n        },\n        /*::[*/ 0x0044: {\n            n: \"NSROWS\"\n        },\n        /*::[*/ 0x0045: {\n            n: \"NSCOLS\"\n        },\n        /*::[*/ 0x0046: {\n            n: \"RULER\"\n        },\n        /*::[*/ 0x0047: {\n            n: \"NNAME\"\n        },\n        /*::[*/ 0x0048: {\n            n: \"ACOMM\"\n        },\n        /*::[*/ 0x0049: {\n            n: \"AMACRO\"\n        },\n        /*::[*/ 0x004A: {\n            n: \"PARSE\"\n        },\n        /*::[*/ 0x0066: {\n            n: \"PRANGES??\"\n        },\n        /*::[*/ 0x0067: {\n            n: \"RRANGES??\"\n        },\n        /*::[*/ 0x0068: {\n            n: \"FNAME??\"\n        },\n        /*::[*/ 0x0069: {\n            n: \"MRANGES??\"\n        },\n        /*::[*/ 0x00CC: {\n            n: \"SHEETNAMECS\",\n            f: parse_SHEETNAMECS\n        },\n        /*::[*/ 0x00DE: {\n            n: \"SHEETNAMELP\",\n            f: parse_SHEETNAMELP\n        },\n        /*::[*/ 0xFFFF: {\n            n: \"\"\n        }\n    };\n    var WK3Enum = {\n        /*::[*/ 0x0000: {\n            n: \"BOF\"\n        },\n        /*::[*/ 0x0001: {\n            n: \"EOF\"\n        },\n        /*::[*/ 0x0002: {\n            n: \"PASSWORD\"\n        },\n        /*::[*/ 0x0003: {\n            n: \"CALCSET\"\n        },\n        /*::[*/ 0x0004: {\n            n: \"WINDOWSET\"\n        },\n        /*::[*/ 0x0005: {\n            n: \"SHEETCELLPTR\"\n        },\n        /*::[*/ 0x0006: {\n            n: \"SHEETLAYOUT\"\n        },\n        /*::[*/ 0x0007: {\n            n: \"COLUMNWIDTH\"\n        },\n        /*::[*/ 0x0008: {\n            n: \"HIDDENCOLUMN\"\n        },\n        /*::[*/ 0x0009: {\n            n: \"USERRANGE\"\n        },\n        /*::[*/ 0x000A: {\n            n: \"SYSTEMRANGE\"\n        },\n        /*::[*/ 0x000B: {\n            n: \"ZEROFORCE\"\n        },\n        /*::[*/ 0x000C: {\n            n: \"SORTKEYDIR\"\n        },\n        /*::[*/ 0x000D: {\n            n: \"FILESEAL\"\n        },\n        /*::[*/ 0x000E: {\n            n: \"DATAFILLNUMS\"\n        },\n        /*::[*/ 0x000F: {\n            n: \"PRINTMAIN\"\n        },\n        /*::[*/ 0x0010: {\n            n: \"PRINTSTRING\"\n        },\n        /*::[*/ 0x0011: {\n            n: \"GRAPHMAIN\"\n        },\n        /*::[*/ 0x0012: {\n            n: \"GRAPHSTRING\"\n        },\n        /*::[*/ 0x0013: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0014: {\n            n: \"ERRCELL\"\n        },\n        /*::[*/ 0x0015: {\n            n: \"NACELL\"\n        },\n        /*::[*/ 0x0016: {\n            n: \"LABEL16\",\n            f: parse_LABEL_16\n        },\n        /*::[*/ 0x0017: {\n            n: \"NUMBER17\",\n            f: parse_NUMBER_17\n        },\n        /*::[*/ 0x0018: {\n            n: \"NUMBER18\",\n            f: parse_NUMBER_18\n        },\n        /*::[*/ 0x0019: {\n            n: \"FORMULA19\",\n            f: parse_FORMULA_19\n        },\n        /*::[*/ 0x001A: {\n            n: \"FORMULA1A\"\n        },\n        /*::[*/ 0x001B: {\n            n: \"XFORMAT\",\n            f: parse_XFORMAT\n        },\n        /*::[*/ 0x001C: {\n            n: \"DTLABELMISC\"\n        },\n        /*::[*/ 0x001D: {\n            n: \"DTLABELCELL\"\n        },\n        /*::[*/ 0x001E: {\n            n: \"GRAPHWINDOW\"\n        },\n        /*::[*/ 0x001F: {\n            n: \"CPA\"\n        },\n        /*::[*/ 0x0020: {\n            n: \"LPLAUTO\"\n        },\n        /*::[*/ 0x0021: {\n            n: \"QUERY\"\n        },\n        /*::[*/ 0x0022: {\n            n: \"HIDDENSHEET\"\n        },\n        /*::[*/ 0x0023: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0025: {\n            n: \"NUMBER25\",\n            f: parse_NUMBER_25\n        },\n        /*::[*/ 0x0026: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0027: {\n            n: \"NUMBER27\",\n            f: parse_NUMBER_27\n        },\n        /*::[*/ 0x0028: {\n            n: \"FORMULA28\",\n            f: parse_FORMULA_28\n        },\n        /*::[*/ 0x008E: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0093: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0096: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0097: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0098: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0099: {\n            n: \"??\"\n        },\n        /*::[*/ 0x009A: {\n            n: \"??\"\n        },\n        /*::[*/ 0x009B: {\n            n: \"??\"\n        },\n        /*::[*/ 0x009C: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00A3: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00AE: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00AF: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00B0: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00B1: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00B8: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00B9: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00BA: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00BB: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00BC: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00C3: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00C9: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00CC: {\n            n: \"SHEETNAMECS\",\n            f: parse_SHEETNAMECS\n        },\n        /*::[*/ 0x00CD: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00CE: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00CF: {\n            n: \"??\"\n        },\n        /*::[*/ 0x00D0: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0100: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0103: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0104: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0105: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0106: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0107: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0109: {\n            n: \"??\"\n        },\n        /*::[*/ 0x010A: {\n            n: \"??\"\n        },\n        /*::[*/ 0x010B: {\n            n: \"??\"\n        },\n        /*::[*/ 0x010C: {\n            n: \"??\"\n        },\n        /*::[*/ 0x010E: {\n            n: \"??\"\n        },\n        /*::[*/ 0x010F: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0180: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0185: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0186: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0189: {\n            n: \"??\"\n        },\n        /*::[*/ 0x018C: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0200: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0202: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0201: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0204: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0205: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0280: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0281: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0282: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0283: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0284: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0285: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0286: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0287: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0288: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0292: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0293: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0294: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0295: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0296: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0299: {\n            n: \"??\"\n        },\n        /*::[*/ 0x029A: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0300: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0304: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0601: {\n            n: \"SHEETINFOQP\",\n            f: parse_SHEETINFOQP\n        },\n        /*::[*/ 0x0640: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0642: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0701: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0702: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0703: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0704: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0780: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0800: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0801: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0804: {\n            n: \"??\"\n        },\n        /*::[*/ 0x0A80: {\n            n: \"??\"\n        },\n        /*::[*/ 0x2AF6: {\n            n: \"??\"\n        },\n        /*::[*/ 0x3231: {\n            n: \"??\"\n        },\n        /*::[*/ 0x6E49: {\n            n: \"??\"\n        },\n        /*::[*/ 0x6F44: {\n            n: \"??\"\n        },\n        /*::[*/ 0xFFFF: {\n            n: \"\"\n        }\n    };\n    return {\n        sheet_to_wk1: sheet_to_wk1,\n        book_to_wk3: book_to_wk3,\n        to_workbook: lotus_to_workbook\n    };\n}();\n/* 18.4.7 rPr CT_RPrElt */ function parse_rpr(rpr) {\n    var font = {}, m = rpr.match(tagregex), i = 0;\n    var pass = false;\n    if (m) for(; i != m.length; ++i){\n        var y = parsexmltag(m[i]);\n        switch(y[0].replace(/\\w*:/g, \"\")){\n            /* 18.8.12 condense CT_BooleanProperty */ /* ** not required . */ case \"<condense\":\n                break;\n            /* 18.8.17 extend CT_BooleanProperty */ /* ** not required . */ case \"<extend\":\n                break;\n            /* 18.8.36 shadow CT_BooleanProperty */ /* ** not required . */ case \"<shadow\":\n                if (!y.val) break;\n            /* falls through */ case \"<shadow>\":\n            case \"<shadow/>\":\n                font.shadow = 1;\n                break;\n            case \"</shadow>\":\n                break;\n            /* 18.4.1 charset CT_IntProperty TODO */ case \"<charset\":\n                if (y.val == \"1\") break;\n                font.cp = CS2CP[parseInt(y.val, 10)];\n                break;\n            /* 18.4.2 outline CT_BooleanProperty TODO */ case \"<outline\":\n                if (!y.val) break;\n            /* falls through */ case \"<outline>\":\n            case \"<outline/>\":\n                font.outline = 1;\n                break;\n            case \"</outline>\":\n                break;\n            /* 18.4.5 rFont CT_FontName */ case \"<rFont\":\n                font.name = y.val;\n                break;\n            /* 18.4.11 sz CT_FontSize */ case \"<sz\":\n                font.sz = y.val;\n                break;\n            /* 18.4.10 strike CT_BooleanProperty */ case \"<strike\":\n                if (!y.val) break;\n            /* falls through */ case \"<strike>\":\n            case \"<strike/>\":\n                font.strike = 1;\n                break;\n            case \"</strike>\":\n                break;\n            /* 18.4.13 u CT_UnderlineProperty */ case \"<u\":\n                if (!y.val) break;\n                switch(y.val){\n                    case \"double\":\n                        font.uval = \"double\";\n                        break;\n                    case \"singleAccounting\":\n                        font.uval = \"single-accounting\";\n                        break;\n                    case \"doubleAccounting\":\n                        font.uval = \"double-accounting\";\n                        break;\n                }\n            /* falls through */ case \"<u>\":\n            case \"<u/>\":\n                font.u = 1;\n                break;\n            case \"</u>\":\n                break;\n            /* 18.8.2 b */ case \"<b\":\n                if (y.val == \"0\") break;\n            /* falls through */ case \"<b>\":\n            case \"<b/>\":\n                font.b = 1;\n                break;\n            case \"</b>\":\n                break;\n            /* 18.8.26 i */ case \"<i\":\n                if (y.val == \"0\") break;\n            /* falls through */ case \"<i>\":\n            case \"<i/>\":\n                font.i = 1;\n                break;\n            case \"</i>\":\n                break;\n            /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */ case \"<color\":\n                if (y.rgb) font.color = y.rgb.slice(2, 8);\n                break;\n            case \"<color>\":\n            case \"<color/>\":\n            case \"</color>\":\n                break;\n            /* 18.8.18 family ST_FontFamily */ case \"<family\":\n                font.family = y.val;\n                break;\n            case \"<family>\":\n            case \"<family/>\":\n            case \"</family>\":\n                break;\n            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */ case \"<vertAlign\":\n                font.valign = y.val;\n                break;\n            case \"<vertAlign>\":\n            case \"<vertAlign/>\":\n            case \"</vertAlign>\":\n                break;\n            /* 18.8.35 scheme CT_FontScheme TODO */ case \"<scheme\":\n                break;\n            case \"<scheme>\":\n            case \"<scheme/>\":\n            case \"</scheme>\":\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n                break;\n            case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error(\"Unrecognized rich format \" + y[0]);\n        }\n    }\n    return font;\n}\nvar parse_rs = /*#__PURE__*/ function() {\n    var tregex = matchtag(\"t\"), rpregex = matchtag(\"rPr\");\n    /* 18.4.4 r CT_RElt */ function parse_r(r) {\n        /* 18.4.12 t ST_Xstring */ var t = r.match(tregex) /*, cp = 65001*/ ;\n        if (!t) return {\n            t: \"s\",\n            v: \"\"\n        };\n        var o /*:Cell*/  = {\n            t: \"s\",\n            v: unescapexml(t[1])\n        } /*:any*/ ;\n        var rpr = r.match(rpregex);\n        if (rpr) o.s = parse_rpr(rpr[1]);\n        return o;\n    }\n    var rregex = /<(?:\\w+:)?r>/g, rend = /<\\/(?:\\w+:)?r>/;\n    return function parse_rs(rs) {\n        return rs.replace(rregex, \"\").split(rend).map(parse_r).filter(function(r) {\n            return r.v;\n        });\n    };\n}();\n/* Parse a list of <r> tags */ var rs_to_html = /*#__PURE__*/ function parse_rs_factory() {\n    var nlregex = /(\\r\\n|\\n)/g;\n    function parse_rpr2(font, intro, outro) {\n        var style /*:Array<string>*/  = [];\n        if (font.u) style.push(\"text-decoration: underline;\");\n        if (font.uval) style.push(\"text-underline-style:\" + font.uval + \";\");\n        if (font.sz) style.push(\"font-size:\" + font.sz + \"pt;\");\n        if (font.outline) style.push(\"text-effect: outline;\");\n        if (font.shadow) style.push(\"text-shadow: auto;\");\n        intro.push('<span style=\"' + style.join(\"\") + '\">');\n        if (font.b) {\n            intro.push(\"<b>\");\n            outro.push(\"</b>\");\n        }\n        if (font.i) {\n            intro.push(\"<i>\");\n            outro.push(\"</i>\");\n        }\n        if (font.strike) {\n            intro.push(\"<s>\");\n            outro.push(\"</s>\");\n        }\n        var align = font.valign || \"\";\n        if (align == \"superscript\" || align == \"super\") align = \"sup\";\n        else if (align == \"subscript\") align = \"sub\";\n        if (align != \"\") {\n            intro.push(\"<\" + align + \">\");\n            outro.push(\"</\" + align + \">\");\n        }\n        outro.push(\"</span>\");\n        return font;\n    }\n    /* 18.4.4 r CT_RElt */ function r_to_html(r) {\n        var terms /*:[Array<string>, string, Array<string>]*/  = [\n            [],\n            r.v,\n            []\n        ];\n        if (!r.v) return \"\";\n        if (r.s) parse_rpr2(r.s, terms[0], terms[2]);\n        return terms[0].join(\"\") + terms[1].replace(nlregex, \"<br/>\") + terms[2].join(\"\");\n    }\n    return function parse_rs(rs) {\n        return rs.map(r_to_html).join(\"\");\n    };\n}();\n/* 18.4.8 si CT_Rst */ var sitregex = /<(?:\\w+:)?t[^>]*>([^<]*)<\\/(?:\\w+:)?t>/g, sirregex = /<(?:\\w+:)?r>/;\nvar sirphregex = /<(?:\\w+:)?rPh.*?>([\\s\\S]*?)<\\/(?:\\w+:)?rPh>/g;\nfunction parse_si(x, opts) {\n    var html = opts ? opts.cellHTML : true;\n    var z = {};\n    if (!x) return {\n        t: \"\"\n    };\n    //var y;\n    /* 18.4.12 t ST_Xstring (Plaintext String) */ // TODO: is whitespace actually valid here?\n    if (x.match(/^\\s*<(?:\\w+:)?t[^>]*>/)) {\n        z.t = unescapexml(utf8read(x.slice(x.indexOf(\">\") + 1).split(/<\\/(?:\\w+:)?t>/)[0] || \"\"));\n        z.r = utf8read(x);\n        if (html) z.h = escapehtml(z.t);\n    } else if (/*y = */ x.match(sirregex)) {\n        z.r = utf8read(x);\n        z.t = unescapexml(utf8read((x.replace(sirphregex, \"\").match(sitregex) || []).join(\"\").replace(tagregex, \"\")));\n        if (html) z.h = rs_to_html(parse_rs(z.r));\n    }\n    /* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */ /* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */ return z;\n}\n/* 18.4 Shared String Table */ var sstr0 = /<(?:\\w+:)?sst([^>]*)>([\\s\\S]*)<\\/(?:\\w+:)?sst>/;\nvar sstr1 = /<(?:\\w+:)?(?:si|sstItem)>/g;\nvar sstr2 = /<\\/(?:\\w+:)?(?:si|sstItem)>/;\nfunction parse_sst_xml(data /*:string*/ , opts) /*:SST*/ {\n    var s /*:SST*/  = [], ss = \"\";\n    if (!data) return s;\n    /* 18.4.9 sst CT_Sst */ var sst = data.match(sstr0);\n    if (sst) {\n        ss = sst[2].replace(sstr1, \"\").split(sstr2);\n        for(var i = 0; i != ss.length; ++i){\n            var o = parse_si(ss[i].trim(), opts);\n            if (o != null) s[s.length] = o;\n        }\n        sst = parsexmltag(sst[1]);\n        s.Count = sst.count;\n        s.Unique = sst.uniqueCount;\n    }\n    return s;\n}\nvar straywsregex = /^\\s|\\s$|[\\t\\n\\r]/;\nfunction write_sst_xml(sst /*:SST*/ , opts) /*:string*/ {\n    if (!opts.bookSST) return \"\";\n    var o = [\n        XML_HEADER\n    ];\n    o[o.length] = writextag(\"sst\", null, {\n        xmlns: XMLNS_main[0],\n        count: sst.Count,\n        uniqueCount: sst.Unique\n    });\n    for(var i = 0; i != sst.length; ++i){\n        if (sst[i] == null) continue;\n        var s /*:XLString*/  = sst[i];\n        var sitag = \"<si>\";\n        if (s.r) sitag += s.r;\n        else {\n            sitag += \"<t\";\n            if (!s.t) s.t = \"\";\n            if (s.t.match(straywsregex)) sitag += ' xml:space=\"preserve\"';\n            sitag += \">\" + escapexml(s.t) + \"</t>\";\n        }\n        sitag += \"</si>\";\n        o[o.length] = sitag;\n    }\n    if (o.length > 2) {\n        o[o.length] = \"</sst>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.221 BrtBeginSst */ function parse_BrtBeginSst(data) {\n    return [\n        data.read_shift(4),\n        data.read_shift(4)\n    ];\n}\n/* [MS-XLSB] 2.1.7.45 Shared Strings */ function parse_sst_bin(data, opts) /*:SST*/ {\n    var s /*:SST*/  = [];\n    var pass = false;\n    recordhopper(data, function hopper_sst(val, R, RT) {\n        switch(RT){\n            case 0x009F:\n                /* BrtBeginSst */ s.Count = val[0];\n                s.Unique = val[1];\n                break;\n            case 0x0013:\n                /* BrtSSTItem */ s.push(val);\n                break;\n            case 0x00A0:\n                /* BrtEndSst */ return true;\n            case 0x0023:\n                /* BrtFRTBegin */ pass = true;\n                break;\n            case 0x0024:\n                /* BrtFRTEnd */ pass = false;\n                break;\n            default:\n                if (R.T) {}\n                if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    });\n    return s;\n}\nfunction write_BrtBeginSst(sst, o) {\n    if (!o) o = new_buf(8);\n    o.write_shift(4, sst.Count);\n    o.write_shift(4, sst.Unique);\n    return o;\n}\nvar write_BrtSSTItem = write_RichStr;\nfunction write_sst_bin(sst /*::, opts*/ ) {\n    var ba = buf_array();\n    write_record(ba, 0x009F /* BrtBeginSst */ , write_BrtBeginSst(sst));\n    for(var i = 0; i < sst.length; ++i)write_record(ba, 0x0013 /* BrtSSTItem */ , write_BrtSSTItem(sst[i]));\n    /* FRTSST */ write_record(ba, 0x00A0 /* BrtEndSst */ );\n    return ba.end();\n}\nfunction _JS2ANSI(str /*:string*/ ) /*:Array<number>*/ {\n    if (typeof $cptable !== \"undefined\") return $cptable.utils.encode(current_ansi, str);\n    var o /*:Array<number>*/  = [], oo = str.split(\"\");\n    for(var i = 0; i < oo.length; ++i)o[i] = oo[i].charCodeAt(0);\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.1.4 Version */ function parse_CRYPTOVersion(blob, length /*:?number*/ ) {\n    var o /*:any*/  = {};\n    o.Major = blob.read_shift(2);\n    o.Minor = blob.read_shift(2);\n    /*:: if(length == null) return o; */ if (length >= 4) blob.l += length - 4;\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */ function parse_DataSpaceVersionInfo(blob) {\n    var o = {};\n    o.id = blob.read_shift(0, \"lpp4\");\n    o.R = parse_CRYPTOVersion(blob, 4);\n    o.U = parse_CRYPTOVersion(blob, 4);\n    o.W = parse_CRYPTOVersion(blob, 4);\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */ function parse_DataSpaceMapEntry(blob) {\n    var len = blob.read_shift(4);\n    var end = blob.l + len - 4;\n    var o = {};\n    var cnt = blob.read_shift(4);\n    var comps /*:Array<{t:number, v:string}>*/  = [];\n    /* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */ while(cnt-- > 0)comps.push({\n        t: blob.read_shift(4),\n        v: blob.read_shift(0, \"lpp4\")\n    });\n    o.name = blob.read_shift(0, \"lpp4\");\n    o.comps = comps;\n    if (blob.l != end) throw new Error(\"Bad DataSpaceMapEntry: \" + blob.l + \" != \" + end);\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */ function parse_DataSpaceMap(blob) {\n    var o = [];\n    blob.l += 4; // must be 0x8\n    var cnt = blob.read_shift(4);\n    while(cnt-- > 0)o.push(parse_DataSpaceMapEntry(blob));\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */ function parse_DataSpaceDefinition(blob) /*:Array<string>*/ {\n    var o /*:Array<string>*/  = [];\n    blob.l += 4; // must be 0x8\n    var cnt = blob.read_shift(4);\n    while(cnt-- > 0)o.push(blob.read_shift(0, \"lpp4\"));\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */ function parse_TransformInfoHeader(blob) {\n    var o = {};\n    /*var len = */ blob.read_shift(4);\n    blob.l += 4; // must be 0x1\n    o.id = blob.read_shift(0, \"lpp4\");\n    o.name = blob.read_shift(0, \"lpp4\");\n    o.R = parse_CRYPTOVersion(blob, 4);\n    o.U = parse_CRYPTOVersion(blob, 4);\n    o.W = parse_CRYPTOVersion(blob, 4);\n    return o;\n}\nfunction parse_Primary(blob) {\n    /* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */ var hdr = parse_TransformInfoHeader(blob);\n    /* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */ hdr.ename = blob.read_shift(0, \"8lpp4\");\n    hdr.blksz = blob.read_shift(4);\n    hdr.cmode = blob.read_shift(4);\n    if (blob.read_shift(4) != 0x04) throw new Error(\"Bad !Primary record\");\n    return hdr;\n}\n/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */ function parse_EncryptionHeader(blob, length /*:number*/ ) {\n    var tgt = blob.l + length;\n    var o = {};\n    o.Flags = blob.read_shift(4) & 0x3F;\n    blob.l += 4;\n    o.AlgID = blob.read_shift(4);\n    var valid = false;\n    switch(o.AlgID){\n        case 0x660E:\n        case 0x660F:\n        case 0x6610:\n            valid = o.Flags == 0x24;\n            break;\n        case 0x6801:\n            valid = o.Flags == 0x04;\n            break;\n        case 0:\n            valid = o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24;\n            break;\n        default:\n            throw \"Unrecognized encryption algorithm: \" + o.AlgID;\n    }\n    if (!valid) throw new Error(\"Encryption Flags/AlgID mismatch\");\n    o.AlgIDHash = blob.read_shift(4);\n    o.KeySize = blob.read_shift(4);\n    o.ProviderType = blob.read_shift(4);\n    blob.l += 8;\n    o.CSPName = blob.read_shift(tgt - blob.l >> 1, \"utf16le\");\n    blob.l = tgt;\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */ function parse_EncryptionVerifier(blob, length /*:number*/ ) {\n    var o = {}, tgt = blob.l + length;\n    blob.l += 4; // SaltSize must be 0x10\n    o.Salt = blob.slice(blob.l, blob.l + 16);\n    blob.l += 16;\n    o.Verifier = blob.slice(blob.l, blob.l + 16);\n    blob.l += 16;\n    /*var sz = */ blob.read_shift(4);\n    o.VerifierHash = blob.slice(blob.l, tgt);\n    blob.l = tgt;\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */ function parse_EncryptionInfo(blob) {\n    var vers = parse_CRYPTOVersion(blob);\n    switch(vers.Minor){\n        case 0x02:\n            return [\n                vers.Minor,\n                parse_EncInfoStd(blob, vers)\n            ];\n        case 0x03:\n            return [\n                vers.Minor,\n                parse_EncInfoExt(blob, vers)\n            ];\n        case 0x04:\n            return [\n                vers.Minor,\n                parse_EncInfoAgl(blob, vers)\n            ];\n    }\n    throw new Error(\"ECMA-376 Encrypted file unrecognized Version: \" + vers.Minor);\n}\n/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */ function parse_EncInfoStd(blob /*::, vers*/ ) {\n    var flags = blob.read_shift(4);\n    if ((flags & 0x3F) != 0x24) throw new Error(\"EncryptionInfo mismatch\");\n    var sz = blob.read_shift(4);\n    //var tgt = blob.l + sz;\n    var hdr = parse_EncryptionHeader(blob, sz);\n    var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);\n    return {\n        t: \"Std\",\n        h: hdr,\n        v: verifier\n    };\n}\n/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */ function parse_EncInfoExt() {\n    throw new Error(\"File is password-protected: ECMA-376 Extensible\");\n}\n/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */ function parse_EncInfoAgl(blob /*::, vers*/ ) {\n    var KeyData = [\n        \"saltSize\",\n        \"blockSize\",\n        \"keyBits\",\n        \"hashSize\",\n        \"cipherAlgorithm\",\n        \"cipherChaining\",\n        \"hashAlgorithm\",\n        \"saltValue\"\n    ];\n    blob.l += 4;\n    var xml = blob.read_shift(blob.length - blob.l, \"utf8\");\n    var o = {};\n    xml.replace(tagregex, function xml_agile(x) {\n        var y /*:any*/  = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<?xml\":\n                break;\n            case \"<encryption\":\n            case \"</encryption>\":\n                break;\n            case \"<keyData\":\n                KeyData.forEach(function(k) {\n                    o[k] = y[k];\n                });\n                break;\n            case \"<dataIntegrity\":\n                o.encryptedHmacKey = y.encryptedHmacKey;\n                o.encryptedHmacValue = y.encryptedHmacValue;\n                break;\n            case \"<keyEncryptors>\":\n            case \"<keyEncryptors\":\n                o.encs = [];\n                break;\n            case \"</keyEncryptors>\":\n                break;\n            case \"<keyEncryptor\":\n                o.uri = y.uri;\n                break;\n            case \"</keyEncryptor>\":\n                break;\n            case \"<encryptedKey\":\n                o.encs.push(y);\n                break;\n            default:\n                throw y[0];\n        }\n    });\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */ function parse_RC4CryptoHeader(blob, length /*:number*/ ) {\n    var o = {};\n    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);\n    length -= 4;\n    if (vers.Minor != 2) throw new Error(\"unrecognized minor version code: \" + vers.Minor);\n    if (vers.Major > 4 || vers.Major < 2) throw new Error(\"unrecognized major version code: \" + vers.Major);\n    o.Flags = blob.read_shift(4);\n    length -= 4;\n    var sz = blob.read_shift(4);\n    length -= 4;\n    o.EncryptionHeader = parse_EncryptionHeader(blob, sz);\n    length -= sz;\n    o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */ function parse_RC4Header(blob /*::, length*/ ) {\n    var o = {};\n    var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);\n    if (vers.Major != 1 || vers.Minor != 1) throw \"unrecognized version code \" + vers.Major + \" : \" + vers.Minor;\n    o.Salt = blob.read_shift(16);\n    o.EncryptedVerifier = blob.read_shift(16);\n    o.EncryptedVerifierHash = blob.read_shift(16);\n    return o;\n}\n/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */ function crypto_CreatePasswordVerifier_Method1(Password /*:string*/ ) {\n    var Verifier = 0x0000, PasswordArray;\n    var PasswordDecoded = _JS2ANSI(Password);\n    var len = PasswordDecoded.length + 1, i, PasswordByte;\n    var Intermediate1, Intermediate2, Intermediate3;\n    PasswordArray = new_raw_buf(len);\n    PasswordArray[0] = PasswordDecoded.length;\n    for(i = 1; i != len; ++i)PasswordArray[i] = PasswordDecoded[i - 1];\n    for(i = len - 1; i >= 0; --i){\n        PasswordByte = PasswordArray[i];\n        Intermediate1 = (Verifier & 0x4000) === 0x0000 ? 0 : 1;\n        Intermediate2 = Verifier << 1 & 0x7FFF;\n        Intermediate3 = Intermediate1 | Intermediate2;\n        Verifier = Intermediate3 ^ PasswordByte;\n    }\n    return Verifier ^ 0xCE4B;\n}\n/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */ var crypto_CreateXorArray_Method1 = /*#__PURE__*/ function() {\n    var PadArray = [\n        0xBB,\n        0xFF,\n        0xFF,\n        0xBA,\n        0xFF,\n        0xFF,\n        0xB9,\n        0x80,\n        0x00,\n        0xBE,\n        0x0F,\n        0x00,\n        0xBF,\n        0x0F,\n        0x00\n    ];\n    var InitialCode = [\n        0xE1F0,\n        0x1D0F,\n        0xCC9C,\n        0x84C0,\n        0x110C,\n        0x0E10,\n        0xF1CE,\n        0x313E,\n        0x1872,\n        0xE139,\n        0xD40F,\n        0x84F9,\n        0x280C,\n        0xA96A,\n        0x4EC3\n    ];\n    var XorMatrix = [\n        0xAEFC,\n        0x4DD9,\n        0x9BB2,\n        0x2745,\n        0x4E8A,\n        0x9D14,\n        0x2A09,\n        0x7B61,\n        0xF6C2,\n        0xFDA5,\n        0xEB6B,\n        0xC6F7,\n        0x9DCF,\n        0x2BBF,\n        0x4563,\n        0x8AC6,\n        0x05AD,\n        0x0B5A,\n        0x16B4,\n        0x2D68,\n        0x5AD0,\n        0x0375,\n        0x06EA,\n        0x0DD4,\n        0x1BA8,\n        0x3750,\n        0x6EA0,\n        0xDD40,\n        0xD849,\n        0xA0B3,\n        0x5147,\n        0xA28E,\n        0x553D,\n        0xAA7A,\n        0x44D5,\n        0x6F45,\n        0xDE8A,\n        0xAD35,\n        0x4A4B,\n        0x9496,\n        0x390D,\n        0x721A,\n        0xEB23,\n        0xC667,\n        0x9CEF,\n        0x29FF,\n        0x53FE,\n        0xA7FC,\n        0x5FD9,\n        0x47D3,\n        0x8FA6,\n        0x0F6D,\n        0x1EDA,\n        0x3DB4,\n        0x7B68,\n        0xF6D0,\n        0xB861,\n        0x60E3,\n        0xC1C6,\n        0x93AD,\n        0x377B,\n        0x6EF6,\n        0xDDEC,\n        0x45A0,\n        0x8B40,\n        0x06A1,\n        0x0D42,\n        0x1A84,\n        0x3508,\n        0x6A10,\n        0xAA51,\n        0x4483,\n        0x8906,\n        0x022D,\n        0x045A,\n        0x08B4,\n        0x1168,\n        0x76B4,\n        0xED68,\n        0xCAF1,\n        0x85C3,\n        0x1BA7,\n        0x374E,\n        0x6E9C,\n        0x3730,\n        0x6E60,\n        0xDCC0,\n        0xA9A1,\n        0x4363,\n        0x86C6,\n        0x1DAD,\n        0x3331,\n        0x6662,\n        0xCCC4,\n        0x89A9,\n        0x0373,\n        0x06E6,\n        0x0DCC,\n        0x1021,\n        0x2042,\n        0x4084,\n        0x8108,\n        0x1231,\n        0x2462,\n        0x48C4\n    ];\n    var Ror = function(Byte) {\n        return (Byte / 2 | Byte * 128) & 0xFF;\n    };\n    var XorRor = function(byte1, byte2) {\n        return Ror(byte1 ^ byte2);\n    };\n    var CreateXorKey_Method1 = function(Password) {\n        var XorKey = InitialCode[Password.length - 1];\n        var CurrentElement = 0x68;\n        for(var i = Password.length - 1; i >= 0; --i){\n            var Char = Password[i];\n            for(var j = 0; j != 7; ++j){\n                if (Char & 0x40) XorKey ^= XorMatrix[CurrentElement];\n                Char *= 2;\n                --CurrentElement;\n            }\n        }\n        return XorKey;\n    };\n    return function(password /*:string*/ ) {\n        var Password = _JS2ANSI(password);\n        var XorKey = CreateXorKey_Method1(Password);\n        var Index = Password.length;\n        var ObfuscationArray = new_raw_buf(16);\n        for(var i = 0; i != 16; ++i)ObfuscationArray[i] = 0x00;\n        var Temp, PasswordLastChar, PadIndex;\n        if ((Index & 1) === 1) {\n            Temp = XorKey >> 8;\n            ObfuscationArray[Index] = XorRor(PadArray[0], Temp);\n            --Index;\n            Temp = XorKey & 0xFF;\n            PasswordLastChar = Password[Password.length - 1];\n            ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);\n        }\n        while(Index > 0){\n            --Index;\n            Temp = XorKey >> 8;\n            ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n            --Index;\n            Temp = XorKey & 0xFF;\n            ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n        }\n        Index = 15;\n        PadIndex = 15 - Password.length;\n        while(PadIndex > 0){\n            Temp = XorKey >> 8;\n            ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);\n            --Index;\n            --PadIndex;\n            Temp = XorKey & 0xFF;\n            ObfuscationArray[Index] = XorRor(Password[Index], Temp);\n            --Index;\n            --PadIndex;\n        }\n        return ObfuscationArray;\n    };\n}();\n/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */ var crypto_DecryptData_Method1 = function(password /*:string*/ , Data, XorArrayIndex, XorArray, O) {\n    /* If XorArray is set, use it; if O is not set, make changes in-place */ if (!O) O = Data;\n    if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);\n    var Index, Value;\n    for(Index = 0; Index != Data.length; ++Index){\n        Value = Data[Index];\n        Value ^= XorArray[XorArrayIndex];\n        Value = (Value >> 5 | Value << 3) & 0xFF;\n        O[Index] = Value;\n        ++XorArrayIndex;\n    }\n    return [\n        O,\n        XorArrayIndex,\n        XorArray\n    ];\n};\nvar crypto_MakeXorDecryptor = function(password /*:string*/ ) {\n    var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);\n    return function(Data) {\n        var O = crypto_DecryptData_Method1(\"\", Data, XorArrayIndex, XorArray);\n        XorArrayIndex = O[1];\n        return O[0];\n    };\n};\n/* 2.5.343 */ function parse_XORObfuscation(blob, length, opts, out) {\n    var o = {\n        key: parseuint16(blob),\n        verificationBytes: parseuint16(blob)\n    } /*:any*/ ;\n    if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);\n    out.valid = o.verificationBytes === o.verifier;\n    if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);\n    return o;\n}\n/* 2.4.117 */ function parse_FilePassHeader(blob, length /*:number*/ , oo) {\n    var o = oo || {};\n    o.Info = blob.read_shift(2);\n    blob.l -= 2;\n    if (o.Info === 1) o.Data = parse_RC4Header(blob, length);\n    else o.Data = parse_RC4CryptoHeader(blob, length);\n    return o;\n}\nfunction parse_FilePass(blob, length /*:number*/ , opts) {\n    var o = {\n        Type: opts.biff >= 8 ? blob.read_shift(2) : 0\n    } /*:any*/ ; /* wEncryptionType */ \n    if (o.Type) parse_FilePassHeader(blob, length - 2, o);\n    else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);\n    return o;\n}\nvar RTF = /*#__PURE__*/ function() {\n    function rtf_to_sheet(d /*:RawData*/ , opts) /*:Worksheet*/ {\n        switch(opts.type){\n            case \"base64\":\n                return rtf_to_sheet_str(Base64_decode(d), opts);\n            case \"binary\":\n                return rtf_to_sheet_str(d, opts);\n            case \"buffer\":\n                return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString(\"binary\") : a2s(d), opts);\n            case \"array\":\n                return rtf_to_sheet_str(cc2str(d), opts);\n        }\n        throw new Error(\"Unrecognized type \" + opts.type);\n    }\n    /* TODO: this is a stub */ function rtf_to_sheet_str(str /*:string*/ , opts) /*:Worksheet*/ {\n        var o = opts || {};\n        var ws /*:Worksheet*/  = o.dense ? [] : {} /*:any*/ ;\n        var rows = str.match(/\\\\trowd.*?\\\\row\\b/g);\n        if (!rows.length) throw new Error(\"RTF missing table\");\n        var range /*:Range*/  = {\n            s: {\n                c: 0,\n                r: 0\n            },\n            e: {\n                c: 0,\n                r: rows.length - 1\n            }\n        } /*:any*/ ;\n        rows.forEach(function(rowtf, R) {\n            if (Array.isArray(ws)) ws[R] = [];\n            var rtfre = /\\\\\\w+\\b/g;\n            var last_index = 0;\n            var res;\n            var C = -1;\n            while(res = rtfre.exec(rowtf)){\n                switch(res[0]){\n                    case \"\\\\cell\":\n                        var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);\n                        if (data[0] == \" \") data = data.slice(1);\n                        ++C;\n                        if (data.length) {\n                            // TODO: value parsing, including codepage adjustments\n                            var cell = {\n                                v: data,\n                                t: \"s\"\n                            };\n                            if (Array.isArray(ws)) ws[R][C] = cell;\n                            else ws[encode_cell({\n                                r: R,\n                                c: C\n                            })] = cell;\n                        }\n                        break;\n                }\n                last_index = rtfre.lastIndex;\n            }\n            if (C > range.e.c) range.e.c = C;\n        });\n        ws[\"!ref\"] = encode_range(range);\n        return ws;\n    }\n    function rtf_to_workbook(d /*:RawData*/ , opts) /*:Workbook*/ {\n        return sheet_to_workbook(rtf_to_sheet(d, opts), opts);\n    }\n    /* TODO: this is a stub */ function sheet_to_rtf(ws /*:Worksheet*/  /*::, opts*/ ) /*:string*/ {\n        var o = [\n            \"{\\\\rtf1\\\\ansi\"\n        ];\n        var r = safe_decode_range(ws[\"!ref\"]), cell /*:Cell*/ ;\n        var dense = Array.isArray(ws);\n        for(var R = r.s.r; R <= r.e.r; ++R){\n            o.push(\"\\\\trowd\\\\trautofit1\");\n            for(var C = r.s.c; C <= r.e.c; ++C)o.push(\"\\\\cellx\" + (C + 1));\n            o.push(\"\\\\pard\\\\intbl\");\n            for(C = r.s.c; C <= r.e.c; ++C){\n                var coord = encode_cell({\n                    r: R,\n                    c: C\n                });\n                cell = dense ? (ws[R] || [])[C] : ws[coord];\n                if (!cell || cell.v == null && (!cell.f || cell.F)) continue;\n                o.push(\" \" + (cell.w || (format_cell(cell), cell.w)));\n                o.push(\"\\\\cell\");\n            }\n            o.push(\"\\\\pard\\\\intbl\\\\row\");\n        }\n        return o.join(\"\") + \"}\";\n    }\n    return {\n        to_workbook: rtf_to_workbook,\n        to_sheet: rtf_to_sheet,\n        from_sheet: sheet_to_rtf\n    };\n}();\nfunction hex2RGB(h) {\n    var o = h.slice(h[0] === \"#\" ? 1 : 0).slice(0, 6);\n    return [\n        parseInt(o.slice(0, 2), 16),\n        parseInt(o.slice(2, 4), 16),\n        parseInt(o.slice(4, 6), 16)\n    ];\n}\nfunction rgb2Hex(rgb) {\n    for(var i = 0, o = 1; i != 3; ++i)o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);\n    return o.toString(16).toUpperCase().slice(1);\n}\nfunction rgb2HSL(rgb) {\n    var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;\n    var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;\n    if (C === 0) return [\n        0,\n        0,\n        R\n    ];\n    var H6 = 0, S = 0, L2 = M + m;\n    S = C / (L2 > 1 ? 2 - L2 : L2);\n    switch(M){\n        case R:\n            H6 = ((G - B) / C + 6) % 6;\n            break;\n        case G:\n            H6 = (B - R) / C + 2;\n            break;\n        case B:\n            H6 = (R - G) / C + 4;\n            break;\n    }\n    return [\n        H6 / 6,\n        S,\n        L2 / 2\n    ];\n}\nfunction hsl2RGB(hsl) {\n    var H = hsl[0], S = hsl[1], L = hsl[2];\n    var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;\n    var rgb = [\n        m,\n        m,\n        m\n    ], h6 = 6 * H;\n    var X;\n    if (S !== 0) switch(h6 | 0){\n        case 0:\n        case 6:\n            X = C * h6;\n            rgb[0] += C;\n            rgb[1] += X;\n            break;\n        case 1:\n            X = C * (2 - h6);\n            rgb[0] += X;\n            rgb[1] += C;\n            break;\n        case 2:\n            X = C * (h6 - 2);\n            rgb[1] += C;\n            rgb[2] += X;\n            break;\n        case 3:\n            X = C * (4 - h6);\n            rgb[1] += X;\n            rgb[2] += C;\n            break;\n        case 4:\n            X = C * (h6 - 4);\n            rgb[2] += C;\n            rgb[0] += X;\n            break;\n        case 5:\n            X = C * (6 - h6);\n            rgb[2] += X;\n            rgb[0] += C;\n            break;\n    }\n    for(var i = 0; i != 3; ++i)rgb[i] = Math.round(rgb[i] * 255);\n    return rgb;\n}\n/* 18.8.3 bgColor tint algorithm */ function rgb_tint(hex, tint) {\n    if (tint === 0) return hex;\n    var hsl = rgb2HSL(hex2RGB(hex));\n    if (tint < 0) hsl[2] = hsl[2] * (1 + tint);\n    else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);\n    return rgb2Hex(hsl2RGB(hsl));\n}\n/* 18.3.1.13 width calculations */ /* [MS-OI29500] 2.1.595 Column Width & Formatting */ var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;\nfunction width2px(width) {\n    return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);\n}\nfunction px2char(px) {\n    return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;\n}\nfunction char2width(chr) {\n    return Math.round((chr * MDW + 5) / MDW * 256) / 256;\n}\n//function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }\n//function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }\nfunction cycle_width(collw) {\n    return char2width(px2char(width2px(collw)));\n}\n/* XLSX/XLSB/XLS specify width in units of MDW */ function find_mdw_colw(collw) {\n    var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;\n    if (delta > 0.005) {\n        for(MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)if (Math.abs(collw - cycle_width(collw)) <= delta) {\n            delta = Math.abs(collw - cycle_width(collw));\n            _MDW = MDW;\n        }\n    }\n    MDW = _MDW;\n}\n/* XLML specifies width in terms of pixels */ /*function find_mdw_wpx(wpx) {\n\tvar delta = Infinity, guess = 0, _MDW = MIN_MDW;\n\tfor(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {\n\t\tguess = char2width_(px2char_(wpx))*256;\n\t\tguess = (guess) % 1;\n\t\tif(guess > 0.5) guess--;\n\t\tif(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }\n\t}\n\tMDW = _MDW;\n}*/ function process_col(coll /*:ColInfo*/ ) {\n    if (coll.width) {\n        coll.wpx = width2px(coll.width);\n        coll.wch = px2char(coll.wpx);\n        coll.MDW = MDW;\n    } else if (coll.wpx) {\n        coll.wch = px2char(coll.wpx);\n        coll.width = char2width(coll.wch);\n        coll.MDW = MDW;\n    } else if (typeof coll.wch == \"number\") {\n        coll.width = char2width(coll.wch);\n        coll.wpx = width2px(coll.width);\n        coll.MDW = MDW;\n    }\n    if (coll.customWidth) delete coll.customWidth;\n}\nvar DEF_PPI = 96, PPI = DEF_PPI;\nfunction px2pt(px) {\n    return px * 96 / PPI;\n}\nfunction pt2px(pt) {\n    return pt * PPI / 96;\n}\n/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */ var XLMLPatternTypeMap = {\n    \"None\": \"none\",\n    \"Solid\": \"solid\",\n    \"Gray50\": \"mediumGray\",\n    \"Gray75\": \"darkGray\",\n    \"Gray25\": \"lightGray\",\n    \"HorzStripe\": \"darkHorizontal\",\n    \"VertStripe\": \"darkVertical\",\n    \"ReverseDiagStripe\": \"darkDown\",\n    \"DiagStripe\": \"darkUp\",\n    \"DiagCross\": \"darkGrid\",\n    \"ThickDiagCross\": \"darkTrellis\",\n    \"ThinHorzStripe\": \"lightHorizontal\",\n    \"ThinVertStripe\": \"lightVertical\",\n    \"ThinReverseDiagStripe\": \"lightDown\",\n    \"ThinHorzCross\": \"lightGrid\"\n};\n/* 18.8.5 borders CT_Borders */ function parse_borders(t, styles, themes, opts) {\n    styles.Borders = [];\n    var border = {};\n    var pass = false;\n    (t[0].match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<borders\":\n            case \"<borders>\":\n            case \"</borders>\":\n                break;\n            /* 18.8.4 border CT_Border */ case \"<border\":\n            case \"<border>\":\n            case \"<border/>\":\n                border = /*::(*/ {} /*:: :any)*/ ;\n                if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);\n                if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);\n                styles.Borders.push(border);\n                break;\n            case \"</border>\":\n                break;\n            /* note: not in spec, appears to be CT_BorderPr */ case \"<left/>\":\n                break;\n            case \"<left\":\n            case \"<left>\":\n                break;\n            case \"</left>\":\n                break;\n            /* note: not in spec, appears to be CT_BorderPr */ case \"<right/>\":\n                break;\n            case \"<right\":\n            case \"<right>\":\n                break;\n            case \"</right>\":\n                break;\n            /* 18.8.43 top CT_BorderPr */ case \"<top/>\":\n                break;\n            case \"<top\":\n            case \"<top>\":\n                break;\n            case \"</top>\":\n                break;\n            /* 18.8.6 bottom CT_BorderPr */ case \"<bottom/>\":\n                break;\n            case \"<bottom\":\n            case \"<bottom>\":\n                break;\n            case \"</bottom>\":\n                break;\n            /* 18.8.13 diagonal CT_BorderPr */ case \"<diagonal\":\n            case \"<diagonal>\":\n            case \"<diagonal/>\":\n                break;\n            case \"</diagonal>\":\n                break;\n            /* 18.8.25 horizontal CT_BorderPr */ case \"<horizontal\":\n            case \"<horizontal>\":\n            case \"<horizontal/>\":\n                break;\n            case \"</horizontal>\":\n                break;\n            /* 18.8.44 vertical CT_BorderPr */ case \"<vertical\":\n            case \"<vertical>\":\n            case \"<vertical/>\":\n                break;\n            case \"</vertical>\":\n                break;\n            /* 18.8.37 start CT_BorderPr */ case \"<start\":\n            case \"<start>\":\n            case \"<start/>\":\n                break;\n            case \"</start>\":\n                break;\n            /* 18.8.16 end CT_BorderPr */ case \"<end\":\n            case \"<end>\":\n            case \"<end/>\":\n                break;\n            case \"</end>\":\n                break;\n            /* 18.8.? color CT_Color */ case \"<color\":\n            case \"<color>\":\n                break;\n            case \"<color/>\":\n            case \"</color>\":\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n                break;\n            case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (opts && opts.WTF) {\n                    if (!pass) throw new Error(\"unrecognized \" + y[0] + \" in borders\");\n                }\n        }\n    });\n}\n/* 18.8.21 fills CT_Fills */ function parse_fills(t, styles, themes, opts) {\n    styles.Fills = [];\n    var fill = {};\n    var pass = false;\n    (t[0].match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<fills\":\n            case \"<fills>\":\n            case \"</fills>\":\n                break;\n            /* 18.8.20 fill CT_Fill */ case \"<fill>\":\n            case \"<fill\":\n            case \"<fill/>\":\n                fill = {};\n                styles.Fills.push(fill);\n                break;\n            case \"</fill>\":\n                break;\n            /* 18.8.24 gradientFill CT_GradientFill */ case \"<gradientFill>\":\n                break;\n            case \"<gradientFill\":\n            case \"</gradientFill>\":\n                styles.Fills.push(fill);\n                fill = {};\n                break;\n            /* 18.8.32 patternFill CT_PatternFill */ case \"<patternFill\":\n            case \"<patternFill>\":\n                if (y.patternType) fill.patternType = y.patternType;\n                break;\n            case \"<patternFill/>\":\n            case \"</patternFill>\":\n                break;\n            /* 18.8.3 bgColor CT_Color */ case \"<bgColor\":\n                if (!fill.bgColor) fill.bgColor = {};\n                if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);\n                if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);\n                if (y.tint) fill.bgColor.tint = parseFloat(y.tint);\n                /* Excel uses ARGB strings */ if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);\n                break;\n            case \"<bgColor/>\":\n            case \"</bgColor>\":\n                break;\n            /* 18.8.19 fgColor CT_Color */ case \"<fgColor\":\n                if (!fill.fgColor) fill.fgColor = {};\n                if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);\n                if (y.tint) fill.fgColor.tint = parseFloat(y.tint);\n                /* Excel uses ARGB strings */ if (y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);\n                break;\n            case \"<fgColor/>\":\n            case \"</fgColor>\":\n                break;\n            /* 18.8.38 stop CT_GradientStop */ case \"<stop\":\n            case \"<stop/>\":\n                break;\n            case \"</stop>\":\n                break;\n            /* 18.8.? color CT_Color */ case \"<color\":\n            case \"<color/>\":\n                break;\n            case \"</color>\":\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n                break;\n            case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (opts && opts.WTF) {\n                    if (!pass) throw new Error(\"unrecognized \" + y[0] + \" in fills\");\n                }\n        }\n    });\n}\n/* 18.8.23 fonts CT_Fonts */ function parse_fonts(t, styles, themes, opts) {\n    styles.Fonts = [];\n    var font = {};\n    var pass = false;\n    (t[0].match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<fonts\":\n            case \"<fonts>\":\n            case \"</fonts>\":\n                break;\n            /* 18.8.22 font CT_Font */ case \"<font\":\n            case \"<font>\":\n                break;\n            case \"</font>\":\n            case \"<font/>\":\n                styles.Fonts.push(font);\n                font = {};\n                break;\n            /* 18.8.29 name CT_FontName */ case \"<name\":\n                if (y.val) font.name = utf8read(y.val);\n                break;\n            case \"<name/>\":\n            case \"</name>\":\n                break;\n            /* 18.8.2  b CT_BooleanProperty */ case \"<b\":\n                font.bold = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<b/>\":\n                font.bold = 1;\n                break;\n            /* 18.8.26 i CT_BooleanProperty */ case \"<i\":\n                font.italic = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<i/>\":\n                font.italic = 1;\n                break;\n            /* 18.4.13 u CT_UnderlineProperty */ case \"<u\":\n                switch(y.val){\n                    case \"none\":\n                        font.underline = 0x00;\n                        break;\n                    case \"single\":\n                        font.underline = 0x01;\n                        break;\n                    case \"double\":\n                        font.underline = 0x02;\n                        break;\n                    case \"singleAccounting\":\n                        font.underline = 0x21;\n                        break;\n                    case \"doubleAccounting\":\n                        font.underline = 0x22;\n                        break;\n                }\n                break;\n            case \"<u/>\":\n                font.underline = 1;\n                break;\n            /* 18.4.10 strike CT_BooleanProperty */ case \"<strike\":\n                font.strike = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<strike/>\":\n                font.strike = 1;\n                break;\n            /* 18.4.2  outline CT_BooleanProperty */ case \"<outline\":\n                font.outline = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<outline/>\":\n                font.outline = 1;\n                break;\n            /* 18.8.36 shadow CT_BooleanProperty */ case \"<shadow\":\n                font.shadow = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<shadow/>\":\n                font.shadow = 1;\n                break;\n            /* 18.8.12 condense CT_BooleanProperty */ case \"<condense\":\n                font.condense = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<condense/>\":\n                font.condense = 1;\n                break;\n            /* 18.8.17 extend CT_BooleanProperty */ case \"<extend\":\n                font.extend = y.val ? parsexmlbool(y.val) : 1;\n                break;\n            case \"<extend/>\":\n                font.extend = 1;\n                break;\n            /* 18.4.11 sz CT_FontSize */ case \"<sz\":\n                if (y.val) font.sz = +y.val;\n                break;\n            case \"<sz/>\":\n            case \"</sz>\":\n                break;\n            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */ case \"<vertAlign\":\n                if (y.val) font.vertAlign = y.val;\n                break;\n            case \"<vertAlign/>\":\n            case \"</vertAlign>\":\n                break;\n            /* 18.8.18 family CT_FontFamily */ case \"<family\":\n                if (y.val) font.family = parseInt(y.val, 10);\n                break;\n            case \"<family/>\":\n            case \"</family>\":\n                break;\n            /* 18.8.35 scheme CT_FontScheme */ case \"<scheme\":\n                if (y.val) font.scheme = y.val;\n                break;\n            case \"<scheme/>\":\n            case \"</scheme>\":\n                break;\n            /* 18.4.1 charset CT_IntProperty */ case \"<charset\":\n                if (y.val == \"1\") break;\n                y.codepage = CS2CP[parseInt(y.val, 10)];\n                break;\n            /* 18.?.? color CT_Color */ case \"<color\":\n                if (!font.color) font.color = {};\n                if (y.auto) font.color.auto = parsexmlbool(y.auto);\n                if (y.rgb) font.color.rgb = y.rgb.slice(-6);\n                else if (y.indexed) {\n                    font.color.index = parseInt(y.indexed, 10);\n                    var icv = XLSIcv[font.color.index];\n                    if (font.color.index == 81) icv = XLSIcv[1];\n                    if (!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid\n                    font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);\n                } else if (y.theme) {\n                    font.color.theme = parseInt(y.theme, 10);\n                    if (y.tint) font.color.tint = parseFloat(y.tint);\n                    if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n                        font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);\n                    }\n                }\n                break;\n            case \"<color/>\":\n            case \"</color>\":\n                break;\n            /* note: sometimes mc:AlternateContent appears bare */ case \"<AlternateContent\":\n                pass = true;\n                break;\n            case \"</AlternateContent>\":\n                pass = false;\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n                break;\n            case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (opts && opts.WTF) {\n                    if (!pass) throw new Error(\"unrecognized \" + y[0] + \" in fonts\");\n                }\n        }\n    });\n}\n/* 18.8.31 numFmts CT_NumFmts */ function parse_numFmts(t, styles, opts) {\n    styles.NumberFmt = [];\n    var k /*Array<number>*/  = keys(table_fmt);\n    for(var i = 0; i < k.length; ++i)styles.NumberFmt[k[i]] = table_fmt[k[i]];\n    var m = t[0].match(tagregex);\n    if (!m) return;\n    for(i = 0; i < m.length; ++i){\n        var y = parsexmltag(m[i]);\n        switch(strip_ns(y[0])){\n            case \"<numFmts\":\n            case \"</numFmts>\":\n            case \"<numFmts/>\":\n            case \"<numFmts>\":\n                break;\n            case \"<numFmt\":\n                {\n                    var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);\n                    styles.NumberFmt[j] = f;\n                    if (j > 0) {\n                        if (j > 0x188) {\n                            for(j = 0x188; j > 0x3c; --j)if (styles.NumberFmt[j] == null) break;\n                            styles.NumberFmt[j] = f;\n                        }\n                        SSF_load(f, j);\n                    }\n                }\n                break;\n            case \"</numFmt>\":\n                break;\n            default:\n                if (opts.WTF) throw new Error(\"unrecognized \" + y[0] + \" in numFmts\");\n        }\n    }\n}\nfunction write_numFmts(NF /*:{[n:number|string]:string}*/  /*::, opts*/ ) {\n    var o = [\n        \"<numFmts>\"\n    ];\n    [\n        [\n            5,\n            8\n        ],\n        [\n            23,\n            26\n        ],\n        [\n            41,\n            44\n        ],\n        [\n            /*63*/ 50,\n            /*66],[164,*/ 392\n        ]\n    ].forEach(function(r) {\n        for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) o[o.length] = writextag(\"numFmt\", null, {\n            numFmtId: i,\n            formatCode: escapexml(NF[i])\n        });\n    });\n    if (o.length === 1) return \"\";\n    o[o.length] = \"</numFmts>\";\n    o[0] = writextag(\"numFmts\", null, {\n        count: o.length - 2\n    }).replace(\"/>\", \">\");\n    return o.join(\"\");\n}\n/* 18.8.10 cellXfs CT_CellXfs */ var cellXF_uint = [\n    \"numFmtId\",\n    \"fillId\",\n    \"fontId\",\n    \"borderId\",\n    \"xfId\"\n];\nvar cellXF_bool = [\n    \"applyAlignment\",\n    \"applyBorder\",\n    \"applyFill\",\n    \"applyFont\",\n    \"applyNumberFormat\",\n    \"applyProtection\",\n    \"pivotButton\",\n    \"quotePrefix\"\n];\nfunction parse_cellXfs(t, styles, opts) {\n    styles.CellXf = [];\n    var xf;\n    var pass = false;\n    (t[0].match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x), i = 0;\n        switch(strip_ns(y[0])){\n            case \"<cellXfs\":\n            case \"<cellXfs>\":\n            case \"<cellXfs/>\":\n            case \"</cellXfs>\":\n                break;\n            /* 18.8.45 xf CT_Xf */ case \"<xf\":\n            case \"<xf/>\":\n                xf = y;\n                delete xf[0];\n                for(i = 0; i < cellXF_uint.length; ++i)if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);\n                for(i = 0; i < cellXF_bool.length; ++i)if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);\n                if (styles.NumberFmt && xf.numFmtId > 0x188) {\n                    for(i = 0x188; i > 0x3c; --i)if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {\n                        xf.numFmtId = i;\n                        break;\n                    }\n                }\n                styles.CellXf.push(xf);\n                break;\n            case \"</xf>\":\n                break;\n            /* 18.8.1 alignment CT_CellAlignment */ case \"<alignment\":\n            case \"<alignment/>\":\n                var alignment = {};\n                if (y.vertical) alignment.vertical = y.vertical;\n                if (y.horizontal) alignment.horizontal = y.horizontal;\n                if (y.textRotation != null) alignment.textRotation = y.textRotation;\n                if (y.indent) alignment.indent = y.indent;\n                if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);\n                xf.alignment = alignment;\n                break;\n            case \"</alignment>\":\n                break;\n            /* 18.8.33 protection CT_CellProtection */ case \"<protection\":\n                break;\n            case \"</protection>\":\n            case \"<protection/>\":\n                break;\n            /* note: sometimes mc:AlternateContent appears bare */ case \"<AlternateContent\":\n                pass = true;\n                break;\n            case \"</AlternateContent>\":\n                pass = false;\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n                break;\n            case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (opts && opts.WTF) {\n                    if (!pass) throw new Error(\"unrecognized \" + y[0] + \" in cellXfs\");\n                }\n        }\n    });\n}\nfunction write_cellXfs(cellXfs) /*:string*/ {\n    var o /*:Array<string>*/  = [];\n    o[o.length] = writextag(\"cellXfs\", null);\n    cellXfs.forEach(function(c) {\n        o[o.length] = writextag(\"xf\", null, c);\n    });\n    o[o.length] = \"</cellXfs>\";\n    if (o.length === 2) return \"\";\n    o[0] = writextag(\"cellXfs\", null, {\n        count: o.length - 2\n    }).replace(\"/>\", \">\");\n    return o.join(\"\");\n}\n/* 18.8 Styles CT_Stylesheet*/ var parse_sty_xml = /*#__PURE__*/ function make_pstyx() {\n    var numFmtRegex = /<(?:\\w+:)?numFmts([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?numFmts>/;\n    var cellXfRegex = /<(?:\\w+:)?cellXfs([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?cellXfs>/;\n    var fillsRegex = /<(?:\\w+:)?fills([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?fills>/;\n    var fontsRegex = /<(?:\\w+:)?fonts([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?fonts>/;\n    var bordersRegex = /<(?:\\w+:)?borders([^>]*)>[\\S\\s]*?<\\/(?:\\w+:)?borders>/;\n    return function parse_sty_xml(data, themes, opts) {\n        var styles = {};\n        if (!data) return styles;\n        data = data.replace(/<!--([\\s\\S]*?)-->/mg, \"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm, \"\");\n        /* 18.8.39 styleSheet CT_Stylesheet */ var t;\n        /* 18.8.31 numFmts CT_NumFmts ? */ if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);\n        /* 18.8.23 fonts CT_Fonts ? */ if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);\n        /* 18.8.21 fills CT_Fills ? */ if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);\n        /* 18.8.5  borders CT_Borders ? */ if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);\n        /* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */ /* 18.8.8  cellStyles CT_CellStyles ? */ /* 18.8.10 cellXfs CT_CellXfs ? */ if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);\n        /* 18.8.15 dxfs CT_Dxfs ? */ /* 18.8.42 tableStyles CT_TableStyles ? */ /* 18.8.11 colors CT_Colors ? */ /* 18.2.10 extLst CT_ExtensionList ? */ return styles;\n    };\n}();\nfunction write_sty_xml(wb /*:Workbook*/ , opts) /*:string*/ {\n    var o = [\n        XML_HEADER,\n        writextag(\"styleSheet\", null, {\n            \"xmlns\": XMLNS_main[0],\n            \"xmlns:vt\": XMLNS.vt\n        })\n    ], w;\n    if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;\n    o[o.length] = '<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>';\n    o[o.length] = '<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>';\n    o[o.length] = '<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';\n    o[o.length] = '<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\n    if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w;\n    o[o.length] = '<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>';\n    o[o.length] = '<dxfs count=\"0\"/>';\n    o[o.length] = '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>';\n    if (o.length > 2) {\n        o[o.length] = \"</styleSheet>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.657 BrtFmt */ function parse_BrtFmt(data, length /*:number*/ ) {\n    var numFmtId = data.read_shift(2);\n    var stFmtCode = parse_XLWideString(data, length - 2);\n    return [\n        numFmtId,\n        stFmtCode\n    ];\n}\nfunction write_BrtFmt(i /*:number*/ , f /*:string*/ , o) {\n    if (!o) o = new_buf(6 + 4 * f.length);\n    o.write_shift(2, i);\n    write_XLWideString(f, o);\n    var out = o.length > o.l ? o.slice(0, o.l) : o;\n    if (o.l == null) o.l = o.length;\n    return out;\n}\n/* [MS-XLSB] 2.4.659 BrtFont TODO */ function parse_BrtFont(data, length /*:number*/ , opts) {\n    var out = {} /*:any*/ ;\n    out.sz = data.read_shift(2) / 20;\n    var grbit = parse_FontFlags(data, 2, opts);\n    if (grbit.fItalic) out.italic = 1;\n    if (grbit.fCondense) out.condense = 1;\n    if (grbit.fExtend) out.extend = 1;\n    if (grbit.fShadow) out.shadow = 1;\n    if (grbit.fOutline) out.outline = 1;\n    if (grbit.fStrikeout) out.strike = 1;\n    var bls = data.read_shift(2);\n    if (bls === 0x02BC) out.bold = 1;\n    switch(data.read_shift(2)){\n        /* case 0: out.vertAlign = \"baseline\"; break; */ case 1:\n            out.vertAlign = \"superscript\";\n            break;\n        case 2:\n            out.vertAlign = \"subscript\";\n            break;\n    }\n    var underline = data.read_shift(1);\n    if (underline != 0) out.underline = underline;\n    var family = data.read_shift(1);\n    if (family > 0) out.family = family;\n    var bCharSet = data.read_shift(1);\n    if (bCharSet > 0) out.charset = bCharSet;\n    data.l++;\n    out.color = parse_BrtColor(data, 8);\n    switch(data.read_shift(1)){\n        /* case 0: out.scheme = \"none\": break; */ case 1:\n            out.scheme = \"major\";\n            break;\n        case 2:\n            out.scheme = \"minor\";\n            break;\n    }\n    out.name = parse_XLWideString(data, length - 21);\n    return out;\n}\nfunction write_BrtFont(font /*:any*/ , o) {\n    if (!o) o = new_buf(25 + 4 * 32);\n    o.write_shift(2, font.sz * 20);\n    write_FontFlags(font, o);\n    o.write_shift(2, font.bold ? 0x02BC : 0x0190);\n    var sss = 0;\n    if (font.vertAlign == \"superscript\") sss = 1;\n    else if (font.vertAlign == \"subscript\") sss = 2;\n    o.write_shift(2, sss);\n    o.write_shift(1, font.underline || 0);\n    o.write_shift(1, font.family || 0);\n    o.write_shift(1, font.charset || 0);\n    o.write_shift(1, 0);\n    write_BrtColor(font.color, o);\n    var scheme = 0;\n    if (font.scheme == \"major\") scheme = 1;\n    if (font.scheme == \"minor\") scheme = 2;\n    o.write_shift(1, scheme);\n    write_XLWideString(font.name, o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.650 BrtFill */ var XLSBFillPTNames = [\n    \"none\",\n    \"solid\",\n    \"mediumGray\",\n    \"darkGray\",\n    \"lightGray\",\n    \"darkHorizontal\",\n    \"darkVertical\",\n    \"darkDown\",\n    \"darkUp\",\n    \"darkGrid\",\n    \"darkTrellis\",\n    \"lightHorizontal\",\n    \"lightVertical\",\n    \"lightDown\",\n    \"lightUp\",\n    \"lightGrid\",\n    \"lightTrellis\",\n    \"gray125\",\n    \"gray0625\"\n];\nvar rev_XLSBFillPTNames /*:EvertNumType*/ ;\n/* TODO: gradient fill representation */ var parse_BrtFill = parsenoop;\nfunction write_BrtFill(fill, o) {\n    if (!o) o = new_buf(4 * 3 + 8 * 7 + 16 * 1);\n    if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames);\n    var fls /*:number*/  = rev_XLSBFillPTNames[fill.patternType];\n    if (fls == null) fls = 0x28;\n    o.write_shift(4, fls);\n    var j = 0;\n    if (fls != 0x28) {\n        /* TODO: custom FG Color */ write_BrtColor({\n            auto: 1\n        }, o);\n        /* TODO: custom BG Color */ write_BrtColor({\n            auto: 1\n        }, o);\n        for(; j < 12; ++j)o.write_shift(4, 0);\n    } else {\n        for(; j < 4; ++j)o.write_shift(4, 0);\n        for(; j < 12; ++j)o.write_shift(4, 0); /* TODO */ \n    /* iGradientType */ /* xnumDegree */ /* xnumFillToLeft */ /* xnumFillToRight */ /* xnumFillToTop */ /* xnumFillToBottom */ /* cNumStop */ /* xfillGradientStop */ }\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.824 BrtXF */ function parse_BrtXF(data, length /*:number*/ ) {\n    var tgt = data.l + length;\n    var ixfeParent = data.read_shift(2);\n    var ifmt = data.read_shift(2);\n    data.l = tgt;\n    return {\n        ixfe: ixfeParent,\n        numFmtId: ifmt\n    };\n}\nfunction write_BrtXF(data, ixfeP, o) {\n    if (!o) o = new_buf(16);\n    o.write_shift(2, ixfeP || 0);\n    o.write_shift(2, data.numFmtId || 0);\n    o.write_shift(2, 0); /* iFont */ \n    o.write_shift(2, 0); /* iFill */ \n    o.write_shift(2, 0); /* ixBorder */ \n    o.write_shift(1, 0); /* trot */ \n    o.write_shift(1, 0); /* indent */ \n    var flow = 0;\n    o.write_shift(1, flow); /* flags */ \n    o.write_shift(1, 0); /* flags */ \n    o.write_shift(1, 0); /* xfGrbitAtr */ \n    o.write_shift(1, 0);\n    return o;\n}\n/* [MS-XLSB] 2.5.4 Blxf TODO */ function write_Blxf(data, o) {\n    if (!o) o = new_buf(10);\n    o.write_shift(1, 0); /* dg */ \n    o.write_shift(1, 0);\n    o.write_shift(4, 0); /* color */ \n    o.write_shift(4, 0); /* color */ \n    return o;\n}\n/* [MS-XLSB] 2.4.302 BrtBorder TODO */ var parse_BrtBorder = parsenoop;\nfunction write_BrtBorder(border, o) {\n    if (!o) o = new_buf(51);\n    o.write_shift(1, 0); /* diagonal */ \n    write_Blxf(null, o); /* top */ \n    write_Blxf(null, o); /* bottom */ \n    write_Blxf(null, o); /* left */ \n    write_Blxf(null, o); /* right */ \n    write_Blxf(null, o); /* diag */ \n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.763 BrtStyle TODO */ function write_BrtStyle(style, o) {\n    if (!o) o = new_buf(12 + 4 * 10);\n    o.write_shift(4, style.xfId);\n    o.write_shift(2, 1);\n    o.write_shift(1, +style.builtinId);\n    o.write_shift(1, 0); /* iLevel */ \n    write_XLNullableWideString(style.name || \"\", o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.272 BrtBeginTableStyles */ function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {\n    var o = new_buf(4 + 256 * 2 * 4);\n    o.write_shift(4, cnt);\n    write_XLNullableWideString(defTableStyle, o);\n    write_XLNullableWideString(defPivotStyle, o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.1.7.50 Styles */ function parse_sty_bin(data, themes, opts) {\n    var styles = {};\n    styles.NumberFmt = [];\n    for(var y in table_fmt)styles.NumberFmt[y] = table_fmt[y];\n    styles.CellXf = [];\n    styles.Fonts = [];\n    var state /*:Array<string>*/  = [];\n    var pass = false;\n    recordhopper(data, function hopper_sty(val, R, RT) {\n        switch(RT){\n            case 0x002C:\n                /* BrtFmt */ styles.NumberFmt[val[0]] = val[1];\n                SSF_load(val[1], val[0]);\n                break;\n            case 0x002B:\n                /* BrtFont */ styles.Fonts.push(val);\n                if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {\n                    val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);\n                }\n                break;\n            case 0x0401:\n                break;\n            case 0x002D:\n                break;\n            case 0x002E:\n                break;\n            case 0x002F:\n                /* BrtXF */ if (state[state.length - 1] == 0x0269 /* BrtBeginCellXFs */ ) {\n                    styles.CellXf.push(val);\n                }\n                break;\n            case 0x0030:\n            /* BrtStyle */ case 0x01FB:\n            /* BrtDXF */ case 0x023C:\n            /* BrtMRUColor */ case 0x01DB:\n                break;\n            case 0x0493:\n            /* BrtDXF14 */ case 0x0836:\n            /* BrtDXF15 */ case 0x046A:\n            /* BrtSlicerStyleElement */ case 0x0200:\n            /* BrtTableStyleElement */ case 0x082F:\n            /* BrtTimelineStyleElement */ case 0x0C00:\n                break;\n            case 0x0023:\n                /* BrtFRTBegin */ pass = true;\n                break;\n            case 0x0024:\n                /* BrtFRTEnd */ pass = false;\n                break;\n            case 0x0025:\n                /* BrtACBegin */ state.push(RT);\n                pass = true;\n                break;\n            case 0x0026:\n                /* BrtACEnd */ state.pop();\n                pass = false;\n                break;\n            default:\n                if (R.T > 0) state.push(RT);\n                else if (R.T < 0) state.pop();\n                else if (!pass || opts.WTF && state[state.length - 1] != 0x0025 /* BrtACBegin */ ) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    });\n    return styles;\n}\nfunction write_FMTS_bin(ba, NF /*:?SSFTable*/ ) {\n    if (!NF) return;\n    var cnt = 0;\n    [\n        [\n            5,\n            8\n        ],\n        [\n            23,\n            26\n        ],\n        [\n            41,\n            44\n        ],\n        [\n            /*63*/ 50,\n            /*66],[164,*/ 392\n        ]\n    ].forEach(function(r) {\n        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) ++cnt;\n    });\n    if (cnt == 0) return;\n    write_record(ba, 0x0267 /* BrtBeginFmts */ , write_UInt32LE(cnt));\n    [\n        [\n            5,\n            8\n        ],\n        [\n            23,\n            26\n        ],\n        [\n            41,\n            44\n        ],\n        [\n            /*63*/ 50,\n            /*66],[164,*/ 392\n        ]\n    ].forEach(function(r) {\n        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) write_record(ba, 0x002C /* BrtFmt */ , write_BrtFmt(i, NF[i]));\n    });\n    write_record(ba, 0x0268 /* BrtEndFmts */ );\n}\nfunction write_FONTS_bin(ba /*::, data*/ ) {\n    var cnt = 1;\n    if (cnt == 0) return;\n    write_record(ba, 0x0263 /* BrtBeginFonts */ , write_UInt32LE(cnt));\n    write_record(ba, 0x002B /* BrtFont */ , write_BrtFont({\n        sz: 12,\n        color: {\n            theme: 1\n        },\n        name: \"Calibri\",\n        family: 2,\n        scheme: \"minor\"\n    }));\n    /* 1*65491BrtFont [ACFONTS] */ write_record(ba, 0x0264 /* BrtEndFonts */ );\n}\nfunction write_FILLS_bin(ba /*::, data*/ ) {\n    var cnt = 2;\n    if (cnt == 0) return;\n    write_record(ba, 0x025B /* BrtBeginFills */ , write_UInt32LE(cnt));\n    write_record(ba, 0x002D /* BrtFill */ , write_BrtFill({\n        patternType: \"none\"\n    }));\n    write_record(ba, 0x002D /* BrtFill */ , write_BrtFill({\n        patternType: \"gray125\"\n    }));\n    /* 1*65431BrtFill */ write_record(ba, 0x025C /* BrtEndFills */ );\n}\nfunction write_BORDERS_bin(ba /*::, data*/ ) {\n    var cnt = 1;\n    if (cnt == 0) return;\n    write_record(ba, 0x0265 /* BrtBeginBorders */ , write_UInt32LE(cnt));\n    write_record(ba, 0x002E /* BrtBorder */ , write_BrtBorder({}));\n    /* 1*65430BrtBorder */ write_record(ba, 0x0266 /* BrtEndBorders */ );\n}\nfunction write_CELLSTYLEXFS_bin(ba /*::, data*/ ) {\n    var cnt = 1;\n    write_record(ba, 0x0272 /* BrtBeginCellStyleXFs */ , write_UInt32LE(cnt));\n    write_record(ba, 0x002F /* BrtXF */ , write_BrtXF({\n        numFmtId: 0,\n        fontId: 0,\n        fillId: 0,\n        borderId: 0\n    }, 0xFFFF));\n    /* 1*65430(BrtXF *FRT) */ write_record(ba, 0x0273 /* BrtEndCellStyleXFs */ );\n}\nfunction write_CELLXFS_bin(ba, data) {\n    write_record(ba, 0x0269 /* BrtBeginCellXFs */ , write_UInt32LE(data.length));\n    data.forEach(function(c) {\n        write_record(ba, 0x002F /* BrtXF */ , write_BrtXF(c, 0));\n    });\n    /* 1*65430(BrtXF *FRT) */ write_record(ba, 0x026A /* BrtEndCellXFs */ );\n}\nfunction write_STYLES_bin(ba /*::, data*/ ) {\n    var cnt = 1;\n    write_record(ba, 0x026B /* BrtBeginStyles */ , write_UInt32LE(cnt));\n    write_record(ba, 0x0030 /* BrtStyle */ , write_BrtStyle({\n        xfId: 0,\n        builtinId: 0,\n        name: \"Normal\"\n    }));\n    /* 1*65430(BrtStyle *FRT) */ write_record(ba, 0x026C /* BrtEndStyles */ );\n}\nfunction write_DXFS_bin(ba /*::, data*/ ) {\n    var cnt = 0;\n    write_record(ba, 0x01F9 /* BrtBeginDXFs */ , write_UInt32LE(cnt));\n    /* *2147483647(BrtDXF *FRT) */ write_record(ba, 0x01FA /* BrtEndDXFs */ );\n}\nfunction write_TABLESTYLES_bin(ba /*::, data*/ ) {\n    var cnt = 0;\n    write_record(ba, 0x01FC /* BrtBeginTableStyles */ , write_BrtBeginTableStyles(cnt, \"TableStyleMedium9\", \"PivotStyleMedium4\"));\n    /* *TABLESTYLE */ write_record(ba, 0x01FD /* BrtEndTableStyles */ );\n}\nfunction write_COLORPALETTE_bin() {\n    return;\n/* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */ }\n/* [MS-XLSB] 2.1.7.50 Styles */ function write_sty_bin(wb, opts) {\n    var ba = buf_array();\n    write_record(ba, 0x0116 /* BrtBeginStyleSheet */ );\n    write_FMTS_bin(ba, wb.SSF);\n    write_FONTS_bin(ba, wb);\n    write_FILLS_bin(ba, wb);\n    write_BORDERS_bin(ba, wb);\n    write_CELLSTYLEXFS_bin(ba, wb);\n    write_CELLXFS_bin(ba, opts.cellXfs);\n    write_STYLES_bin(ba, wb);\n    write_DXFS_bin(ba, wb);\n    write_TABLESTYLES_bin(ba, wb);\n    write_COLORPALETTE_bin(ba, wb);\n    /* FRTSTYLESHEET*/ write_record(ba, 0x0117 /* BrtEndStyleSheet */ );\n    return ba.end();\n}\n/* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */ var XLSXThemeClrScheme = [\n    \"</a:lt1>\",\n    \"</a:dk1>\",\n    \"</a:lt2>\",\n    \"</a:dk2>\",\n    \"</a:accent1>\",\n    \"</a:accent2>\",\n    \"</a:accent3>\",\n    \"</a:accent4>\",\n    \"</a:accent5>\",\n    \"</a:accent6>\",\n    \"</a:hlink>\",\n    \"</a:folHlink>\"\n];\n/* 20.1.6.2 clrScheme CT_ColorScheme */ function parse_clrScheme(t, themes, opts) {\n    themes.themeElements.clrScheme = [];\n    var color = {};\n    (t[0].match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        switch(y[0]){\n            /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */ case \"<a:clrScheme\":\n            case \"</a:clrScheme>\":\n                break;\n            /* 20.1.2.3.32 srgbClr CT_SRgbColor */ case \"<a:srgbClr\":\n                color.rgb = y.val;\n                break;\n            /* 20.1.2.3.33 sysClr CT_SystemColor */ case \"<a:sysClr\":\n                color.rgb = y.lastClr;\n                break;\n            /* 20.1.4.1.1 accent1 (Accent 1) */ /* 20.1.4.1.2 accent2 (Accent 2) */ /* 20.1.4.1.3 accent3 (Accent 3) */ /* 20.1.4.1.4 accent4 (Accent 4) */ /* 20.1.4.1.5 accent5 (Accent 5) */ /* 20.1.4.1.6 accent6 (Accent 6) */ /* 20.1.4.1.9 dk1 (Dark 1) */ /* 20.1.4.1.10 dk2 (Dark 2) */ /* 20.1.4.1.15 folHlink (Followed Hyperlink) */ /* 20.1.4.1.19 hlink (Hyperlink) */ /* 20.1.4.1.22 lt1 (Light 1) */ /* 20.1.4.1.23 lt2 (Light 2) */ case \"<a:dk1>\":\n            case \"</a:dk1>\":\n            case \"<a:lt1>\":\n            case \"</a:lt1>\":\n            case \"<a:dk2>\":\n            case \"</a:dk2>\":\n            case \"<a:lt2>\":\n            case \"</a:lt2>\":\n            case \"<a:accent1>\":\n            case \"</a:accent1>\":\n            case \"<a:accent2>\":\n            case \"</a:accent2>\":\n            case \"<a:accent3>\":\n            case \"</a:accent3>\":\n            case \"<a:accent4>\":\n            case \"</a:accent4>\":\n            case \"<a:accent5>\":\n            case \"</a:accent5>\":\n            case \"<a:accent6>\":\n            case \"</a:accent6>\":\n            case \"<a:hlink>\":\n            case \"</a:hlink>\":\n            case \"<a:folHlink>\":\n            case \"</a:folHlink>\":\n                if (y[0].charAt(1) === \"/\") {\n                    themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;\n                    color = {};\n                } else {\n                    color.name = y[0].slice(3, y[0].length - 1);\n                }\n                break;\n            default:\n                if (opts && opts.WTF) throw new Error(\"Unrecognized \" + y[0] + \" in clrScheme\");\n        }\n    });\n}\n/* 20.1.4.1.18 fontScheme CT_FontScheme */ function parse_fontScheme() {}\n/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */ function parse_fmtScheme() {}\nvar clrsregex = /<a:clrScheme([^>]*)>[\\s\\S]*<\\/a:clrScheme>/;\nvar fntsregex = /<a:fontScheme([^>]*)>[\\s\\S]*<\\/a:fontScheme>/;\nvar fmtsregex = /<a:fmtScheme([^>]*)>[\\s\\S]*<\\/a:fmtScheme>/;\n/* 20.1.6.10 themeElements CT_BaseStyles */ function parse_themeElements(data, themes, opts) {\n    themes.themeElements = {};\n    var t;\n    [\n        /* clrScheme CT_ColorScheme */ [\n            \"clrScheme\",\n            clrsregex,\n            parse_clrScheme\n        ],\n        /* fontScheme CT_FontScheme */ [\n            \"fontScheme\",\n            fntsregex,\n            parse_fontScheme\n        ],\n        /* fmtScheme CT_StyleMatrix */ [\n            \"fmtScheme\",\n            fmtsregex,\n            parse_fmtScheme\n        ]\n    ].forEach(function(m) {\n        if (!(t = data.match(m[1]))) throw new Error(m[0] + \" not found in themeElements\");\n        m[2](t, themes, opts);\n    });\n}\nvar themeltregex = /<a:themeElements([^>]*)>[\\s\\S]*<\\/a:themeElements>/;\n/* 14.2.7 Theme Part */ function parse_theme_xml(data /*:string*/ , opts) {\n    /* 20.1.6.9 theme CT_OfficeStyleSheet */ if (!data || data.length === 0) data = write_theme();\n    var t;\n    var themes = {};\n    /* themeElements CT_BaseStyles */ if (!(t = data.match(themeltregex))) throw new Error(\"themeElements not found in theme\");\n    parse_themeElements(t[0], themes, opts);\n    themes.raw = data;\n    return themes;\n}\nfunction write_theme(Themes, opts) /*:string*/ {\n    if (opts && opts.themeXLSX) return opts.themeXLSX;\n    if (Themes && typeof Themes.raw == \"string\") return Themes.raw;\n    var o = [\n        XML_HEADER\n    ];\n    o[o.length] = '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\">';\n    o[o.length] = \"<a:themeElements>\";\n    o[o.length] = '<a:clrScheme name=\"Office\">';\n    o[o.length] = '<a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1>';\n    o[o.length] = '<a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1>';\n    o[o.length] = '<a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2>';\n    o[o.length] = '<a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2>';\n    o[o.length] = '<a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1>';\n    o[o.length] = '<a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2>';\n    o[o.length] = '<a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3>';\n    o[o.length] = '<a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4>';\n    o[o.length] = '<a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5>';\n    o[o.length] = '<a:accent6><a:srgbClr val=\"F79646\"/></a:accent6>';\n    o[o.length] = '<a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink>';\n    o[o.length] = '<a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink>';\n    o[o.length] = \"</a:clrScheme>\";\n    o[o.length] = '<a:fontScheme name=\"Office\">';\n    o[o.length] = \"<a:majorFont>\";\n    o[o.length] = '<a:latin typeface=\"Cambria\"/>';\n    o[o.length] = '<a:ea typeface=\"\"/>';\n    o[o.length] = '<a:cs typeface=\"\"/>';\n    o[o.length] = '<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>';\n    o[o.length] = '<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>';\n    o[o.length] = '<a:font script=\"Hans\" typeface=\"宋体\"/>';\n    o[o.length] = '<a:font script=\"Hant\" typeface=\"新細明體\"/>';\n    o[o.length] = '<a:font script=\"Arab\" typeface=\"Times New Roman\"/>';\n    o[o.length] = '<a:font script=\"Hebr\" typeface=\"Times New Roman\"/>';\n    o[o.length] = '<a:font script=\"Thai\" typeface=\"Tahoma\"/>';\n    o[o.length] = '<a:font script=\"Ethi\" typeface=\"Nyala\"/>';\n    o[o.length] = '<a:font script=\"Beng\" typeface=\"Vrinda\"/>';\n    o[o.length] = '<a:font script=\"Gujr\" typeface=\"Shruti\"/>';\n    o[o.length] = '<a:font script=\"Khmr\" typeface=\"MoolBoran\"/>';\n    o[o.length] = '<a:font script=\"Knda\" typeface=\"Tunga\"/>';\n    o[o.length] = '<a:font script=\"Guru\" typeface=\"Raavi\"/>';\n    o[o.length] = '<a:font script=\"Cans\" typeface=\"Euphemia\"/>';\n    o[o.length] = '<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>';\n    o[o.length] = '<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>';\n    o[o.length] = '<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>';\n    o[o.length] = '<a:font script=\"Thaa\" typeface=\"MV Boli\"/>';\n    o[o.length] = '<a:font script=\"Deva\" typeface=\"Mangal\"/>';\n    o[o.length] = '<a:font script=\"Telu\" typeface=\"Gautami\"/>';\n    o[o.length] = '<a:font script=\"Taml\" typeface=\"Latha\"/>';\n    o[o.length] = '<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>';\n    o[o.length] = '<a:font script=\"Orya\" typeface=\"Kalinga\"/>';\n    o[o.length] = '<a:font script=\"Mlym\" typeface=\"Kartika\"/>';\n    o[o.length] = '<a:font script=\"Laoo\" typeface=\"DokChampa\"/>';\n    o[o.length] = '<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>';\n    o[o.length] = '<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>';\n    o[o.length] = '<a:font script=\"Viet\" typeface=\"Times New Roman\"/>';\n    o[o.length] = '<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>';\n    o[o.length] = '<a:font script=\"Geor\" typeface=\"Sylfaen\"/>';\n    o[o.length] = \"</a:majorFont>\";\n    o[o.length] = \"<a:minorFont>\";\n    o[o.length] = '<a:latin typeface=\"Calibri\"/>';\n    o[o.length] = '<a:ea typeface=\"\"/>';\n    o[o.length] = '<a:cs typeface=\"\"/>';\n    o[o.length] = '<a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/>';\n    o[o.length] = '<a:font script=\"Hang\" typeface=\"맑은 고딕\"/>';\n    o[o.length] = '<a:font script=\"Hans\" typeface=\"宋体\"/>';\n    o[o.length] = '<a:font script=\"Hant\" typeface=\"新細明體\"/>';\n    o[o.length] = '<a:font script=\"Arab\" typeface=\"Arial\"/>';\n    o[o.length] = '<a:font script=\"Hebr\" typeface=\"Arial\"/>';\n    o[o.length] = '<a:font script=\"Thai\" typeface=\"Tahoma\"/>';\n    o[o.length] = '<a:font script=\"Ethi\" typeface=\"Nyala\"/>';\n    o[o.length] = '<a:font script=\"Beng\" typeface=\"Vrinda\"/>';\n    o[o.length] = '<a:font script=\"Gujr\" typeface=\"Shruti\"/>';\n    o[o.length] = '<a:font script=\"Khmr\" typeface=\"DaunPenh\"/>';\n    o[o.length] = '<a:font script=\"Knda\" typeface=\"Tunga\"/>';\n    o[o.length] = '<a:font script=\"Guru\" typeface=\"Raavi\"/>';\n    o[o.length] = '<a:font script=\"Cans\" typeface=\"Euphemia\"/>';\n    o[o.length] = '<a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>';\n    o[o.length] = '<a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>';\n    o[o.length] = '<a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>';\n    o[o.length] = '<a:font script=\"Thaa\" typeface=\"MV Boli\"/>';\n    o[o.length] = '<a:font script=\"Deva\" typeface=\"Mangal\"/>';\n    o[o.length] = '<a:font script=\"Telu\" typeface=\"Gautami\"/>';\n    o[o.length] = '<a:font script=\"Taml\" typeface=\"Latha\"/>';\n    o[o.length] = '<a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>';\n    o[o.length] = '<a:font script=\"Orya\" typeface=\"Kalinga\"/>';\n    o[o.length] = '<a:font script=\"Mlym\" typeface=\"Kartika\"/>';\n    o[o.length] = '<a:font script=\"Laoo\" typeface=\"DokChampa\"/>';\n    o[o.length] = '<a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>';\n    o[o.length] = '<a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>';\n    o[o.length] = '<a:font script=\"Viet\" typeface=\"Arial\"/>';\n    o[o.length] = '<a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>';\n    o[o.length] = '<a:font script=\"Geor\" typeface=\"Sylfaen\"/>';\n    o[o.length] = \"</a:minorFont>\";\n    o[o.length] = \"</a:fontScheme>\";\n    o[o.length] = '<a:fmtScheme name=\"Office\">';\n    o[o.length] = \"<a:fillStyleLst>\";\n    o[o.length] = '<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>';\n    o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n    o[o.length] = \"<a:gsLst>\";\n    o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n    o[o.length] = '<a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n    o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n    o[o.length] = \"</a:gsLst>\";\n    o[o.length] = '<a:lin ang=\"16200000\" scaled=\"1\"/>';\n    o[o.length] = \"</a:gradFill>\";\n    o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n    o[o.length] = \"<a:gsLst>\";\n    o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs>';\n    o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n    o[o.length] = \"</a:gsLst>\";\n    o[o.length] = '<a:lin ang=\"16200000\" scaled=\"0\"/>';\n    o[o.length] = \"</a:gradFill>\";\n    o[o.length] = \"</a:fillStyleLst>\";\n    o[o.length] = \"<a:lnStyleLst>\";\n    o[o.length] = '<a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n    o[o.length] = '<a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n    o[o.length] = '<a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln>';\n    o[o.length] = \"</a:lnStyleLst>\";\n    o[o.length] = \"<a:effectStyleLst>\";\n    o[o.length] = \"<a:effectStyle>\";\n    o[o.length] = \"<a:effectLst>\";\n    o[o.length] = '<a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw>';\n    o[o.length] = \"</a:effectLst>\";\n    o[o.length] = \"</a:effectStyle>\";\n    o[o.length] = \"<a:effectStyle>\";\n    o[o.length] = \"<a:effectLst>\";\n    o[o.length] = '<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>';\n    o[o.length] = \"</a:effectLst>\";\n    o[o.length] = \"</a:effectStyle>\";\n    o[o.length] = \"<a:effectStyle>\";\n    o[o.length] = \"<a:effectLst>\";\n    o[o.length] = '<a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw>';\n    o[o.length] = \"</a:effectLst>\";\n    o[o.length] = '<a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d>';\n    o[o.length] = '<a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d>';\n    o[o.length] = \"</a:effectStyle>\";\n    o[o.length] = \"</a:effectStyleLst>\";\n    o[o.length] = \"<a:bgFillStyleLst>\";\n    o[o.length] = '<a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill>';\n    o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n    o[o.length] = \"<a:gsLst>\";\n    o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n    o[o.length] = '<a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs>';\n    o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs>';\n    o[o.length] = \"</a:gsLst>\";\n    o[o.length] = '<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path>';\n    o[o.length] = \"</a:gradFill>\";\n    o[o.length] = '<a:gradFill rotWithShape=\"1\">';\n    o[o.length] = \"<a:gsLst>\";\n    o[o.length] = '<a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs>';\n    o[o.length] = '<a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs>';\n    o[o.length] = \"</a:gsLst>\";\n    o[o.length] = '<a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path>';\n    o[o.length] = \"</a:gradFill>\";\n    o[o.length] = \"</a:bgFillStyleLst>\";\n    o[o.length] = \"</a:fmtScheme>\";\n    o[o.length] = \"</a:themeElements>\";\n    o[o.length] = \"<a:objectDefaults>\";\n    o[o.length] = \"<a:spDef>\";\n    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style>';\n    o[o.length] = \"</a:spDef>\";\n    o[o.length] = \"<a:lnDef>\";\n    o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style>';\n    o[o.length] = \"</a:lnDef>\";\n    o[o.length] = \"</a:objectDefaults>\";\n    o[o.length] = \"<a:extraClrSchemeLst/>\";\n    o[o.length] = \"</a:theme>\";\n    return o.join(\"\");\n}\n/* [MS-XLS] 2.4.326 TODO: payload is a zip file */ function parse_Theme(blob, length, opts) {\n    var end = blob.l + length;\n    var dwThemeVersion = blob.read_shift(4);\n    if (dwThemeVersion === 124226) return;\n    if (!opts.cellStyles) {\n        blob.l = end;\n        return;\n    }\n    var data = blob.slice(blob.l);\n    blob.l = end;\n    var zip;\n    try {\n        zip = zip_read(data, {\n            type: \"array\"\n        });\n    } catch (e) {\n        return;\n    }\n    var themeXML = getzipstr(zip, \"theme/theme/theme1.xml\", true);\n    if (!themeXML) return;\n    return parse_theme_xml(themeXML, opts);\n}\n/* 2.5.49 */ function parse_ColorTheme(blob /*::, length*/ ) {\n    return blob.read_shift(4);\n}\n/* 2.5.155 */ function parse_FullColorExt(blob /*::, length*/ ) {\n    var o = {};\n    o.xclrType = blob.read_shift(2);\n    o.nTintShade = blob.read_shift(2);\n    switch(o.xclrType){\n        case 0:\n            blob.l += 4;\n            break;\n        case 1:\n            o.xclrValue = parse_IcvXF(blob, 4);\n            break;\n        case 2:\n            o.xclrValue = parse_LongRGBA(blob, 4);\n            break;\n        case 3:\n            o.xclrValue = parse_ColorTheme(blob, 4);\n            break;\n        case 4:\n            blob.l += 4;\n            break;\n    }\n    blob.l += 8;\n    return o;\n}\n/* 2.5.164 TODO: read 7 bits*/ function parse_IcvXF(blob, length) {\n    return parsenoop(blob, length);\n}\n/* 2.5.280 */ function parse_XFExtGradient(blob, length) {\n    return parsenoop(blob, length);\n}\n/* [MS-XLS] 2.5.108 */ function parse_ExtProp(blob /*::, length*/ ) /*:Array<any>*/ {\n    var extType = blob.read_shift(2);\n    var cb = blob.read_shift(2) - 4;\n    var o = [\n        extType\n    ];\n    switch(extType){\n        case 0x04:\n        case 0x05:\n        case 0x07:\n        case 0x08:\n        case 0x09:\n        case 0x0A:\n        case 0x0B:\n        case 0x0D:\n            o[1] = parse_FullColorExt(blob, cb);\n            break;\n        case 0x06:\n            o[1] = parse_XFExtGradient(blob, cb);\n            break;\n        case 0x0E:\n        case 0x0F:\n            o[1] = blob.read_shift(cb === 1 ? 1 : 2);\n            break;\n        default:\n            throw new Error(\"Unrecognized ExtProp type: \" + extType + \" \" + cb);\n    }\n    return o;\n}\n/* 2.4.355 */ function parse_XFExt(blob, length) {\n    var end = blob.l + length;\n    blob.l += 2;\n    var ixfe = blob.read_shift(2);\n    blob.l += 2;\n    var cexts = blob.read_shift(2);\n    var ext /*:AOA*/  = [];\n    while(cexts-- > 0)ext.push(parse_ExtProp(blob, end - blob.l));\n    return {\n        ixfe: ixfe,\n        ext: ext\n    };\n}\n/* xf is an XF, see parse_XFExt for xfext */ function update_xfext(xf, xfext) {\n    xfext.forEach(function(xfe) {\n        switch(xfe[0]){\n            case 0x04:\n                break; /* foreground color */ \n            case 0x05:\n                break; /* background color */ \n            case 0x06:\n                break; /* gradient fill */ \n            case 0x07:\n                break; /* top cell border color */ \n            case 0x08:\n                break; /* bottom cell border color */ \n            case 0x09:\n                break; /* left cell border color */ \n            case 0x0a:\n                break; /* right cell border color */ \n            case 0x0b:\n                break; /* diagonal cell border color */ \n            case 0x0d:\n                break;\n            case 0x0e:\n                break; /* font scheme */ \n            case 0x0f:\n                break; /* indentation level */ \n        }\n    });\n}\nfunction parse_BrtMdtinfo(data, length) {\n    return {\n        flags: data.read_shift(4),\n        version: data.read_shift(4),\n        name: parse_XLWideString(data, length - 8)\n    };\n}\nfunction write_BrtMdtinfo(data) {\n    var o = new_buf(12 + 2 * data.name.length);\n    o.write_shift(4, data.flags);\n    o.write_shift(4, data.version);\n    write_XLWideString(data.name, o);\n    return o.slice(0, o.l);\n}\nfunction parse_BrtMdb(data) {\n    var out = [];\n    var cnt = data.read_shift(4);\n    while(cnt-- > 0)out.push([\n        data.read_shift(4),\n        data.read_shift(4)\n    ]);\n    return out;\n}\nfunction write_BrtMdb(mdb) {\n    var o = new_buf(4 + 8 * mdb.length);\n    o.write_shift(4, mdb.length);\n    for(var i = 0; i < mdb.length; ++i){\n        o.write_shift(4, mdb[i][0]);\n        o.write_shift(4, mdb[i][1]);\n    }\n    return o;\n}\nfunction write_BrtBeginEsfmd(cnt, name) {\n    var o = new_buf(8 + 2 * name.length);\n    o.write_shift(4, cnt);\n    write_XLWideString(name, o);\n    return o.slice(0, o.l);\n}\nfunction parse_BrtBeginEsmdb(data) {\n    data.l += 4;\n    return data.read_shift(4) != 0;\n}\nfunction write_BrtBeginEsmdb(cnt, cm) {\n    var o = new_buf(8);\n    o.write_shift(4, cnt);\n    o.write_shift(4, cm ? 1 : 0);\n    return o;\n}\nfunction parse_xlmeta_bin(data, name, _opts) {\n    var out = {\n        Types: [],\n        Cell: [],\n        Value: []\n    };\n    var opts = _opts || {};\n    var state = [];\n    var pass = false;\n    var metatype = 2;\n    recordhopper(data, function(val, R, RT) {\n        switch(RT){\n            case 335:\n                out.Types.push({\n                    name: val.name\n                });\n                break;\n            case 51:\n                val.forEach(function(r) {\n                    if (metatype == 1) out.Cell.push({\n                        type: out.Types[r[0] - 1].name,\n                        index: r[1]\n                    });\n                    else if (metatype == 0) out.Value.push({\n                        type: out.Types[r[0] - 1].name,\n                        index: r[1]\n                    });\n                });\n                break;\n            case 337:\n                metatype = val ? 1 : 0;\n                break;\n            case 338:\n                metatype = 2;\n                break;\n            case 35:\n                state.push(RT);\n                pass = true;\n                break;\n            case 36:\n                state.pop();\n                pass = false;\n                break;\n            default:\n                if (R.T) {} else if (!pass || opts.WTF && state[state.length - 1] != 35) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    });\n    return out;\n}\nfunction write_xlmeta_bin() {\n    var ba = buf_array();\n    write_record(ba, 332);\n    write_record(ba, 334, write_UInt32LE(1));\n    write_record(ba, 335, write_BrtMdtinfo({\n        name: \"XLDAPR\",\n        version: 12e4,\n        flags: 3496657072\n    }));\n    write_record(ba, 336);\n    write_record(ba, 339, write_BrtBeginEsfmd(1, \"XLDAPR\"));\n    write_record(ba, 52);\n    write_record(ba, 35, write_UInt32LE(514));\n    write_record(ba, 4096, write_UInt32LE(0));\n    write_record(ba, 4097, writeuint16(1));\n    write_record(ba, 36);\n    write_record(ba, 53);\n    write_record(ba, 340);\n    write_record(ba, 337, write_BrtBeginEsmdb(1, true));\n    write_record(ba, 51, write_BrtMdb([\n        [\n            1,\n            0\n        ]\n    ]));\n    write_record(ba, 338);\n    write_record(ba, 333);\n    return ba.end();\n}\nfunction parse_xlmeta_xml(data, name, opts) {\n    var out = {\n        Types: [],\n        Cell: [],\n        Value: []\n    };\n    if (!data) return out;\n    var pass = false;\n    var metatype = 2;\n    var lastmeta;\n    data.replace(tagregex, function(x) {\n        var y = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<?xml\":\n                break;\n            case \"<metadata\":\n            case \"</metadata>\":\n                break;\n            case \"<metadataTypes\":\n            case \"</metadataTypes>\":\n                break;\n            case \"<metadataType\":\n                out.Types.push({\n                    name: y.name\n                });\n                break;\n            case \"</metadataType>\":\n                break;\n            case \"<futureMetadata\":\n                for(var j = 0; j < out.Types.length; ++j)if (out.Types[j].name == y.name) lastmeta = out.Types[j];\n                break;\n            case \"</futureMetadata>\":\n                break;\n            case \"<bk>\":\n                break;\n            case \"</bk>\":\n                break;\n            case \"<rc\":\n                if (metatype == 1) out.Cell.push({\n                    type: out.Types[y.t - 1].name,\n                    index: +y.v\n                });\n                else if (metatype == 0) out.Value.push({\n                    type: out.Types[y.t - 1].name,\n                    index: +y.v\n                });\n                break;\n            case \"</rc>\":\n                break;\n            case \"<cellMetadata\":\n                metatype = 1;\n                break;\n            case \"</cellMetadata>\":\n                metatype = 2;\n                break;\n            case \"<valueMetadata\":\n                metatype = 0;\n                break;\n            case \"</valueMetadata>\":\n                metatype = 2;\n                break;\n            case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n            case \"<extLst/>\":\n                break;\n            case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            case \"<rvb\":\n                if (!lastmeta) break;\n                if (!lastmeta.offsets) lastmeta.offsets = [];\n                lastmeta.offsets.push(+y.i);\n                break;\n            default:\n                if (!pass && opts.WTF) throw new Error(\"unrecognized \" + y[0] + \" in metadata\");\n        }\n        return x;\n    });\n    return out;\n}\nfunction write_xlmeta_xml() {\n    var o = [\n        XML_HEADER\n    ];\n    o.push('<metadata xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:xlrd=\"http://schemas.microsoft.com/office/spreadsheetml/2017/richdata\" xmlns:xda=\"http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray\">\\n  <metadataTypes count=\"1\">\\n    <metadataType name=\"XLDAPR\" minSupportedVersion=\"120000\" copy=\"1\" pasteAll=\"1\" pasteValues=\"1\" merge=\"1\" splitFirst=\"1\" rowColShift=\"1\" clearFormats=\"1\" clearComments=\"1\" assign=\"1\" coerce=\"1\" cellMeta=\"1\"/>\\n  </metadataTypes>\\n  <futureMetadata name=\"XLDAPR\" count=\"1\">\\n    <bk>\\n      <extLst>\\n        <ext uri=\"{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}\">\\n          <xda:dynamicArrayProperties fDynamic=\"1\" fCollapsed=\"0\"/>\\n        </ext>\\n      </extLst>\\n    </bk>\\n  </futureMetadata>\\n  <cellMetadata count=\"1\">\\n    <bk>\\n      <rc t=\"1\" v=\"0\"/>\\n    </bk>\\n  </cellMetadata>\\n</metadata>');\n    return o.join(\"\");\n}\n/* 18.6 Calculation Chain */ function parse_cc_xml(data /*::, name, opts*/ ) /*:Array<any>*/ {\n    var d = [];\n    if (!data) return d;\n    var i = 1;\n    (data.match(tagregex) || []).forEach(function(x) {\n        var y = parsexmltag(x);\n        switch(y[0]){\n            case \"<?xml\":\n                break;\n            /* 18.6.2  calcChain CT_CalcChain 1 */ case \"<calcChain\":\n            case \"<calcChain>\":\n            case \"</calcChain>\":\n                break;\n            /* 18.6.1  c CT_CalcCell 1 */ case \"<c\":\n                delete y[0];\n                if (y.i) i = y.i;\n                else y.i = i;\n                d.push(y);\n                break;\n        }\n    });\n    return d;\n}\n//function write_cc_xml(data, opts) { }\n/* [MS-XLSB] 2.6.4.1 */ function parse_BrtCalcChainItem$(data) {\n    var out = {};\n    out.i = data.read_shift(4);\n    var cell = {};\n    cell.r = data.read_shift(4);\n    cell.c = data.read_shift(4);\n    out.r = encode_cell(cell);\n    var flags = data.read_shift(1);\n    if (flags & 0x2) out.l = \"1\";\n    if (flags & 0x8) out.a = \"1\";\n    return out;\n}\n/* 18.6 Calculation Chain */ function parse_cc_bin(data, name, opts) {\n    var out = [];\n    var pass = false;\n    recordhopper(data, function hopper_cc(val, R, RT) {\n        switch(RT){\n            case 0x003F:\n                /* 'BrtCalcChainItem$' */ out.push(val);\n                break;\n            default:\n                if (R.T) {} else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    });\n    return out;\n}\n//function write_cc_bin(data, opts) { }\n/* 18.14 Supplementary Workbook Data */ function parse_xlink_xml() {\n//var opts = _opts || {};\n//if(opts.WTF) throw \"XLSX External Link\";\n}\n/* [MS-XLSB] 2.1.7.25 External Link */ function parse_xlink_bin(data, rel, name /*:string*/ , _opts) {\n    if (!data) return data;\n    var opts = _opts || {};\n    var pass = false, end = false;\n    recordhopper(data, function xlink_parse(val, R, RT) {\n        if (end) return;\n        switch(RT){\n            case 0x0167:\n            /* 'BrtSupTabs' */ case 0x016B:\n            /* 'BrtExternTableStart' */ case 0x016C:\n            /* 'BrtExternTableEnd' */ case 0x016E:\n            /* 'BrtExternRowHdr' */ case 0x016F:\n            /* 'BrtExternCellBlank' */ case 0x0170:\n            /* 'BrtExternCellReal' */ case 0x0171:\n            /* 'BrtExternCellBool' */ case 0x0172:\n            /* 'BrtExternCellError' */ case 0x0173:\n            /* 'BrtExternCellString' */ case 0x01D8:\n            /* 'BrtExternValueMeta' */ case 0x0241:\n            /* 'BrtSupNameStart' */ case 0x0242:\n            /* 'BrtSupNameValueStart' */ case 0x0243:\n            /* 'BrtSupNameValueEnd' */ case 0x0244:\n            /* 'BrtSupNameNum' */ case 0x0245:\n            /* 'BrtSupNameErr' */ case 0x0246:\n            /* 'BrtSupNameSt' */ case 0x0247:\n            /* 'BrtSupNameNil' */ case 0x0248:\n            /* 'BrtSupNameBool' */ case 0x0249:\n            /* 'BrtSupNameFmla' */ case 0x024A:\n            /* 'BrtSupNameBits' */ case 0x024B:\n                break;\n            case 0x0023:\n                /* 'BrtFRTBegin' */ pass = true;\n                break;\n            case 0x0024:\n                /* 'BrtFRTEnd' */ pass = false;\n                break;\n            default:\n                if (R.T) {} else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    }, opts);\n}\n/* 20.5 DrawingML - SpreadsheetML Drawing */ /* 20.5.2.35 wsDr CT_Drawing */ function parse_drawing(data, rels /*:any*/ ) {\n    if (!data) return \"??\";\n    /*\n\t  Chartsheet Drawing:\n\t   - 20.5.2.35 wsDr CT_Drawing\n\t    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor\n\t     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame\n\t      - 20.1.2.2.16 graphic CT_GraphicalObject\n\t       - 20.1.2.2.17 graphicData CT_GraphicalObjectData\n          - chart reference\n\t   the actual type is based on the URI of the graphicData\n\t\tTODO: handle embedded charts and other types of graphics\n\t*/ var id = (data.match(/<c:chart [^>]*r:id=\"([^\"]*)\"/) || [\n        \"\",\n        \"\"\n    ])[1];\n    return rels[\"!id\"][id].Target;\n}\n/* L.5.5.2 SpreadsheetML Comments + VML Schema */ var _shapeid = 1024;\nfunction write_comments_vml(rId /*:number*/ , comments) {\n    var csize = [\n        21600,\n        21600\n    ];\n    /* L.5.2.1.2 Path Attribute */ var bbox = [\n        \"m0,0l0\",\n        csize[1],\n        csize[0],\n        csize[1],\n        csize[0],\n        \"0xe\"\n    ].join(\",\");\n    var o = [\n        writextag(\"xml\", null, {\n            \"xmlns:v\": XLMLNS.v,\n            \"xmlns:o\": XLMLNS.o,\n            \"xmlns:x\": XLMLNS.x,\n            \"xmlns:mv\": XLMLNS.mv\n        }).replace(/\\/>/, \">\"),\n        writextag(\"o:shapelayout\", writextag(\"o:idmap\", null, {\n            \"v:ext\": \"edit\",\n            \"data\": rId\n        }), {\n            \"v:ext\": \"edit\"\n        }),\n        writextag(\"v:shapetype\", [\n            writextag(\"v:stroke\", null, {\n                joinstyle: \"miter\"\n            }),\n            writextag(\"v:path\", null, {\n                gradientshapeok: \"t\",\n                \"o:connecttype\": \"rect\"\n            })\n        ].join(\"\"), {\n            id: \"_x0000_t202\",\n            \"o:spt\": 202,\n            coordsize: csize.join(\",\"),\n            path: bbox\n        })\n    ];\n    while(_shapeid < rId * 1000)_shapeid += 1000;\n    comments.forEach(function(x) {\n        var c = decode_cell(x[0]);\n        var fillopts = /*::(*/ {\n            \"color2\": \"#BEFF82\",\n            \"type\": \"gradient\"\n        } /*:: :any)*/ ;\n        if (fillopts.type == \"gradient\") fillopts.angle = \"-180\";\n        var fillparm = fillopts.type == \"gradient\" ? writextag(\"o:fill\", null, {\n            type: \"gradientUnscaled\",\n            \"v:ext\": \"view\"\n        }) : null;\n        var fillxml = writextag(\"v:fill\", fillparm, fillopts);\n        var shadata = {\n            on: \"t\",\n            \"obscured\": \"t\"\n        } /*:any*/ ;\n        ++_shapeid;\n        o = o.concat([\n            \"<v:shape\" + wxt_helper({\n                id: \"_x0000_s\" + _shapeid,\n                type: \"#_x0000_t202\",\n                style: \"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10\" + (x[1].hidden ? \";visibility:hidden\" : \"\"),\n                fillcolor: \"#ECFAD4\",\n                strokecolor: \"#edeaa1\"\n            }) + \">\",\n            fillxml,\n            writextag(\"v:shadow\", null, shadata),\n            writextag(\"v:path\", null, {\n                \"o:connecttype\": \"none\"\n            }),\n            '<v:textbox><div style=\"text-align:left\"></div></v:textbox>',\n            '<x:ClientData ObjectType=\"Note\">',\n            \"<x:MoveWithCells/>\",\n            \"<x:SizeWithCells/>\",\n            /* Part 4 19.4.2.3 Anchor (Anchor) */ writetag(\"x:Anchor\", [\n                c.c + 1,\n                0,\n                c.r + 1,\n                0,\n                c.c + 3,\n                20,\n                c.r + 5,\n                20\n            ].join(\",\")),\n            writetag(\"x:AutoFill\", \"False\"),\n            writetag(\"x:Row\", String(c.r)),\n            writetag(\"x:Column\", String(c.c)),\n            x[1].hidden ? \"\" : \"<x:Visible/>\",\n            \"</x:ClientData>\",\n            \"</v:shape>\"\n        ]);\n    });\n    o.push(\"</xml>\");\n    return o.join(\"\");\n}\nfunction sheet_insert_comments(sheet, comments /*:Array<RawComment>*/ , threaded /*:boolean*/ , people /*:?Array<any>*/ ) {\n    var dense = Array.isArray(sheet);\n    var cell /*:Cell*/ ;\n    comments.forEach(function(comment) {\n        var r = decode_cell(comment.ref);\n        if (dense) {\n            if (!sheet[r.r]) sheet[r.r] = [];\n            cell = sheet[r.r][r.c];\n        } else cell = sheet[comment.ref];\n        if (!cell) {\n            cell = {\n                t: \"z\"\n            } /*:any*/ ;\n            if (dense) sheet[r.r][r.c] = cell;\n            else sheet[comment.ref] = cell;\n            var range = safe_decode_range(sheet[\"!ref\"] || \"BDWGO1000001:A1\");\n            if (range.s.r > r.r) range.s.r = r.r;\n            if (range.e.r < r.r) range.e.r = r.r;\n            if (range.s.c > r.c) range.s.c = r.c;\n            if (range.e.c < r.c) range.e.c = r.c;\n            var encoded = encode_range(range);\n            if (encoded !== sheet[\"!ref\"]) sheet[\"!ref\"] = encoded;\n        }\n        if (!cell.c) cell.c = [];\n        var o /*:Comment*/  = {\n            a: comment.author,\n            t: comment.t,\n            r: comment.r,\n            T: threaded\n        };\n        if (comment.h) o.h = comment.h;\n        /* threaded comments always override */ for(var i = cell.c.length - 1; i >= 0; --i){\n            if (!threaded && cell.c[i].T) return;\n            if (threaded && !cell.c[i].T) cell.c.splice(i, 1);\n        }\n        if (threaded && people) for(i = 0; i < people.length; ++i){\n            if (o.a == people[i].id) {\n                o.a = people[i].name || o.a;\n                break;\n            }\n        }\n        cell.c.push(o);\n    });\n}\n/* 18.7 Comments */ function parse_comments_xml(data /*:string*/ , opts) /*:Array<RawComment>*/ {\n    /* 18.7.6 CT_Comments */ if (data.match(/<(?:\\w+:)?comments *\\/>/)) return [];\n    var authors /*:Array<string>*/  = [];\n    var commentList /*:Array<RawComment>*/  = [];\n    var authtag = data.match(/<(?:\\w+:)?authors>([\\s\\S]*)<\\/(?:\\w+:)?authors>/);\n    if (authtag && authtag[1]) authtag[1].split(/<\\/\\w*:?author>/).forEach(function(x) {\n        if (x === \"\" || x.trim() === \"\") return;\n        var a = x.match(/<(?:\\w+:)?author[^>]*>(.*)/);\n        if (a) authors.push(a[1]);\n    });\n    var cmnttag = data.match(/<(?:\\w+:)?commentList>([\\s\\S]*)<\\/(?:\\w+:)?commentList>/);\n    if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\\/\\w*:?comment>/).forEach(function(x) {\n        if (x === \"\" || x.trim() === \"\") return;\n        var cm = x.match(/<(?:\\w+:)?comment[^>]*>/);\n        if (!cm) return;\n        var y = parsexmltag(cm[0]);\n        var comment /*:RawComment*/  = {\n            author: y.authorId && authors[y.authorId] || \"sheetjsghost\",\n            ref: y.ref,\n            guid: y.guid\n        } /*:any*/ ;\n        var cell = decode_cell(y.ref);\n        if (opts.sheetRows && opts.sheetRows <= cell.r) return;\n        var textMatch = x.match(/<(?:\\w+:)?text>([\\s\\S]*)<\\/(?:\\w+:)?text>/);\n        var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {\n            r: \"\",\n            t: \"\",\n            h: \"\"\n        };\n        comment.r = rt.r;\n        if (rt.r == \"<t></t>\") rt.t = rt.h = \"\";\n        comment.t = (rt.t || \"\").replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n        if (opts.cellHTML) comment.h = rt.h;\n        commentList.push(comment);\n    });\n    return commentList;\n}\nfunction write_comments_xml(data /*::, opts*/ ) {\n    var o = [\n        XML_HEADER,\n        writextag(\"comments\", null, {\n            \"xmlns\": XMLNS_main[0]\n        })\n    ];\n    var iauthor /*:Array<string>*/  = [];\n    o.push(\"<authors>\");\n    data.forEach(function(x) {\n        x[1].forEach(function(w) {\n            var a = escapexml(w.a);\n            if (iauthor.indexOf(a) == -1) {\n                iauthor.push(a);\n                o.push(\"<author>\" + a + \"</author>\");\n            }\n            if (w.T && w.ID && iauthor.indexOf(\"tc=\" + w.ID) == -1) {\n                iauthor.push(\"tc=\" + w.ID);\n                o.push(\"<author>\" + \"tc=\" + w.ID + \"</author>\");\n            }\n        });\n    });\n    if (iauthor.length == 0) {\n        iauthor.push(\"SheetJ5\");\n        o.push(\"<author>SheetJ5</author>\");\n    }\n    o.push(\"</authors>\");\n    o.push(\"<commentList>\");\n    data.forEach(function(d) {\n        /* 18.7.3 CT_Comment */ var lastauthor = 0, ts = [];\n        if (d[1][0] && d[1][0].T && d[1][0].ID) lastauthor = iauthor.indexOf(\"tc=\" + d[1][0].ID);\n        else d[1].forEach(function(c) {\n            if (c.a) lastauthor = iauthor.indexOf(escapexml(c.a));\n            ts.push(c.t || \"\");\n        });\n        o.push('<comment ref=\"' + d[0] + '\" authorId=\"' + lastauthor + '\"><text>');\n        if (ts.length <= 1) o.push(writetag(\"t\", escapexml(ts[0] || \"\")));\n        else {\n            /* based on Threaded Comments -> Comments projection */ var t = \"Comment:\\n    \" + ts[0] + \"\\n\";\n            for(var i = 1; i < ts.length; ++i)t += \"Reply:\\n    \" + ts[i] + \"\\n\";\n            o.push(writetag(\"t\", escapexml(t)));\n        }\n        o.push(\"</text></comment>\");\n    });\n    o.push(\"</commentList>\");\n    if (o.length > 2) {\n        o[o.length] = \"</comments>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* [MS-XLSX] 2.1.17 */ function parse_tcmnt_xml(data /*:string*/ , opts) /*:Array<RawComment>*/ {\n    var out = [];\n    var pass = false, comment = {}, tidx = 0;\n    data.replace(tagregex, function xml_tcmnt(x, idx) {\n        var y /*:any*/  = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<?xml\":\n                break;\n            /* 2.6.207 ThreadedComments CT_ThreadedComments */ case \"<ThreadedComments\":\n                break;\n            case \"</ThreadedComments>\":\n                break;\n            /* 2.6.205 threadedComment CT_ThreadedComment */ case \"<threadedComment\":\n                comment = {\n                    author: y.personId,\n                    guid: y.id,\n                    ref: y.ref,\n                    T: 1\n                };\n                break;\n            case \"</threadedComment>\":\n                if (comment.t != null) out.push(comment);\n                break;\n            case \"<text>\":\n            case \"<text\":\n                tidx = idx + x.length;\n                break;\n            case \"</text>\":\n                comment.t = data.slice(tidx, idx).replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n                break;\n            /* 2.6.206 mentions CT_ThreadedCommentMentions TODO */ case \"<mentions\":\n            case \"<mentions>\":\n                pass = true;\n                break;\n            case \"</mentions>\":\n                pass = false;\n                break;\n            /* 2.6.202 mention CT_Mention TODO */ /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n            case \"<extLst/>\":\n                break;\n            /* 18.2.7  ext CT_Extension + */ case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (!pass && opts.WTF) throw new Error(\"unrecognized \" + y[0] + \" in threaded comments\");\n        }\n        return x;\n    });\n    return out;\n}\nfunction write_tcmnt_xml(comments, people, opts) {\n    var o = [\n        XML_HEADER,\n        writextag(\"ThreadedComments\", null, {\n            \"xmlns\": XMLNS.TCMNT\n        }).replace(/[\\/]>/, \">\")\n    ];\n    comments.forEach(function(carr) {\n        var rootid = \"\";\n        (carr[1] || []).forEach(function(c, idx) {\n            if (!c.T) {\n                delete c.ID;\n                return;\n            }\n            if (c.a && people.indexOf(c.a) == -1) people.push(c.a);\n            var tcopts = {\n                ref: carr[0],\n                id: \"{54EE7951-7262-4200-6969-\" + (\"000000000000\" + opts.tcid++).slice(-12) + \"}\"\n            };\n            if (idx == 0) rootid = tcopts.id;\n            else tcopts.parentId = rootid;\n            c.ID = tcopts.id;\n            if (c.a) tcopts.personId = \"{54EE7950-7262-4200-6969-\" + (\"000000000000\" + people.indexOf(c.a)).slice(-12) + \"}\";\n            o.push(writextag(\"threadedComment\", writetag(\"text\", c.t || \"\"), tcopts));\n        });\n    });\n    o.push(\"</ThreadedComments>\");\n    return o.join(\"\");\n}\n/* [MS-XLSX] 2.1.18 */ function parse_people_xml(data /*:string*/ , opts) {\n    var out = [];\n    var pass = false;\n    data.replace(tagregex, function xml_tcmnt(x) {\n        var y /*:any*/  = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<?xml\":\n                break;\n            /* 2.4.85 personList CT_PersonList */ case \"<personList\":\n                break;\n            case \"</personList>\":\n                break;\n            /* 2.6.203 person CT_Person TODO: providers */ case \"<person\":\n                out.push({\n                    name: y.displayname,\n                    id: y.id\n                });\n                break;\n            case \"</person>\":\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n            case \"<extLst/>\":\n                break;\n            /* 18.2.7  ext CT_Extension + */ case \"<ext\":\n                pass = true;\n                break;\n            case \"</ext>\":\n                pass = false;\n                break;\n            default:\n                if (!pass && opts.WTF) throw new Error(\"unrecognized \" + y[0] + \" in threaded comments\");\n        }\n        return x;\n    });\n    return out;\n}\nfunction write_people_xml(people /*, opts*/ ) {\n    var o = [\n        XML_HEADER,\n        writextag(\"personList\", null, {\n            \"xmlns\": XMLNS.TCMNT,\n            \"xmlns:x\": XMLNS_main[0]\n        }).replace(/[\\/]>/, \">\")\n    ];\n    people.forEach(function(person, idx) {\n        o.push(writextag(\"person\", null, {\n            displayName: person,\n            id: \"{54EE7950-7262-4200-6969-\" + (\"000000000000\" + idx).slice(-12) + \"}\",\n            userId: person,\n            providerId: \"None\"\n        }));\n    });\n    o.push(\"</personList>\");\n    return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.28 BrtBeginComment */ function parse_BrtBeginComment(data) {\n    var out = {};\n    out.iauthor = data.read_shift(4);\n    var rfx = parse_UncheckedRfX(data, 16);\n    out.rfx = rfx.s;\n    out.ref = encode_cell(rfx.s);\n    data.l += 16; /*var guid = parse_GUID(data); */ \n    return out;\n}\nfunction write_BrtBeginComment(data, o) {\n    if (o == null) o = new_buf(36);\n    o.write_shift(4, data[1].iauthor);\n    write_UncheckedRfX(data[0], o);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    return o;\n}\n/* [MS-XLSB] 2.4.327 BrtCommentAuthor */ var parse_BrtCommentAuthor = parse_XLWideString;\nfunction write_BrtCommentAuthor(data) {\n    return write_XLWideString(data.slice(0, 54));\n}\n/* [MS-XLSB] 2.1.7.8 Comments */ function parse_comments_bin(data, opts) /*:Array<RawComment>*/ {\n    var out /*:Array<RawComment>*/  = [];\n    var authors /*:Array<string>*/  = [];\n    var c = {};\n    var pass = false;\n    recordhopper(data, function hopper_cmnt(val, R, RT) {\n        switch(RT){\n            case 0x0278:\n                /* 'BrtCommentAuthor' */ authors.push(val);\n                break;\n            case 0x027B:\n                /* 'BrtBeginComment' */ c = val;\n                break;\n            case 0x027D:\n                /* 'BrtCommentText' */ c.t = val.t;\n                c.h = val.h;\n                c.r = val.r;\n                break;\n            case 0x027C:\n                /* 'BrtEndComment' */ c.author = authors[c.iauthor];\n                delete c /*:any*/ .iauthor;\n                if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;\n                if (!c.t) c.t = \"\";\n                delete c.rfx;\n                out.push(c);\n                break;\n            case 0x0C00:\n                break;\n            case 0x0023:\n                /* 'BrtFRTBegin' */ pass = true;\n                break;\n            case 0x0024:\n                /* 'BrtFRTEnd' */ pass = false;\n                break;\n            case 0x0025:\n                break;\n            case 0x0026:\n                break;\n            default:\n                if (R.T) {} else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    });\n    return out;\n}\nfunction write_comments_bin(data /*::, opts*/ ) {\n    var ba = buf_array();\n    var iauthor /*:Array<string>*/  = [];\n    write_record(ba, 0x0274 /* BrtBeginComments */ );\n    write_record(ba, 0x0276 /* BrtBeginCommentAuthors */ );\n    data.forEach(function(comment) {\n        comment[1].forEach(function(c) {\n            if (iauthor.indexOf(c.a) > -1) return;\n            iauthor.push(c.a.slice(0, 54));\n            write_record(ba, 0x0278 /* BrtCommentAuthor */ , write_BrtCommentAuthor(c.a));\n        });\n    });\n    write_record(ba, 0x0277 /* BrtEndCommentAuthors */ );\n    write_record(ba, 0x0279 /* BrtBeginCommentList */ );\n    data.forEach(function(comment) {\n        comment[1].forEach(function(c) {\n            c.iauthor = iauthor.indexOf(c.a);\n            var range = {\n                s: decode_cell(comment[0]),\n                e: decode_cell(comment[0])\n            };\n            write_record(ba, 0x027B /* BrtBeginComment */ , write_BrtBeginComment([\n                range,\n                c\n            ]));\n            if (c.t && c.t.length > 0) write_record(ba, 0x027D /* BrtCommentText */ , write_BrtCommentText(c));\n            write_record(ba, 0x027C /* BrtEndComment */ );\n            delete c.iauthor;\n        });\n    });\n    write_record(ba, 0x027A /* BrtEndCommentList */ );\n    write_record(ba, 0x0275 /* BrtEndComments */ );\n    return ba.end();\n}\nvar CT_VBA = \"application/vnd.ms-office.vbaProject\";\nfunction make_vba_xls(cfb) {\n    var newcfb = CFB.utils.cfb_new({\n        root: \"R\"\n    });\n    cfb.FullPaths.forEach(function(p, i) {\n        if (p.slice(-1) === \"/\" || !p.match(/_VBA_PROJECT_CUR/)) return;\n        var newpath = p.replace(/^[^\\/]*/, \"R\").replace(/\\/_VBA_PROJECT_CUR\\u0000*/, \"\");\n        CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);\n    });\n    return CFB.write(newcfb);\n}\nfunction fill_vba_xls(cfb, vba) {\n    vba.FullPaths.forEach(function(p, i) {\n        if (i == 0) return;\n        var newpath = p.replace(/[^\\/]*[\\/]/, \"/_VBA_PROJECT_CUR/\");\n        if (newpath.slice(-1) !== \"/\") CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);\n    });\n}\nvar VBAFMTS = [\n    \"xlsb\",\n    \"xlsm\",\n    \"xlam\",\n    \"biff8\",\n    \"xla\"\n];\n/* macro and dialog sheet stubs */ function parse_ds_bin() /*:Worksheet*/ {\n    return {\n        \"!type\": \"dialog\"\n    };\n}\nfunction parse_ds_xml() /*:Worksheet*/ {\n    return {\n        \"!type\": \"dialog\"\n    };\n}\nfunction parse_ms_bin() /*:Worksheet*/ {\n    return {\n        \"!type\": \"macro\"\n    };\n}\nfunction parse_ms_xml() /*:Worksheet*/ {\n    return {\n        \"!type\": \"macro\"\n    };\n}\n/* TODO: it will be useful to parse the function str */ var rc_to_a1 = /*#__PURE__*/ function() {\n    var rcregex = /(^|[^A-Za-z_])R(\\[?-?\\d+\\]|[1-9]\\d*|)C(\\[?-?\\d+\\]|[1-9]\\d*|)(?![A-Za-z0-9_])/g;\n    var rcbase /*:Cell*/  = {\n        r: 0,\n        c: 0\n    } /*:any*/ ;\n    function rcfunc($$, $1, $2, $3) {\n        var cRel = false, rRel = false;\n        if ($2.length == 0) rRel = true;\n        else if ($2.charAt(0) == \"[\") {\n            rRel = true;\n            $2 = $2.slice(1, -1);\n        }\n        if ($3.length == 0) cRel = true;\n        else if ($3.charAt(0) == \"[\") {\n            cRel = true;\n            $3 = $3.slice(1, -1);\n        }\n        var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;\n        if (cRel) C += rcbase.c;\n        else --C;\n        if (rRel) R += rcbase.r;\n        else --R;\n        return $1 + (cRel ? \"\" : \"$\") + encode_col(C) + (rRel ? \"\" : \"$\") + encode_row(R);\n    }\n    return function rc_to_a1(fstr /*:string*/ , base /*:Cell*/ ) /*:string*/ {\n        rcbase = base;\n        return fstr.replace(rcregex, rcfunc);\n    };\n}();\nvar crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\\d{4}|104[0-7]\\d{3}|1048[0-4]\\d{2}|10485[0-6]\\d|104857[0-6]|[1-9]\\d{0,5})(?![_.\\(A-Za-z0-9])/g;\nvar a1_to_rc = /*#__PURE__*/ function() {\n    return function a1_to_rc(fstr /*:string*/ , base /*:CellAddress*/ ) {\n        return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {\n            var c = decode_col($3) - ($2 ? 0 : base.c);\n            var r = decode_row($5) - ($4 ? 0 : base.r);\n            var R = r == 0 ? \"\" : !$4 ? \"[\" + r + \"]\" : r + 1;\n            var C = c == 0 ? \"\" : !$2 ? \"[\" + c + \"]\" : c + 1;\n            return $1 + \"R\" + R + \"C\" + C;\n        });\n    };\n}();\n/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */ function shift_formula_str(f /*:string*/ , delta /*:Cell*/ ) /*:string*/ {\n    return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {\n        return $1 + ($2 == \"$\" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == \"$\" ? $4 + $5 : encode_row(decode_row($5) + delta.r));\n    });\n}\nfunction shift_formula_xlsx(f /*:string*/ , range /*:string*/ , cell /*:string*/ ) /*:string*/ {\n    var r = decode_range(range), s = r.s, c = decode_cell(cell);\n    var delta = {\n        r: c.r - s.r,\n        c: c.c - s.c\n    };\n    return shift_formula_str(f, delta);\n}\n/* TODO: parse formula */ function fuzzyfmla(f /*:string*/ ) /*:boolean*/ {\n    if (f.length == 1) return false;\n    return true;\n}\nfunction _xlfn(f /*:string*/ ) /*:string*/ {\n    return f.replace(/_xlfn\\./g, \"\");\n}\nfunction parseread1(blob) {\n    blob.l += 1;\n    return;\n}\n/* [MS-XLS] 2.5.51 */ function parse_ColRelU(blob, length) {\n    var c = blob.read_shift(length == 1 ? 1 : 2);\n    return [\n        c & 0x3FFF,\n        c >> 14 & 1,\n        c >> 15 & 1\n    ];\n}\n/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */ function parse_RgceArea(blob, length, opts) {\n    var w = 2;\n    if (opts) {\n        if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);\n        else if (opts.biff == 12) w = 4;\n    }\n    var r = blob.read_shift(w), R = blob.read_shift(w);\n    var c = parse_ColRelU(blob, 2);\n    var C = parse_ColRelU(blob, 2);\n    return {\n        s: {\n            r: r,\n            c: c[0],\n            cRel: c[1],\n            rRel: c[2]\n        },\n        e: {\n            r: R,\n            c: C[0],\n            cRel: C[1],\n            rRel: C[2]\n        }\n    };\n}\n/* BIFF 2-5 encodes flags in the row field */ function parse_RgceArea_BIFF2(blob /*::, length, opts*/ ) {\n    var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2);\n    var c = blob.read_shift(1);\n    var C = blob.read_shift(1);\n    return {\n        s: {\n            r: r[0],\n            c: c,\n            cRel: r[1],\n            rRel: r[2]\n        },\n        e: {\n            r: R[0],\n            c: C,\n            cRel: R[1],\n            rRel: R[2]\n        }\n    };\n}\n/* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */ function parse_RgceAreaRel(blob, length, opts) {\n    if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);\n    var r = blob.read_shift(opts.biff == 12 ? 4 : 2), R = blob.read_shift(opts.biff == 12 ? 4 : 2);\n    var c = parse_ColRelU(blob, 2);\n    var C = parse_ColRelU(blob, 2);\n    return {\n        s: {\n            r: r,\n            c: c[0],\n            cRel: c[1],\n            rRel: c[2]\n        },\n        e: {\n            r: R,\n            c: C[0],\n            cRel: C[1],\n            rRel: C[2]\n        }\n    };\n}\n/* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */ function parse_RgceLoc(blob, length, opts) {\n    if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);\n    var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);\n    var c = parse_ColRelU(blob, 2);\n    return {\n        r: r,\n        c: c[0],\n        cRel: c[1],\n        rRel: c[2]\n    };\n}\nfunction parse_RgceLoc_BIFF2(blob /*::, length, opts*/ ) {\n    var r = parse_ColRelU(blob, 2);\n    var c = blob.read_shift(1);\n    return {\n        r: r[0],\n        c: c,\n        cRel: r[1],\n        rRel: r[2]\n    };\n}\n/* [MS-XLS] 2.5.198.107, 2.5.47 */ function parse_RgceElfLoc(blob /*::, length, opts*/ ) {\n    var r = blob.read_shift(2);\n    var c = blob.read_shift(2);\n    return {\n        r: r,\n        c: c & 0xFF,\n        fQuoted: !!(c & 0x4000),\n        cRel: c >> 15,\n        rRel: c >> 15\n    };\n}\n/* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */ function parse_RgceLocRel(blob, length, opts) {\n    var biff = opts && opts.biff ? opts.biff : 8;\n    if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);\n    var r = blob.read_shift(biff >= 12 ? 4 : 2);\n    var cl = blob.read_shift(2);\n    var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;\n    cl &= 0x3FFF;\n    if (rRel == 1) while(r > 0x7FFFF)r -= 0x100000;\n    if (cRel == 1) while(cl > 0x1FFF)cl = cl - 0x4000;\n    return {\n        r: r,\n        c: cl,\n        cRel: cRel,\n        rRel: rRel\n    };\n}\nfunction parse_RgceLocRel_BIFF2(blob /*::, length:number, opts*/ ) {\n    var rl = blob.read_shift(2);\n    var c = blob.read_shift(1);\n    var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;\n    rl &= 0x3FFF;\n    if (rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;\n    if (cRel == 1 && c >= 0x80) c = c - 0x100;\n    return {\n        r: rl,\n        c: c,\n        cRel: cRel,\n        rRel: rRel\n    };\n}\n/* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */ function parse_PtgArea(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);\n    return [\n        type,\n        area\n    ];\n}\n/* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */ function parse_PtgArea3d(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var ixti = blob.read_shift(2, \"i\");\n    var w = 8;\n    if (opts) switch(opts.biff){\n        case 5:\n            blob.l += 12;\n            w = 6;\n            break;\n        case 12:\n            w = 12;\n            break;\n    }\n    var area = parse_RgceArea(blob, w, opts);\n    return [\n        type,\n        ixti,\n        area\n    ];\n}\n/* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */ function parse_PtgAreaErr(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;\n    return [\n        type\n    ];\n}\n/* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */ function parse_PtgAreaErr3d(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var ixti = blob.read_shift(2);\n    var w = 8;\n    if (opts) switch(opts.biff){\n        case 5:\n            blob.l += 12;\n            w = 6;\n            break;\n        case 12:\n            w = 12;\n            break;\n    }\n    blob.l += w;\n    return [\n        type,\n        ixti\n    ];\n}\n/* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */ function parse_PtgAreaN(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var area = parse_RgceAreaRel(blob, length - 1, opts);\n    return [\n        type,\n        area\n    ];\n}\n/* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */ function parse_PtgArray(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;\n    return [\n        type\n    ];\n}\n/* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */ function parse_PtgAttrBaxcel(blob) {\n    var bitSemi = blob[blob.l + 1] & 0x01; /* 1 = volatile */ \n    var bitBaxcel = 1;\n    blob.l += 4;\n    return [\n        bitSemi,\n        bitBaxcel\n    ];\n}\n/* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */ function parse_PtgAttrChoose(blob, length, opts) /*:Array<number>*/ {\n    blob.l += 2;\n    var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n    var o /*:Array<number>*/  = [];\n    /* offset is 1 less than the number of elements */ for(var i = 0; i <= offset; ++i)o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));\n    return o;\n}\n/* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */ function parse_PtgAttrGoto(blob, length, opts) {\n    var bitGoto = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += 2;\n    return [\n        bitGoto,\n        blob.read_shift(opts && opts.biff == 2 ? 1 : 2)\n    ];\n}\n/* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */ function parse_PtgAttrIf(blob, length, opts) {\n    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += 2;\n    return [\n        bitIf,\n        blob.read_shift(opts && opts.biff == 2 ? 1 : 2)\n    ];\n}\n/* [MS-XLSB] 2.5.97.28 */ function parse_PtgAttrIfError(blob) {\n    var bitIf = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += 2;\n    return [\n        bitIf,\n        blob.read_shift(2)\n    ];\n}\n/* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */ function parse_PtgAttrSemi(blob, length, opts) {\n    var bitSemi = blob[blob.l + 1] & 0xFF ? 1 : 0;\n    blob.l += opts && opts.biff == 2 ? 3 : 4;\n    return [\n        bitSemi\n    ];\n}\n/* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */ function parse_PtgAttrSpaceType(blob /*::, length*/ ) {\n    var type = blob.read_shift(1), cch = blob.read_shift(1);\n    return [\n        type,\n        cch\n    ];\n}\n/* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */ function parse_PtgAttrSpace(blob) {\n    blob.read_shift(2);\n    return parse_PtgAttrSpaceType(blob, 2);\n}\n/* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */ function parse_PtgAttrSpaceSemi(blob) {\n    blob.read_shift(2);\n    return parse_PtgAttrSpaceType(blob, 2);\n}\n/* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */ function parse_PtgRef(blob, length, opts) {\n    //var ptg = blob[blob.l] & 0x1F;\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var loc = parse_RgceLoc(blob, 0, opts);\n    return [\n        type,\n        loc\n    ];\n}\n/* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */ function parse_PtgRefN(blob, length, opts) {\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var loc = parse_RgceLocRel(blob, 0, opts);\n    return [\n        type,\n        loc\n    ];\n}\n/* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */ function parse_PtgRef3d(blob, length, opts) {\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var ixti = blob.read_shift(2); // XtiIndex\n    if (opts && opts.biff == 5) blob.l += 12;\n    var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel\n    return [\n        type,\n        ixti,\n        loc\n    ];\n}\n/* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */ function parse_PtgFunc(blob, length, opts) {\n    //var ptg = blob[blob.l] & 0x1F;\n    var type = (blob[blob.l] & 0x60) >> 5;\n    blob.l += 1;\n    var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);\n    return [\n        FtabArgc[iftab],\n        Ftab[iftab],\n        type\n    ];\n}\n/* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */ function parse_PtgFuncVar(blob, length, opts) {\n    var type = blob[blob.l++];\n    var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [\n        type == 0x58 ? -1 : 0,\n        blob.read_shift(1)\n    ] : parsetab(blob);\n    return [\n        cparams,\n        (tab[0] === 0 ? Ftab : Cetab)[tab[1]]\n    ];\n}\nfunction parsetab(blob) {\n    return [\n        blob[blob.l + 1] >> 7,\n        blob.read_shift(2) & 0x7FFF\n    ];\n}\n/* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */ function parse_PtgAttrSum(blob, length, opts) {\n    blob.l += opts && opts.biff == 2 ? 3 : 4;\n    return;\n}\n/* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */ function parse_PtgExp(blob, length, opts) {\n    blob.l++;\n    if (opts && opts.biff == 12) return [\n        blob.read_shift(4, \"i\"),\n        0\n    ];\n    var row = blob.read_shift(2);\n    var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n    return [\n        row,\n        col\n    ];\n}\n/* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */ function parse_PtgErr(blob) {\n    blob.l++;\n    return BErr[blob.read_shift(1)];\n}\n/* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */ function parse_PtgInt(blob) {\n    blob.l++;\n    return blob.read_shift(2);\n}\n/* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */ function parse_PtgBool(blob) {\n    blob.l++;\n    return blob.read_shift(1) !== 0;\n}\n/* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */ function parse_PtgNum(blob) {\n    blob.l++;\n    return parse_Xnum(blob, 8);\n}\n/* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */ function parse_PtgStr(blob, length, opts) {\n    blob.l++;\n    return parse_ShortXLUnicodeString(blob, length - 1, opts);\n}\n/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */ /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */ function parse_SerAr(blob, biff /*:number*/ ) {\n    var val = [\n        blob.read_shift(1)\n    ];\n    if (biff == 12) switch(val[0]){\n        case 0x02:\n            val[0] = 0x04;\n            break; /* SerBool */ \n        case 0x04:\n            val[0] = 0x10;\n            break; /* SerErr */ \n        case 0x00:\n            val[0] = 0x01;\n            break; /* SerNum */ \n        case 0x01:\n            val[0] = 0x02;\n            break; /* SerStr */ \n    }\n    switch(val[0]){\n        case 0x04:\n            /* SerBool -- boolean */ val[1] = parsebool(blob, 1) ? \"TRUE\" : \"FALSE\";\n            if (biff != 12) blob.l += 7;\n            break;\n        case 0x25:\n        /* appears to be an alias */ case 0x10:\n            /* SerErr -- error */ val[1] = BErr[blob[blob.l]];\n            blob.l += biff == 12 ? 4 : 8;\n            break;\n        case 0x00:\n            /* SerNil -- honestly, I'm not sure how to reproduce this */ blob.l += 8;\n            break;\n        case 0x01:\n            /* SerNum -- Xnum */ val[1] = parse_Xnum(blob, 8);\n            break;\n        case 0x02:\n            /* SerStr -- XLUnicodeString (<256 chars) */ val[1] = parse_XLUnicodeString2(blob, 0, {\n                biff: biff > 0 && biff < 8 ? 2 : biff\n            });\n            break;\n        default:\n            throw new Error(\"Bad SerAr: \" + val[0]); /* Unreachable */ \n    }\n    return val;\n}\n/* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */ function parse_PtgExtraMem(blob, cce, opts) {\n    var count = blob.read_shift(opts.biff == 12 ? 4 : 2);\n    var out /*:Array<Range>*/  = [];\n    for(var i = 0; i != count; ++i)out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));\n    return out;\n}\n/* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */ function parse_PtgExtraArray(blob, length, opts) {\n    var rows = 0, cols = 0;\n    if (opts.biff == 12) {\n        rows = blob.read_shift(4); // DRw\n        cols = blob.read_shift(4); // DCol\n    } else {\n        cols = 1 + blob.read_shift(1); //DColByteU\n        rows = 1 + blob.read_shift(2); //DRw\n    }\n    if (opts.biff >= 2 && opts.biff < 8) {\n        --rows;\n        if (--cols == 0) cols = 0x100;\n    }\n    // $FlowIgnore\n    for(var i = 0, o /*:Array<Array<any>>*/  = []; i != rows && (o[i] = []); ++i)for(var j = 0; j != cols; ++j)o[i][j] = parse_SerAr(blob, opts.biff);\n    return o;\n}\n/* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */ function parse_PtgName(blob, length, opts) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var w = !opts || opts.biff >= 8 ? 4 : 2;\n    var nameindex = blob.read_shift(w);\n    switch(opts.biff){\n        case 2:\n            blob.l += 5;\n            break;\n        case 3:\n        case 4:\n            blob.l += 8;\n            break;\n        case 5:\n            blob.l += 12;\n            break;\n    }\n    return [\n        type,\n        0,\n        nameindex\n    ];\n}\n/* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */ function parse_PtgNameX(blob, length, opts) {\n    if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var ixti = blob.read_shift(2); // XtiIndex\n    var nameindex = blob.read_shift(4);\n    return [\n        type,\n        ixti,\n        nameindex\n    ];\n}\nfunction parse_PtgNameX_BIFF5(blob /*::, length, opts*/ ) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var ixti = blob.read_shift(2, \"i\"); // XtiIndex\n    blob.l += 8;\n    var nameindex = blob.read_shift(2);\n    blob.l += 12;\n    return [\n        type,\n        ixti,\n        nameindex\n    ];\n}\n/* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */ function parse_PtgMemArea(blob, length, opts) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    blob.l += opts && opts.biff == 2 ? 3 : 4;\n    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n    return [\n        type,\n        cce\n    ];\n}\n/* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */ function parse_PtgMemFunc(blob, length, opts) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);\n    return [\n        type,\n        cce\n    ];\n}\n/* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */ function parse_PtgRefErr(blob, length, opts) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    blob.l += 4;\n    if (opts.biff < 8) blob.l--;\n    if (opts.biff == 12) blob.l += 2;\n    return [\n        type\n    ];\n}\n/* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */ function parse_PtgRefErr3d(blob, length, opts) {\n    var type = (blob[blob.l++] & 0x60) >> 5;\n    var ixti = blob.read_shift(2);\n    var w = 4;\n    if (opts) switch(opts.biff){\n        case 5:\n            w = 15;\n            break;\n        case 12:\n            w = 6;\n            break;\n    }\n    blob.l += w;\n    return [\n        type,\n        ixti\n    ];\n}\n/* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */ var parse_PtgMemErr = parsenoop;\n/* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */ var parse_PtgMemNoMem = parsenoop;\n/* [MS-XLS] 2.5.198.92 */ var parse_PtgTbl = parsenoop;\nfunction parse_PtgElfLoc(blob, length, opts) {\n    blob.l += 2;\n    return [\n        parse_RgceElfLoc(blob, 4, opts)\n    ];\n}\nfunction parse_PtgElfNoop(blob /*::, length, opts*/ ) {\n    blob.l += 6;\n    return [];\n}\n/* [MS-XLS] 2.5.198.46 */ var parse_PtgElfCol = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.47 */ var parse_PtgElfColS = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.48 */ var parse_PtgElfColSV = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.49 */ var parse_PtgElfColV = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.50 */ function parse_PtgElfLel(blob /*::, length, opts*/ ) {\n    blob.l += 2;\n    return [\n        parseuint16(blob),\n        blob.read_shift(2) & 0x01\n    ];\n}\n/* [MS-XLS] 2.5.198.51 */ var parse_PtgElfRadical = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.52 */ var parse_PtgElfRadicalLel = parse_PtgElfLel;\n/* [MS-XLS] 2.5.198.53 */ var parse_PtgElfRadicalS = parse_PtgElfNoop;\n/* [MS-XLS] 2.5.198.54 */ var parse_PtgElfRw = parse_PtgElfLoc;\n/* [MS-XLS] 2.5.198.55 */ var parse_PtgElfRwV = parse_PtgElfLoc;\n/* [MS-XLSB] 2.5.97.52 TODO */ var PtgListRT = [\n    \"Data\",\n    \"All\",\n    \"Headers\",\n    \"??\",\n    \"?Data2\",\n    \"??\",\n    \"?DataHeaders\",\n    \"??\",\n    \"Totals\",\n    \"??\",\n    \"??\",\n    \"??\",\n    \"?DataTotals\",\n    \"??\",\n    \"??\",\n    \"??\",\n    \"?Current\"\n];\nfunction parse_PtgList(blob /*::, length, opts*/ ) {\n    blob.l += 2;\n    var ixti = blob.read_shift(2);\n    var flags = blob.read_shift(2);\n    var idx = blob.read_shift(4);\n    var c = blob.read_shift(2);\n    var C = blob.read_shift(2);\n    var rt = PtgListRT[flags >> 2 & 0x1F];\n    return {\n        ixti: ixti,\n        coltype: flags & 0x3,\n        rt: rt,\n        idx: idx,\n        c: c,\n        C: C\n    };\n}\n/* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */ function parse_PtgSxName(blob /*::, length, opts*/ ) {\n    blob.l += 2;\n    return [\n        blob.read_shift(4)\n    ];\n}\n/* [XLS] old spec */ function parse_PtgSheet(blob, length, opts) {\n    blob.l += 5;\n    blob.l += 2;\n    blob.l += opts.biff == 2 ? 1 : 4;\n    return [\n        \"PTGSHEET\"\n    ];\n}\nfunction parse_PtgEndSheet(blob, length, opts) {\n    blob.l += opts.biff == 2 ? 4 : 5;\n    return [\n        \"PTGENDSHEET\"\n    ];\n}\nfunction parse_PtgMemAreaN(blob /*::, length, opts*/ ) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var cce = blob.read_shift(2);\n    return [\n        type,\n        cce\n    ];\n}\nfunction parse_PtgMemNoMemN(blob /*::, length, opts*/ ) {\n    var type = blob.read_shift(1) >>> 5 & 0x03;\n    var cce = blob.read_shift(2);\n    return [\n        type,\n        cce\n    ];\n}\nfunction parse_PtgAttrNoop(blob /*::, length, opts*/ ) {\n    blob.l += 4;\n    return [\n        0,\n        0\n    ];\n}\n/* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */ var PtgTypes = {\n    /*::[*/ 0x01: {\n        n: \"PtgExp\",\n        f: parse_PtgExp\n    },\n    /*::[*/ 0x02: {\n        n: \"PtgTbl\",\n        f: parse_PtgTbl\n    },\n    /*::[*/ 0x03: {\n        n: \"PtgAdd\",\n        f: parseread1\n    },\n    /*::[*/ 0x04: {\n        n: \"PtgSub\",\n        f: parseread1\n    },\n    /*::[*/ 0x05: {\n        n: \"PtgMul\",\n        f: parseread1\n    },\n    /*::[*/ 0x06: {\n        n: \"PtgDiv\",\n        f: parseread1\n    },\n    /*::[*/ 0x07: {\n        n: \"PtgPower\",\n        f: parseread1\n    },\n    /*::[*/ 0x08: {\n        n: \"PtgConcat\",\n        f: parseread1\n    },\n    /*::[*/ 0x09: {\n        n: \"PtgLt\",\n        f: parseread1\n    },\n    /*::[*/ 0x0A: {\n        n: \"PtgLe\",\n        f: parseread1\n    },\n    /*::[*/ 0x0B: {\n        n: \"PtgEq\",\n        f: parseread1\n    },\n    /*::[*/ 0x0C: {\n        n: \"PtgGe\",\n        f: parseread1\n    },\n    /*::[*/ 0x0D: {\n        n: \"PtgGt\",\n        f: parseread1\n    },\n    /*::[*/ 0x0E: {\n        n: \"PtgNe\",\n        f: parseread1\n    },\n    /*::[*/ 0x0F: {\n        n: \"PtgIsect\",\n        f: parseread1\n    },\n    /*::[*/ 0x10: {\n        n: \"PtgUnion\",\n        f: parseread1\n    },\n    /*::[*/ 0x11: {\n        n: \"PtgRange\",\n        f: parseread1\n    },\n    /*::[*/ 0x12: {\n        n: \"PtgUplus\",\n        f: parseread1\n    },\n    /*::[*/ 0x13: {\n        n: \"PtgUminus\",\n        f: parseread1\n    },\n    /*::[*/ 0x14: {\n        n: \"PtgPercent\",\n        f: parseread1\n    },\n    /*::[*/ 0x15: {\n        n: \"PtgParen\",\n        f: parseread1\n    },\n    /*::[*/ 0x16: {\n        n: \"PtgMissArg\",\n        f: parseread1\n    },\n    /*::[*/ 0x17: {\n        n: \"PtgStr\",\n        f: parse_PtgStr\n    },\n    /*::[*/ 0x1A: {\n        n: \"PtgSheet\",\n        f: parse_PtgSheet\n    },\n    /*::[*/ 0x1B: {\n        n: \"PtgEndSheet\",\n        f: parse_PtgEndSheet\n    },\n    /*::[*/ 0x1C: {\n        n: \"PtgErr\",\n        f: parse_PtgErr\n    },\n    /*::[*/ 0x1D: {\n        n: \"PtgBool\",\n        f: parse_PtgBool\n    },\n    /*::[*/ 0x1E: {\n        n: \"PtgInt\",\n        f: parse_PtgInt\n    },\n    /*::[*/ 0x1F: {\n        n: \"PtgNum\",\n        f: parse_PtgNum\n    },\n    /*::[*/ 0x20: {\n        n: \"PtgArray\",\n        f: parse_PtgArray\n    },\n    /*::[*/ 0x21: {\n        n: \"PtgFunc\",\n        f: parse_PtgFunc\n    },\n    /*::[*/ 0x22: {\n        n: \"PtgFuncVar\",\n        f: parse_PtgFuncVar\n    },\n    /*::[*/ 0x23: {\n        n: \"PtgName\",\n        f: parse_PtgName\n    },\n    /*::[*/ 0x24: {\n        n: \"PtgRef\",\n        f: parse_PtgRef\n    },\n    /*::[*/ 0x25: {\n        n: \"PtgArea\",\n        f: parse_PtgArea\n    },\n    /*::[*/ 0x26: {\n        n: \"PtgMemArea\",\n        f: parse_PtgMemArea\n    },\n    /*::[*/ 0x27: {\n        n: \"PtgMemErr\",\n        f: parse_PtgMemErr\n    },\n    /*::[*/ 0x28: {\n        n: \"PtgMemNoMem\",\n        f: parse_PtgMemNoMem\n    },\n    /*::[*/ 0x29: {\n        n: \"PtgMemFunc\",\n        f: parse_PtgMemFunc\n    },\n    /*::[*/ 0x2A: {\n        n: \"PtgRefErr\",\n        f: parse_PtgRefErr\n    },\n    /*::[*/ 0x2B: {\n        n: \"PtgAreaErr\",\n        f: parse_PtgAreaErr\n    },\n    /*::[*/ 0x2C: {\n        n: \"PtgRefN\",\n        f: parse_PtgRefN\n    },\n    /*::[*/ 0x2D: {\n        n: \"PtgAreaN\",\n        f: parse_PtgAreaN\n    },\n    /*::[*/ 0x2E: {\n        n: \"PtgMemAreaN\",\n        f: parse_PtgMemAreaN\n    },\n    /*::[*/ 0x2F: {\n        n: \"PtgMemNoMemN\",\n        f: parse_PtgMemNoMemN\n    },\n    /*::[*/ 0x39: {\n        n: \"PtgNameX\",\n        f: parse_PtgNameX\n    },\n    /*::[*/ 0x3A: {\n        n: \"PtgRef3d\",\n        f: parse_PtgRef3d\n    },\n    /*::[*/ 0x3B: {\n        n: \"PtgArea3d\",\n        f: parse_PtgArea3d\n    },\n    /*::[*/ 0x3C: {\n        n: \"PtgRefErr3d\",\n        f: parse_PtgRefErr3d\n    },\n    /*::[*/ 0x3D: {\n        n: \"PtgAreaErr3d\",\n        f: parse_PtgAreaErr3d\n    },\n    /*::[*/ 0xFF: {}\n};\n/* These are duplicated in the PtgTypes table */ var PtgDupes = {\n    /*::[*/ 0x40: 0x20,\n    /*::[*/ 0x60: 0x20,\n    /*::[*/ 0x41: 0x21,\n    /*::[*/ 0x61: 0x21,\n    /*::[*/ 0x42: 0x22,\n    /*::[*/ 0x62: 0x22,\n    /*::[*/ 0x43: 0x23,\n    /*::[*/ 0x63: 0x23,\n    /*::[*/ 0x44: 0x24,\n    /*::[*/ 0x64: 0x24,\n    /*::[*/ 0x45: 0x25,\n    /*::[*/ 0x65: 0x25,\n    /*::[*/ 0x46: 0x26,\n    /*::[*/ 0x66: 0x26,\n    /*::[*/ 0x47: 0x27,\n    /*::[*/ 0x67: 0x27,\n    /*::[*/ 0x48: 0x28,\n    /*::[*/ 0x68: 0x28,\n    /*::[*/ 0x49: 0x29,\n    /*::[*/ 0x69: 0x29,\n    /*::[*/ 0x4A: 0x2A,\n    /*::[*/ 0x6A: 0x2A,\n    /*::[*/ 0x4B: 0x2B,\n    /*::[*/ 0x6B: 0x2B,\n    /*::[*/ 0x4C: 0x2C,\n    /*::[*/ 0x6C: 0x2C,\n    /*::[*/ 0x4D: 0x2D,\n    /*::[*/ 0x6D: 0x2D,\n    /*::[*/ 0x4E: 0x2E,\n    /*::[*/ 0x6E: 0x2E,\n    /*::[*/ 0x4F: 0x2F,\n    /*::[*/ 0x6F: 0x2F,\n    /*::[*/ 0x58: 0x22,\n    /*::[*/ 0x78: 0x22,\n    /*::[*/ 0x59: 0x39,\n    /*::[*/ 0x79: 0x39,\n    /*::[*/ 0x5A: 0x3A,\n    /*::[*/ 0x7A: 0x3A,\n    /*::[*/ 0x5B: 0x3B,\n    /*::[*/ 0x7B: 0x3B,\n    /*::[*/ 0x5C: 0x3C,\n    /*::[*/ 0x7C: 0x3C,\n    /*::[*/ 0x5D: 0x3D,\n    /*::[*/ 0x7D: 0x3D\n};\nvar Ptg18 = {\n    /*::[*/ 0x01: {\n        n: \"PtgElfLel\",\n        f: parse_PtgElfLel\n    },\n    /*::[*/ 0x02: {\n        n: \"PtgElfRw\",\n        f: parse_PtgElfRw\n    },\n    /*::[*/ 0x03: {\n        n: \"PtgElfCol\",\n        f: parse_PtgElfCol\n    },\n    /*::[*/ 0x06: {\n        n: \"PtgElfRwV\",\n        f: parse_PtgElfRwV\n    },\n    /*::[*/ 0x07: {\n        n: \"PtgElfColV\",\n        f: parse_PtgElfColV\n    },\n    /*::[*/ 0x0A: {\n        n: \"PtgElfRadical\",\n        f: parse_PtgElfRadical\n    },\n    /*::[*/ 0x0B: {\n        n: \"PtgElfRadicalS\",\n        f: parse_PtgElfRadicalS\n    },\n    /*::[*/ 0x0D: {\n        n: \"PtgElfColS\",\n        f: parse_PtgElfColS\n    },\n    /*::[*/ 0x0F: {\n        n: \"PtgElfColSV\",\n        f: parse_PtgElfColSV\n    },\n    /*::[*/ 0x10: {\n        n: \"PtgElfRadicalLel\",\n        f: parse_PtgElfRadicalLel\n    },\n    /*::[*/ 0x19: {\n        n: \"PtgList\",\n        f: parse_PtgList\n    },\n    /*::[*/ 0x1D: {\n        n: \"PtgSxName\",\n        f: parse_PtgSxName\n    },\n    /*::[*/ 0xFF: {}\n};\nvar Ptg19 = {\n    /*::[*/ 0x00: {\n        n: \"PtgAttrNoop\",\n        f: parse_PtgAttrNoop\n    },\n    /*::[*/ 0x01: {\n        n: \"PtgAttrSemi\",\n        f: parse_PtgAttrSemi\n    },\n    /*::[*/ 0x02: {\n        n: \"PtgAttrIf\",\n        f: parse_PtgAttrIf\n    },\n    /*::[*/ 0x04: {\n        n: \"PtgAttrChoose\",\n        f: parse_PtgAttrChoose\n    },\n    /*::[*/ 0x08: {\n        n: \"PtgAttrGoto\",\n        f: parse_PtgAttrGoto\n    },\n    /*::[*/ 0x10: {\n        n: \"PtgAttrSum\",\n        f: parse_PtgAttrSum\n    },\n    /*::[*/ 0x20: {\n        n: \"PtgAttrBaxcel\",\n        f: parse_PtgAttrBaxcel\n    },\n    /*::[*/ 0x21: {\n        n: \"PtgAttrBaxcel\",\n        f: parse_PtgAttrBaxcel\n    },\n    /*::[*/ 0x40: {\n        n: \"PtgAttrSpace\",\n        f: parse_PtgAttrSpace\n    },\n    /*::[*/ 0x41: {\n        n: \"PtgAttrSpaceSemi\",\n        f: parse_PtgAttrSpaceSemi\n    },\n    /*::[*/ 0x80: {\n        n: \"PtgAttrIfError\",\n        f: parse_PtgAttrIfError\n    },\n    /*::[*/ 0xFF: {}\n};\n/* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */ function parse_RgbExtra(blob, length, rgce, opts) {\n    if (opts.biff < 8) return parsenoop(blob, length);\n    var target = blob.l + length;\n    var o = [];\n    for(var i = 0; i !== rgce.length; ++i){\n        switch(rgce[i][0]){\n            case \"PtgArray\":\n                /* PtgArray -> PtgExtraArray */ rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);\n                o.push(rgce[i][1]);\n                break;\n            case \"PtgMemArea\":\n                /* PtgMemArea -> PtgExtraMem */ rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);\n                o.push(rgce[i][2]);\n                break;\n            case \"PtgExp\":\n                /* PtgExp -> PtgExtraCol */ if (opts && opts.biff == 12) {\n                    rgce[i][1][1] = blob.read_shift(4);\n                    o.push(rgce[i][1]);\n                }\n                break;\n            case \"PtgList\":\n            /* TODO: PtgList -> PtgExtraList */ case \"PtgElfRadicalS\":\n            /* TODO: PtgElfRadicalS -> PtgExtraElf */ case \"PtgElfColS\":\n            /* TODO: PtgElfColS -> PtgExtraElf */ case \"PtgElfColSV\":\n                /* TODO: PtgElfColSV -> PtgExtraElf */ throw \"Unsupported \" + rgce[i][0];\n            default:\n                break;\n        }\n    }\n    length = target - blob.l;\n    /* note: this is technically an error but Excel disregards */ //if(target !== blob.l && blob.l !== target - length) throw new Error(target + \" != \" + blob.l);\n    if (length !== 0) o.push(parsenoop(blob, length));\n    return o;\n}\n/* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */ function parse_Rgce(blob, length, opts) {\n    var target = blob.l + length;\n    var R, id, ptgs = [];\n    while(target != blob.l){\n        length = target - blob.l;\n        id = blob[blob.l];\n        R = PtgTypes[id] || PtgTypes[PtgDupes[id]];\n        if (id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];\n        if (!R || !R.f) {\n            parsenoop(blob, length);\n        } else {\n            ptgs.push([\n                R.n,\n                R.f(blob, length, opts)\n            ]);\n        }\n    }\n    return ptgs;\n}\nfunction stringify_array(f /*:Array<Array<string>>*/ ) /*:string*/ {\n    var o /*:Array<string>*/  = [];\n    for(var i = 0; i < f.length; ++i){\n        var x = f[i], r /*:Array<string>*/  = [];\n        for(var j = 0; j < x.length; ++j){\n            var y = x[j];\n            if (y) switch(y[0]){\n                // TODO: handle embedded quotes\n                case 0x02:\n                    /*:: if(typeof y[1] != 'string') throw \"unreachable\"; */ r.push('\"' + y[1].replace(/\"/g, '\"\"') + '\"');\n                    break;\n                default:\n                    r.push(y[1]);\n            }\n            else r.push(\"\");\n        }\n        o.push(r.join(\",\"));\n    }\n    return o.join(\";\");\n}\n/* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */ var PtgBinOp = {\n    PtgAdd: \"+\",\n    PtgConcat: \"&\",\n    PtgDiv: \"/\",\n    PtgEq: \"=\",\n    PtgGe: \">=\",\n    PtgGt: \">\",\n    PtgLe: \"<=\",\n    PtgLt: \"<\",\n    PtgMul: \"*\",\n    PtgNe: \"<>\",\n    PtgPower: \"^\",\n    PtgSub: \"-\"\n};\n// List of invalid characters needs to be tested further\nfunction formula_quote_sheet_name(sname /*:string*/ , opts) /*:string*/ {\n    if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error(\"empty sheet name\");\n    if (/[^\\w\\u4E00-\\u9FFF\\u3040-\\u30FF]/.test(sname)) return \"'\" + sname + \"'\";\n    return sname;\n}\nfunction get_ixti_raw(supbooks, ixti /*:number*/ , opts) /*:string*/ {\n    if (!supbooks) return \"SH33TJSERR0\";\n    if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];\n    if (!supbooks.XTI) return \"SH33TJSERR6\";\n    var XTI = supbooks.XTI[ixti];\n    if (opts.biff < 8) {\n        if (ixti > 10000) ixti -= 65536;\n        if (ixti < 0) ixti = -ixti;\n        return ixti == 0 ? \"\" : supbooks.XTI[ixti - 1];\n    }\n    if (!XTI) return \"SH33TJSERR1\";\n    var o = \"\";\n    if (opts.biff > 8) switch(supbooks[XTI[0]][0]){\n        case 0x0165:\n            /* 'BrtSupSelf' */ o = XTI[1] == -1 ? \"#REF\" : supbooks.SheetNames[XTI[1]];\n            return XTI[1] == XTI[2] ? o : o + \":\" + supbooks.SheetNames[XTI[2]];\n        case 0x0166:\n            /* 'BrtSupSame' */ if (opts.SID != null) return supbooks.SheetNames[opts.SID];\n            return \"SH33TJSSAME\" + supbooks[XTI[0]][0];\n        case 0x0163:\n        /* 'BrtSupBookSrc' */ /* falls through */ default:\n            return \"SH33TJSSRC\" + supbooks[XTI[0]][0];\n    }\n    switch(supbooks[XTI[0]][0][0]){\n        case 0x0401:\n            o = XTI[1] == -1 ? \"#REF\" : supbooks.SheetNames[XTI[1]] || \"SH33TJSERR3\";\n            return XTI[1] == XTI[2] ? o : o + \":\" + supbooks.SheetNames[XTI[2]];\n        case 0x3A01:\n            return supbooks[XTI[0]].slice(1).map(function(name) {\n                return name.Name;\n            }).join(\";;\"); //return \"SH33TJSERR8\";\n        default:\n            if (!supbooks[XTI[0]][0][3]) return \"SH33TJSERR2\";\n            o = XTI[1] == -1 ? \"#REF\" : supbooks[XTI[0]][0][3][XTI[1]] || \"SH33TJSERR4\";\n            return XTI[1] == XTI[2] ? o : o + \":\" + supbooks[XTI[0]][0][3][XTI[2]];\n    }\n}\nfunction get_ixti(supbooks, ixti /*:number*/ , opts) /*:string*/ {\n    var ixtiraw = get_ixti_raw(supbooks, ixti, opts);\n    return ixtiraw == \"#REF\" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);\n}\nfunction stringify_formula(formula /*Array<any>*/ , range, cell /*:any*/ , supbooks, opts) /*:string*/ {\n    var biff = opts && opts.biff || 8;\n    var _range = /*range != null ? range :*/ {\n        s: {\n            c: 0,\n            r: 0\n        },\n        e: {\n            c: 0,\n            r: 0\n        }\n    };\n    var stack /*:Array<string>*/  = [], e1, e2, /*::type,*/ c /*:CellAddress*/ , ixti = 0, nameidx = 0, r, sname = \"\";\n    if (!formula[0] || !formula[0][0]) return \"\";\n    var last_sp = -1, sp = \"\";\n    for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff){\n        var f = formula[0][ff];\n        switch(f[0]){\n            case \"PtgUminus\":\n                /* [MS-XLS] 2.5.198.93 */ stack.push(\"-\" + stack.pop());\n                break;\n            case \"PtgUplus\":\n                /* [MS-XLS] 2.5.198.95 */ stack.push(\"+\" + stack.pop());\n                break;\n            case \"PtgPercent\":\n                /* [MS-XLS] 2.5.198.81 */ stack.push(stack.pop() + \"%\");\n                break;\n            case \"PtgAdd\":\n            /* [MS-XLS] 2.5.198.26 */ case \"PtgConcat\":\n            /* [MS-XLS] 2.5.198.43 */ case \"PtgDiv\":\n            /* [MS-XLS] 2.5.198.45 */ case \"PtgEq\":\n            /* [MS-XLS] 2.5.198.56 */ case \"PtgGe\":\n            /* [MS-XLS] 2.5.198.64 */ case \"PtgGt\":\n            /* [MS-XLS] 2.5.198.65 */ case \"PtgLe\":\n            /* [MS-XLS] 2.5.198.68 */ case \"PtgLt\":\n            /* [MS-XLS] 2.5.198.69 */ case \"PtgMul\":\n            /* [MS-XLS] 2.5.198.75 */ case \"PtgNe\":\n            /* [MS-XLS] 2.5.198.78 */ case \"PtgPower\":\n            /* [MS-XLS] 2.5.198.82 */ case \"PtgSub\":\n                /* [MS-XLS] 2.5.198.90 */ e1 = stack.pop();\n                e2 = stack.pop();\n                if (last_sp >= 0) {\n                    switch(formula[0][last_sp][1][0]){\n                        case 0:\n                            // $FlowIgnore\n                            sp = fill(\" \", formula[0][last_sp][1][1]);\n                            break;\n                        case 1:\n                            // $FlowIgnore\n                            sp = fill(\"\\r\", formula[0][last_sp][1][1]);\n                            break;\n                        default:\n                            sp = \"\";\n                            // $FlowIgnore\n                            if (opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + formula[0][last_sp][1][0]);\n                    }\n                    e2 = e2 + sp;\n                    last_sp = -1;\n                }\n                stack.push(e2 + PtgBinOp[f[0]] + e1);\n                break;\n            case \"PtgIsect\":\n                /* [MS-XLS] 2.5.198.67 */ e1 = stack.pop();\n                e2 = stack.pop();\n                stack.push(e2 + \" \" + e1);\n                break;\n            case \"PtgUnion\":\n                /* [MS-XLS] 2.5.198.94 */ e1 = stack.pop();\n                e2 = stack.pop();\n                stack.push(e2 + \",\" + e1);\n                break;\n            case \"PtgRange\":\n                /* [MS-XLS] 2.5.198.83 */ e1 = stack.pop();\n                e2 = stack.pop();\n                stack.push(e2 + \":\" + e1);\n                break;\n            case \"PtgAttrChoose\":\n                break;\n            case \"PtgAttrGoto\":\n                break;\n            case \"PtgAttrIf\":\n                break;\n            case \"PtgAttrIfError\":\n                break;\n            case \"PtgRef\":\n                /* [MS-XLS] 2.5.198.84 */ /*::type = f[1][0]; */ c = shift_cell_xls(f[1][1], _range, opts);\n                stack.push(encode_cell_xls(c, biff));\n                break;\n            case \"PtgRefN\":\n                /* [MS-XLS] 2.5.198.88 */ /*::type = f[1][0]; */ c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];\n                stack.push(encode_cell_xls(c, biff));\n                break;\n            case \"PtgRef3d\":\n                /* [MS-XLS] 2.5.198.85 */ /*::type = f[1][0]; */ ixti = /*::Number(*/ f[1][1] /*::)*/ ;\n                c = shift_cell_xls(f[1][2], _range, opts);\n                sname = get_ixti(supbooks, ixti, opts);\n                var w = sname; /* IE9 fails on defined names */  // eslint-disable-line no-unused-vars\n                stack.push(sname + \"!\" + encode_cell_xls(c, biff));\n                break;\n            case \"PtgFunc\":\n            /* [MS-XLS] 2.5.198.62 */ case \"PtgFuncVar\":\n                /* [MS-XLS] 2.5.198.63 */ /* f[1] = [argc, func, type] */ var argc /*:number*/  = f[1][0], func /*:string*/  = f[1][1];\n                if (!argc) argc = 0;\n                argc &= 0x7F;\n                var args = argc == 0 ? [] : stack.slice(-argc);\n                stack.length -= argc;\n                if (func === \"User\") func = args.shift();\n                stack.push(func + \"(\" + args.join(\",\") + \")\");\n                break;\n            case \"PtgBool\":\n                /* [MS-XLS] 2.5.198.42 */ stack.push(f[1] ? \"TRUE\" : \"FALSE\");\n                break;\n            case \"PtgInt\":\n                /* [MS-XLS] 2.5.198.66 */ stack.push(/*::String(*/ f[1]);\n                break;\n            case \"PtgNum\":\n                /* [MS-XLS] 2.5.198.79 TODO: precision? */ stack.push(String(f[1]));\n                break;\n            case \"PtgStr\":\n                /* [MS-XLS] 2.5.198.89 */ // $FlowIgnore\n                stack.push('\"' + f[1].replace(/\"/g, '\"\"') + '\"');\n                break;\n            case \"PtgErr\":\n                /* [MS-XLS] 2.5.198.57 */ stack.push(/*::String(*/ f[1]);\n                break;\n            case \"PtgAreaN\":\n                /* [MS-XLS] 2.5.198.31 TODO */ /*::type = f[1][0]; */ r = shift_range_xls(f[1][1], cell ? {\n                    s: cell\n                } : _range, opts);\n                stack.push(encode_range_xls(r /*:any*/ , opts));\n                break;\n            case \"PtgArea\":\n                /* [MS-XLS] 2.5.198.27 TODO: fixed points */ /*::type = f[1][0]; */ r = shift_range_xls(f[1][1], _range, opts);\n                stack.push(encode_range_xls(r /*:any*/ , opts));\n                break;\n            case \"PtgArea3d\":\n                /* [MS-XLS] 2.5.198.28 TODO */ /*::type = f[1][0]; */ ixti = /*::Number(*/ f[1][1] /*::)*/ ;\n                r = f[1][2];\n                sname = get_ixti(supbooks, ixti, opts);\n                stack.push(sname + \"!\" + encode_range_xls(r /*:any*/ , opts));\n                break;\n            case \"PtgAttrSum\":\n                /* [MS-XLS] 2.5.198.41 */ stack.push(\"SUM(\" + stack.pop() + \")\");\n                break;\n            case \"PtgAttrBaxcel\":\n            /* [MS-XLS] 2.5.198.33 */ case \"PtgAttrSemi\":\n                break;\n            case \"PtgName\":\n                /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */ /* f[1] = type, 0, nameindex */ nameidx = f[1][2];\n                var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];\n                var name = lbl ? lbl.Name : \"SH33TJSNAME\" + String(nameidx);\n                /* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */ if (name && name.slice(0, 6) == \"_xlfn.\" && !opts.xlfn) name = name.slice(6);\n                stack.push(name);\n                break;\n            case \"PtgNameX\":\n                /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */ /* f[1] = type, ixti, nameindex */ var bookidx /*:number*/  = f[1][1];\n                nameidx = f[1][2];\n                var externbook;\n                /* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */ if (opts.biff <= 5) {\n                    if (bookidx < 0) bookidx = -bookidx;\n                    if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];\n                } else {\n                    var o = \"\";\n                    if (((supbooks[bookidx] || [])[0] || [])[0] == 0x3A01) {} else if (((supbooks[bookidx] || [])[0] || [])[0] == 0x0401) {\n                        if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {\n                            o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + \"!\";\n                        }\n                    } else o = supbooks.SheetNames[nameidx - 1] + \"!\";\n                    if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;\n                    else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;\n                    else {\n                        var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || \"\").split(\";;\");\n                        if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct\n                        else o += \"SH33TJSERRX\";\n                    }\n                    stack.push(o);\n                    break;\n                }\n                if (!externbook) externbook = {\n                    Name: \"SH33TJSERRY\"\n                };\n                stack.push(externbook.Name);\n                break;\n            case \"PtgParen\":\n                /* [MS-XLS] 2.5.198.80 */ var lp = \"(\", rp = \")\";\n                if (last_sp >= 0) {\n                    sp = \"\";\n                    switch(formula[0][last_sp][1][0]){\n                        // $FlowIgnore\n                        case 2:\n                            lp = fill(\" \", formula[0][last_sp][1][1]) + lp;\n                            break;\n                        // $FlowIgnore\n                        case 3:\n                            lp = fill(\"\\r\", formula[0][last_sp][1][1]) + lp;\n                            break;\n                        // $FlowIgnore\n                        case 4:\n                            rp = fill(\" \", formula[0][last_sp][1][1]) + rp;\n                            break;\n                        // $FlowIgnore\n                        case 5:\n                            rp = fill(\"\\r\", formula[0][last_sp][1][1]) + rp;\n                            break;\n                        default:\n                            // $FlowIgnore\n                            if (opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + formula[0][last_sp][1][0]);\n                    }\n                    last_sp = -1;\n                }\n                stack.push(lp + stack.pop() + rp);\n                break;\n            case \"PtgRefErr\":\n                /* [MS-XLS] 2.5.198.86 */ stack.push(\"#REF!\");\n                break;\n            case \"PtgRefErr3d\":\n                /* [MS-XLS] 2.5.198.87 */ stack.push(\"#REF!\");\n                break;\n            case \"PtgExp\":\n                /* [MS-XLS] 2.5.198.58 TODO */ c = {\n                    c: f[1][1],\n                    r: f[1][0]\n                };\n                var q = {\n                    c: cell.c,\n                    r: cell.r\n                } /*:any*/ ;\n                if (supbooks.sharedf[encode_cell(c)]) {\n                    var parsedf = supbooks.sharedf[encode_cell(c)];\n                    stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));\n                } else {\n                    var fnd = false;\n                    for(e1 = 0; e1 != supbooks.arrayf.length; ++e1){\n                        /* TODO: should be something like range_has */ e2 = supbooks.arrayf[e1];\n                        if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;\n                        if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;\n                        stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));\n                        fnd = true;\n                        break;\n                    }\n                    if (!fnd) stack.push(/*::String(*/ f[1]);\n                }\n                break;\n            case \"PtgArray\":\n                /* [MS-XLS] 2.5.198.32 TODO */ stack.push(\"{\" + stringify_array(/*::(*/ f[1]) + \"}\");\n                break;\n            case \"PtgMemArea\":\n                break;\n            case \"PtgAttrSpace\":\n            /* [MS-XLS] 2.5.198.38 */ case \"PtgAttrSpaceSemi\":\n                /* [MS-XLS] 2.5.198.39 */ last_sp = ff;\n                break;\n            case \"PtgTbl\":\n                break;\n            case \"PtgMemErr\":\n                break;\n            case \"PtgMissArg\":\n                /* [MS-XLS] 2.5.198.74 */ stack.push(\"\");\n                break;\n            case \"PtgAreaErr\":\n                /* [MS-XLS] 2.5.198.29 */ stack.push(\"#REF!\");\n                break;\n            case \"PtgAreaErr3d\":\n                /* [MS-XLS] 2.5.198.30 */ stack.push(\"#REF!\");\n                break;\n            case \"PtgList\":\n                /* [MS-XLSB] 2.5.97.52 */ // $FlowIgnore\n                stack.push(\"Table\" + f[1].idx + \"[#\" + f[1].rt + \"]\");\n                break;\n            case \"PtgMemAreaN\":\n            case \"PtgMemNoMemN\":\n            case \"PtgAttrNoop\":\n            case \"PtgSheet\":\n            case \"PtgEndSheet\":\n                break;\n            case \"PtgMemFunc\":\n                break;\n            case \"PtgMemNoMem\":\n                break;\n            case \"PtgElfCol\":\n            /* [MS-XLS] 2.5.198.46 */ case \"PtgElfColS\":\n            /* [MS-XLS] 2.5.198.47 */ case \"PtgElfColSV\":\n            /* [MS-XLS] 2.5.198.48 */ case \"PtgElfColV\":\n            /* [MS-XLS] 2.5.198.49 */ case \"PtgElfLel\":\n            /* [MS-XLS] 2.5.198.50 */ case \"PtgElfRadical\":\n            /* [MS-XLS] 2.5.198.51 */ case \"PtgElfRadicalLel\":\n            /* [MS-XLS] 2.5.198.52 */ case \"PtgElfRadicalS\":\n            /* [MS-XLS] 2.5.198.53 */ case \"PtgElfRw\":\n            /* [MS-XLS] 2.5.198.54 */ case \"PtgElfRwV\":\n                /* [MS-XLS] 2.5.198.55 */ throw new Error(\"Unsupported ELFs\");\n            case \"PtgSxName\":\n                /* [MS-XLS] 2.5.198.91 TODO -- find a test case */ throw new Error(\"Unrecognized Formula Token: \" + String(f));\n            default:\n                throw new Error(\"Unrecognized Formula Token: \" + String(f));\n        }\n        var PtgNonDisp = [\n            \"PtgAttrSpace\",\n            \"PtgAttrSpaceSemi\",\n            \"PtgAttrGoto\"\n        ];\n        if (opts.biff != 3) {\n            if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {\n                f = formula[0][last_sp];\n                var _left = true;\n                switch(f[1][0]){\n                    /* note: some bad XLSB files omit the PtgParen */ case 4:\n                        _left = false;\n                    /* falls through */ case 0:\n                        // $FlowIgnore\n                        sp = fill(\" \", f[1][1]);\n                        break;\n                    case 5:\n                        _left = false;\n                    /* falls through */ case 1:\n                        // $FlowIgnore\n                        sp = fill(\"\\r\", f[1][1]);\n                        break;\n                    default:\n                        sp = \"\";\n                        // $FlowIgnore\n                        if (opts.WTF) throw new Error(\"Unexpected PtgAttrSpaceType \" + f[1][0]);\n                }\n                stack.push((_left ? sp : \"\") + stack.pop() + (_left ? \"\" : sp));\n                last_sp = -1;\n            }\n        }\n    }\n    if (stack.length > 1 && opts.WTF) throw new Error(\"bad formula stack\");\n    return stack[0];\n}\n/* [MS-XLS] 2.5.198.1 TODO */ function parse_ArrayParsedFormula(blob, length, opts /*::, ref*/ ) {\n    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;\n    var rgcb, cce = blob.read_shift(len); // length of rgce\n    if (cce == 0xFFFF) return [\n        [],\n        parsenoop(blob, length - 2)\n    ];\n    var rgce = parse_Rgce(blob, cce, opts);\n    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);\n    blob.l = target;\n    return [\n        rgce,\n        rgcb\n    ];\n}\n/* [MS-XLS] 2.5.198.3 TODO */ function parse_XLSCellParsedFormula(blob, length, opts) {\n    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;\n    var rgcb, cce = blob.read_shift(len); // length of rgce\n    if (cce == 0xFFFF) return [\n        [],\n        parsenoop(blob, length - 2)\n    ];\n    var rgce = parse_Rgce(blob, cce, opts);\n    if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);\n    blob.l = target;\n    return [\n        rgce,\n        rgcb\n    ];\n}\n/* [MS-XLS] 2.5.198.21 */ function parse_NameParsedFormula(blob, length, opts, cce) {\n    var target = blob.l + length;\n    var rgce = parse_Rgce(blob, cce, opts);\n    var rgcb;\n    if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n    return [\n        rgce,\n        rgcb\n    ];\n}\n/* [MS-XLS] 2.5.198.118 TODO */ function parse_SharedParsedFormula(blob, length, opts) {\n    var target = blob.l + length;\n    var rgcb, cce = blob.read_shift(2); // length of rgce\n    var rgce = parse_Rgce(blob, cce, opts);\n    if (cce == 0xFFFF) return [\n        [],\n        parsenoop(blob, length - 2)\n    ];\n    if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n    return [\n        rgce,\n        rgcb\n    ];\n}\n/* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */ function parse_FormulaValue(blob /*::, length*/ ) {\n    var b;\n    if (__readUInt16LE(blob, blob.l + 6) !== 0xFFFF) return [\n        parse_Xnum(blob),\n        \"n\"\n    ];\n    switch(blob[blob.l]){\n        case 0x00:\n            blob.l += 8;\n            return [\n                \"String\",\n                \"s\"\n            ];\n        case 0x01:\n            b = blob[blob.l + 2] === 0x1;\n            blob.l += 8;\n            return [\n                b,\n                \"b\"\n            ];\n        case 0x02:\n            b = blob[blob.l + 2];\n            blob.l += 8;\n            return [\n                b,\n                \"e\"\n            ];\n        case 0x03:\n            blob.l += 8;\n            return [\n                \"\",\n                \"s\"\n            ];\n    }\n    return [];\n}\nfunction write_FormulaValue(value) {\n    if (value == null) {\n        // Blank String Value\n        var o = new_buf(8);\n        o.write_shift(1, 0x03);\n        o.write_shift(1, 0);\n        o.write_shift(2, 0);\n        o.write_shift(2, 0);\n        o.write_shift(2, 0xFFFF);\n        return o;\n    } else if (typeof value == \"number\") return write_Xnum(value);\n    return write_Xnum(0);\n}\n/* [MS-XLS] 2.4.127 TODO */ function parse_Formula(blob, length, opts) {\n    var end = blob.l + length;\n    var cell = parse_XLSCell(blob, 6);\n    if (opts.biff == 2) ++blob.l;\n    var val = parse_FormulaValue(blob, 8);\n    var flags = blob.read_shift(1);\n    if (opts.biff != 2) {\n        blob.read_shift(1);\n        if (opts.biff >= 5) {\n            /*var chn = */ blob.read_shift(4);\n        }\n    }\n    var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);\n    return {\n        cell: cell,\n        val: val[0],\n        formula: cbf,\n        shared: flags >> 3 & 1,\n        tt: val[1]\n    };\n}\nfunction write_Formula(cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts, os /*:number*/ ) {\n    // Cell\n    var o1 = write_XLSCell(R, C, os);\n    // FormulaValue\n    var o2 = write_FormulaValue(cell.v);\n    // flags + cache\n    var o3 = new_buf(6);\n    var flags = 0x01 | 0x20;\n    o3.write_shift(2, flags);\n    o3.write_shift(4, 0);\n    // CellParsedFormula\n    var bf = new_buf(cell.bf.length);\n    for(var i = 0; i < cell.bf.length; ++i)bf[i] = cell.bf[i];\n    var out = bconcat([\n        o1,\n        o2,\n        o3,\n        bf\n    ]);\n    return out;\n}\n/* XLSB Parsed Formula records have the same shape */ function parse_XLSBParsedFormula(data, length, opts) {\n    var cce = data.read_shift(4);\n    var rgce = parse_Rgce(data, cce, opts);\n    var cb = data.read_shift(4);\n    var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;\n    return [\n        rgce,\n        rgcb\n    ];\n}\n/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */ var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.4 CellParsedFormula */ var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.8 DVParsedFormula */ //var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.9 FRTParsedFormula */ //var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;\n/* [MS-XLSB] 2.5.97.12 NameParsedFormula */ var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;\n/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */ var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;\nvar Cetab = {\n    0: \"BEEP\",\n    1: \"OPEN\",\n    2: \"OPEN.LINKS\",\n    3: \"CLOSE.ALL\",\n    4: \"SAVE\",\n    5: \"SAVE.AS\",\n    6: \"FILE.DELETE\",\n    7: \"PAGE.SETUP\",\n    8: \"PRINT\",\n    9: \"PRINTER.SETUP\",\n    10: \"QUIT\",\n    11: \"NEW.WINDOW\",\n    12: \"ARRANGE.ALL\",\n    13: \"WINDOW.SIZE\",\n    14: \"WINDOW.MOVE\",\n    15: \"FULL\",\n    16: \"CLOSE\",\n    17: \"RUN\",\n    22: \"SET.PRINT.AREA\",\n    23: \"SET.PRINT.TITLES\",\n    24: \"SET.PAGE.BREAK\",\n    25: \"REMOVE.PAGE.BREAK\",\n    26: \"FONT\",\n    27: \"DISPLAY\",\n    28: \"PROTECT.DOCUMENT\",\n    29: \"PRECISION\",\n    30: \"A1.R1C1\",\n    31: \"CALCULATE.NOW\",\n    32: \"CALCULATION\",\n    34: \"DATA.FIND\",\n    35: \"EXTRACT\",\n    36: \"DATA.DELETE\",\n    37: \"SET.DATABASE\",\n    38: \"SET.CRITERIA\",\n    39: \"SORT\",\n    40: \"DATA.SERIES\",\n    41: \"TABLE\",\n    42: \"FORMAT.NUMBER\",\n    43: \"ALIGNMENT\",\n    44: \"STYLE\",\n    45: \"BORDER\",\n    46: \"CELL.PROTECTION\",\n    47: \"COLUMN.WIDTH\",\n    48: \"UNDO\",\n    49: \"CUT\",\n    50: \"COPY\",\n    51: \"PASTE\",\n    52: \"CLEAR\",\n    53: \"PASTE.SPECIAL\",\n    54: \"EDIT.DELETE\",\n    55: \"INSERT\",\n    56: \"FILL.RIGHT\",\n    57: \"FILL.DOWN\",\n    61: \"DEFINE.NAME\",\n    62: \"CREATE.NAMES\",\n    63: \"FORMULA.GOTO\",\n    64: \"FORMULA.FIND\",\n    65: \"SELECT.LAST.CELL\",\n    66: \"SHOW.ACTIVE.CELL\",\n    67: \"GALLERY.AREA\",\n    68: \"GALLERY.BAR\",\n    69: \"GALLERY.COLUMN\",\n    70: \"GALLERY.LINE\",\n    71: \"GALLERY.PIE\",\n    72: \"GALLERY.SCATTER\",\n    73: \"COMBINATION\",\n    74: \"PREFERRED\",\n    75: \"ADD.OVERLAY\",\n    76: \"GRIDLINES\",\n    77: \"SET.PREFERRED\",\n    78: \"AXES\",\n    79: \"LEGEND\",\n    80: \"ATTACH.TEXT\",\n    81: \"ADD.ARROW\",\n    82: \"SELECT.CHART\",\n    83: \"SELECT.PLOT.AREA\",\n    84: \"PATTERNS\",\n    85: \"MAIN.CHART\",\n    86: \"OVERLAY\",\n    87: \"SCALE\",\n    88: \"FORMAT.LEGEND\",\n    89: \"FORMAT.TEXT\",\n    90: \"EDIT.REPEAT\",\n    91: \"PARSE\",\n    92: \"JUSTIFY\",\n    93: \"HIDE\",\n    94: \"UNHIDE\",\n    95: \"WORKSPACE\",\n    96: \"FORMULA\",\n    97: \"FORMULA.FILL\",\n    98: \"FORMULA.ARRAY\",\n    99: \"DATA.FIND.NEXT\",\n    100: \"DATA.FIND.PREV\",\n    101: \"FORMULA.FIND.NEXT\",\n    102: \"FORMULA.FIND.PREV\",\n    103: \"ACTIVATE\",\n    104: \"ACTIVATE.NEXT\",\n    105: \"ACTIVATE.PREV\",\n    106: \"UNLOCKED.NEXT\",\n    107: \"UNLOCKED.PREV\",\n    108: \"COPY.PICTURE\",\n    109: \"SELECT\",\n    110: \"DELETE.NAME\",\n    111: \"DELETE.FORMAT\",\n    112: \"VLINE\",\n    113: \"HLINE\",\n    114: \"VPAGE\",\n    115: \"HPAGE\",\n    116: \"VSCROLL\",\n    117: \"HSCROLL\",\n    118: \"ALERT\",\n    119: \"NEW\",\n    120: \"CANCEL.COPY\",\n    121: \"SHOW.CLIPBOARD\",\n    122: \"MESSAGE\",\n    124: \"PASTE.LINK\",\n    125: \"APP.ACTIVATE\",\n    126: \"DELETE.ARROW\",\n    127: \"ROW.HEIGHT\",\n    128: \"FORMAT.MOVE\",\n    129: \"FORMAT.SIZE\",\n    130: \"FORMULA.REPLACE\",\n    131: \"SEND.KEYS\",\n    132: \"SELECT.SPECIAL\",\n    133: \"APPLY.NAMES\",\n    134: \"REPLACE.FONT\",\n    135: \"FREEZE.PANES\",\n    136: \"SHOW.INFO\",\n    137: \"SPLIT\",\n    138: \"ON.WINDOW\",\n    139: \"ON.DATA\",\n    140: \"DISABLE.INPUT\",\n    142: \"OUTLINE\",\n    143: \"LIST.NAMES\",\n    144: \"FILE.CLOSE\",\n    145: \"SAVE.WORKBOOK\",\n    146: \"DATA.FORM\",\n    147: \"COPY.CHART\",\n    148: \"ON.TIME\",\n    149: \"WAIT\",\n    150: \"FORMAT.FONT\",\n    151: \"FILL.UP\",\n    152: \"FILL.LEFT\",\n    153: \"DELETE.OVERLAY\",\n    155: \"SHORT.MENUS\",\n    159: \"SET.UPDATE.STATUS\",\n    161: \"COLOR.PALETTE\",\n    162: \"DELETE.STYLE\",\n    163: \"WINDOW.RESTORE\",\n    164: \"WINDOW.MAXIMIZE\",\n    166: \"CHANGE.LINK\",\n    167: \"CALCULATE.DOCUMENT\",\n    168: \"ON.KEY\",\n    169: \"APP.RESTORE\",\n    170: \"APP.MOVE\",\n    171: \"APP.SIZE\",\n    172: \"APP.MINIMIZE\",\n    173: \"APP.MAXIMIZE\",\n    174: \"BRING.TO.FRONT\",\n    175: \"SEND.TO.BACK\",\n    185: \"MAIN.CHART.TYPE\",\n    186: \"OVERLAY.CHART.TYPE\",\n    187: \"SELECT.END\",\n    188: \"OPEN.MAIL\",\n    189: \"SEND.MAIL\",\n    190: \"STANDARD.FONT\",\n    191: \"CONSOLIDATE\",\n    192: \"SORT.SPECIAL\",\n    193: \"GALLERY.3D.AREA\",\n    194: \"GALLERY.3D.COLUMN\",\n    195: \"GALLERY.3D.LINE\",\n    196: \"GALLERY.3D.PIE\",\n    197: \"VIEW.3D\",\n    198: \"GOAL.SEEK\",\n    199: \"WORKGROUP\",\n    200: \"FILL.GROUP\",\n    201: \"UPDATE.LINK\",\n    202: \"PROMOTE\",\n    203: \"DEMOTE\",\n    204: \"SHOW.DETAIL\",\n    206: \"UNGROUP\",\n    207: \"OBJECT.PROPERTIES\",\n    208: \"SAVE.NEW.OBJECT\",\n    209: \"SHARE\",\n    210: \"SHARE.NAME\",\n    211: \"DUPLICATE\",\n    212: \"APPLY.STYLE\",\n    213: \"ASSIGN.TO.OBJECT\",\n    214: \"OBJECT.PROTECTION\",\n    215: \"HIDE.OBJECT\",\n    216: \"SET.EXTRACT\",\n    217: \"CREATE.PUBLISHER\",\n    218: \"SUBSCRIBE.TO\",\n    219: \"ATTRIBUTES\",\n    220: \"SHOW.TOOLBAR\",\n    222: \"PRINT.PREVIEW\",\n    223: \"EDIT.COLOR\",\n    224: \"SHOW.LEVELS\",\n    225: \"FORMAT.MAIN\",\n    226: \"FORMAT.OVERLAY\",\n    227: \"ON.RECALC\",\n    228: \"EDIT.SERIES\",\n    229: \"DEFINE.STYLE\",\n    240: \"LINE.PRINT\",\n    243: \"ENTER.DATA\",\n    249: \"GALLERY.RADAR\",\n    250: \"MERGE.STYLES\",\n    251: \"EDITION.OPTIONS\",\n    252: \"PASTE.PICTURE\",\n    253: \"PASTE.PICTURE.LINK\",\n    254: \"SPELLING\",\n    256: \"ZOOM\",\n    259: \"INSERT.OBJECT\",\n    260: \"WINDOW.MINIMIZE\",\n    265: \"SOUND.NOTE\",\n    266: \"SOUND.PLAY\",\n    267: \"FORMAT.SHAPE\",\n    268: \"EXTEND.POLYGON\",\n    269: \"FORMAT.AUTO\",\n    272: \"GALLERY.3D.BAR\",\n    273: \"GALLERY.3D.SURFACE\",\n    274: \"FILL.AUTO\",\n    276: \"CUSTOMIZE.TOOLBAR\",\n    277: \"ADD.TOOL\",\n    278: \"EDIT.OBJECT\",\n    279: \"ON.DOUBLECLICK\",\n    280: \"ON.ENTRY\",\n    281: \"WORKBOOK.ADD\",\n    282: \"WORKBOOK.MOVE\",\n    283: \"WORKBOOK.COPY\",\n    284: \"WORKBOOK.OPTIONS\",\n    285: \"SAVE.WORKSPACE\",\n    288: \"CHART.WIZARD\",\n    289: \"DELETE.TOOL\",\n    290: \"MOVE.TOOL\",\n    291: \"WORKBOOK.SELECT\",\n    292: \"WORKBOOK.ACTIVATE\",\n    293: \"ASSIGN.TO.TOOL\",\n    295: \"COPY.TOOL\",\n    296: \"RESET.TOOL\",\n    297: \"CONSTRAIN.NUMERIC\",\n    298: \"PASTE.TOOL\",\n    302: \"WORKBOOK.NEW\",\n    305: \"SCENARIO.CELLS\",\n    306: \"SCENARIO.DELETE\",\n    307: \"SCENARIO.ADD\",\n    308: \"SCENARIO.EDIT\",\n    309: \"SCENARIO.SHOW\",\n    310: \"SCENARIO.SHOW.NEXT\",\n    311: \"SCENARIO.SUMMARY\",\n    312: \"PIVOT.TABLE.WIZARD\",\n    313: \"PIVOT.FIELD.PROPERTIES\",\n    314: \"PIVOT.FIELD\",\n    315: \"PIVOT.ITEM\",\n    316: \"PIVOT.ADD.FIELDS\",\n    318: \"OPTIONS.CALCULATION\",\n    319: \"OPTIONS.EDIT\",\n    320: \"OPTIONS.VIEW\",\n    321: \"ADDIN.MANAGER\",\n    322: \"MENU.EDITOR\",\n    323: \"ATTACH.TOOLBARS\",\n    324: \"VBAActivate\",\n    325: \"OPTIONS.CHART\",\n    328: \"VBA.INSERT.FILE\",\n    330: \"VBA.PROCEDURE.DEFINITION\",\n    336: \"ROUTING.SLIP\",\n    338: \"ROUTE.DOCUMENT\",\n    339: \"MAIL.LOGON\",\n    342: \"INSERT.PICTURE\",\n    343: \"EDIT.TOOL\",\n    344: \"GALLERY.DOUGHNUT\",\n    350: \"CHART.TREND\",\n    352: \"PIVOT.ITEM.PROPERTIES\",\n    354: \"WORKBOOK.INSERT\",\n    355: \"OPTIONS.TRANSITION\",\n    356: \"OPTIONS.GENERAL\",\n    370: \"FILTER.ADVANCED\",\n    373: \"MAIL.ADD.MAILER\",\n    374: \"MAIL.DELETE.MAILER\",\n    375: \"MAIL.REPLY\",\n    376: \"MAIL.REPLY.ALL\",\n    377: \"MAIL.FORWARD\",\n    378: \"MAIL.NEXT.LETTER\",\n    379: \"DATA.LABEL\",\n    380: \"INSERT.TITLE\",\n    381: \"FONT.PROPERTIES\",\n    382: \"MACRO.OPTIONS\",\n    383: \"WORKBOOK.HIDE\",\n    384: \"WORKBOOK.UNHIDE\",\n    385: \"WORKBOOK.DELETE\",\n    386: \"WORKBOOK.NAME\",\n    388: \"GALLERY.CUSTOM\",\n    390: \"ADD.CHART.AUTOFORMAT\",\n    391: \"DELETE.CHART.AUTOFORMAT\",\n    392: \"CHART.ADD.DATA\",\n    393: \"AUTO.OUTLINE\",\n    394: \"TAB.ORDER\",\n    395: \"SHOW.DIALOG\",\n    396: \"SELECT.ALL\",\n    397: \"UNGROUP.SHEETS\",\n    398: \"SUBTOTAL.CREATE\",\n    399: \"SUBTOTAL.REMOVE\",\n    400: \"RENAME.OBJECT\",\n    412: \"WORKBOOK.SCROLL\",\n    413: \"WORKBOOK.NEXT\",\n    414: \"WORKBOOK.PREV\",\n    415: \"WORKBOOK.TAB.SPLIT\",\n    416: \"FULL.SCREEN\",\n    417: \"WORKBOOK.PROTECT\",\n    420: \"SCROLLBAR.PROPERTIES\",\n    421: \"PIVOT.SHOW.PAGES\",\n    422: \"TEXT.TO.COLUMNS\",\n    423: \"FORMAT.CHARTTYPE\",\n    424: \"LINK.FORMAT\",\n    425: \"TRACER.DISPLAY\",\n    430: \"TRACER.NAVIGATE\",\n    431: \"TRACER.CLEAR\",\n    432: \"TRACER.ERROR\",\n    433: \"PIVOT.FIELD.GROUP\",\n    434: \"PIVOT.FIELD.UNGROUP\",\n    435: \"CHECKBOX.PROPERTIES\",\n    436: \"LABEL.PROPERTIES\",\n    437: \"LISTBOX.PROPERTIES\",\n    438: \"EDITBOX.PROPERTIES\",\n    439: \"PIVOT.REFRESH\",\n    440: \"LINK.COMBO\",\n    441: \"OPEN.TEXT\",\n    442: \"HIDE.DIALOG\",\n    443: \"SET.DIALOG.FOCUS\",\n    444: \"ENABLE.OBJECT\",\n    445: \"PUSHBUTTON.PROPERTIES\",\n    446: \"SET.DIALOG.DEFAULT\",\n    447: \"FILTER\",\n    448: \"FILTER.SHOW.ALL\",\n    449: \"CLEAR.OUTLINE\",\n    450: \"FUNCTION.WIZARD\",\n    451: \"ADD.LIST.ITEM\",\n    452: \"SET.LIST.ITEM\",\n    453: \"REMOVE.LIST.ITEM\",\n    454: \"SELECT.LIST.ITEM\",\n    455: \"SET.CONTROL.VALUE\",\n    456: \"SAVE.COPY.AS\",\n    458: \"OPTIONS.LISTS.ADD\",\n    459: \"OPTIONS.LISTS.DELETE\",\n    460: \"SERIES.AXES\",\n    461: \"SERIES.X\",\n    462: \"SERIES.Y\",\n    463: \"ERRORBAR.X\",\n    464: \"ERRORBAR.Y\",\n    465: \"FORMAT.CHART\",\n    466: \"SERIES.ORDER\",\n    467: \"MAIL.LOGOFF\",\n    468: \"CLEAR.ROUTING.SLIP\",\n    469: \"APP.ACTIVATE.MICROSOFT\",\n    470: \"MAIL.EDIT.MAILER\",\n    471: \"ON.SHEET\",\n    472: \"STANDARD.WIDTH\",\n    473: \"SCENARIO.MERGE\",\n    474: \"SUMMARY.INFO\",\n    475: \"FIND.FILE\",\n    476: \"ACTIVE.CELL.FONT\",\n    477: \"ENABLE.TIPWIZARD\",\n    478: \"VBA.MAKE.ADDIN\",\n    480: \"INSERTDATATABLE\",\n    481: \"WORKGROUP.OPTIONS\",\n    482: \"MAIL.SEND.MAILER\",\n    485: \"AUTOCORRECT\",\n    489: \"POST.DOCUMENT\",\n    491: \"PICKLIST\",\n    493: \"VIEW.SHOW\",\n    494: \"VIEW.DEFINE\",\n    495: \"VIEW.DELETE\",\n    509: \"SHEET.BACKGROUND\",\n    510: \"INSERT.MAP.OBJECT\",\n    511: \"OPTIONS.MENONO\",\n    517: \"MSOCHECKS\",\n    518: \"NORMAL\",\n    519: \"LAYOUT\",\n    520: \"RM.PRINT.AREA\",\n    521: \"CLEAR.PRINT.AREA\",\n    522: \"ADD.PRINT.AREA\",\n    523: \"MOVE.BRK\",\n    545: \"HIDECURR.NOTE\",\n    546: \"HIDEALL.NOTES\",\n    547: \"DELETE.NOTE\",\n    548: \"TRAVERSE.NOTES\",\n    549: \"ACTIVATE.NOTES\",\n    620: \"PROTECT.REVISIONS\",\n    621: \"UNPROTECT.REVISIONS\",\n    647: \"OPTIONS.ME\",\n    653: \"WEB.PUBLISH\",\n    667: \"NEWWEBQUERY\",\n    673: \"PIVOT.TABLE.CHART\",\n    753: \"OPTIONS.SAVE\",\n    755: \"OPTIONS.SPELL\",\n    808: \"HIDEALL.INKANNOTS\"\n};\nvar Ftab = {\n    0: \"COUNT\",\n    1: \"IF\",\n    2: \"ISNA\",\n    3: \"ISERROR\",\n    4: \"SUM\",\n    5: \"AVERAGE\",\n    6: \"MIN\",\n    7: \"MAX\",\n    8: \"ROW\",\n    9: \"COLUMN\",\n    10: \"NA\",\n    11: \"NPV\",\n    12: \"STDEV\",\n    13: \"DOLLAR\",\n    14: \"FIXED\",\n    15: \"SIN\",\n    16: \"COS\",\n    17: \"TAN\",\n    18: \"ATAN\",\n    19: \"PI\",\n    20: \"SQRT\",\n    21: \"EXP\",\n    22: \"LN\",\n    23: \"LOG10\",\n    24: \"ABS\",\n    25: \"INT\",\n    26: \"SIGN\",\n    27: \"ROUND\",\n    28: \"LOOKUP\",\n    29: \"INDEX\",\n    30: \"REPT\",\n    31: \"MID\",\n    32: \"LEN\",\n    33: \"VALUE\",\n    34: \"TRUE\",\n    35: \"FALSE\",\n    36: \"AND\",\n    37: \"OR\",\n    38: \"NOT\",\n    39: \"MOD\",\n    40: \"DCOUNT\",\n    41: \"DSUM\",\n    42: \"DAVERAGE\",\n    43: \"DMIN\",\n    44: \"DMAX\",\n    45: \"DSTDEV\",\n    46: \"VAR\",\n    47: \"DVAR\",\n    48: \"TEXT\",\n    49: \"LINEST\",\n    50: \"TREND\",\n    51: \"LOGEST\",\n    52: \"GROWTH\",\n    53: \"GOTO\",\n    54: \"HALT\",\n    55: \"RETURN\",\n    56: \"PV\",\n    57: \"FV\",\n    58: \"NPER\",\n    59: \"PMT\",\n    60: \"RATE\",\n    61: \"MIRR\",\n    62: \"IRR\",\n    63: \"RAND\",\n    64: \"MATCH\",\n    65: \"DATE\",\n    66: \"TIME\",\n    67: \"DAY\",\n    68: \"MONTH\",\n    69: \"YEAR\",\n    70: \"WEEKDAY\",\n    71: \"HOUR\",\n    72: \"MINUTE\",\n    73: \"SECOND\",\n    74: \"NOW\",\n    75: \"AREAS\",\n    76: \"ROWS\",\n    77: \"COLUMNS\",\n    78: \"OFFSET\",\n    79: \"ABSREF\",\n    80: \"RELREF\",\n    81: \"ARGUMENT\",\n    82: \"SEARCH\",\n    83: \"TRANSPOSE\",\n    84: \"ERROR\",\n    85: \"STEP\",\n    86: \"TYPE\",\n    87: \"ECHO\",\n    88: \"SET.NAME\",\n    89: \"CALLER\",\n    90: \"DEREF\",\n    91: \"WINDOWS\",\n    92: \"SERIES\",\n    93: \"DOCUMENTS\",\n    94: \"ACTIVE.CELL\",\n    95: \"SELECTION\",\n    96: \"RESULT\",\n    97: \"ATAN2\",\n    98: \"ASIN\",\n    99: \"ACOS\",\n    100: \"CHOOSE\",\n    101: \"HLOOKUP\",\n    102: \"VLOOKUP\",\n    103: \"LINKS\",\n    104: \"INPUT\",\n    105: \"ISREF\",\n    106: \"GET.FORMULA\",\n    107: \"GET.NAME\",\n    108: \"SET.VALUE\",\n    109: \"LOG\",\n    110: \"EXEC\",\n    111: \"CHAR\",\n    112: \"LOWER\",\n    113: \"UPPER\",\n    114: \"PROPER\",\n    115: \"LEFT\",\n    116: \"RIGHT\",\n    117: \"EXACT\",\n    118: \"TRIM\",\n    119: \"REPLACE\",\n    120: \"SUBSTITUTE\",\n    121: \"CODE\",\n    122: \"NAMES\",\n    123: \"DIRECTORY\",\n    124: \"FIND\",\n    125: \"CELL\",\n    126: \"ISERR\",\n    127: \"ISTEXT\",\n    128: \"ISNUMBER\",\n    129: \"ISBLANK\",\n    130: \"T\",\n    131: \"N\",\n    132: \"FOPEN\",\n    133: \"FCLOSE\",\n    134: \"FSIZE\",\n    135: \"FREADLN\",\n    136: \"FREAD\",\n    137: \"FWRITELN\",\n    138: \"FWRITE\",\n    139: \"FPOS\",\n    140: \"DATEVALUE\",\n    141: \"TIMEVALUE\",\n    142: \"SLN\",\n    143: \"SYD\",\n    144: \"DDB\",\n    145: \"GET.DEF\",\n    146: \"REFTEXT\",\n    147: \"TEXTREF\",\n    148: \"INDIRECT\",\n    149: \"REGISTER\",\n    150: \"CALL\",\n    151: \"ADD.BAR\",\n    152: \"ADD.MENU\",\n    153: \"ADD.COMMAND\",\n    154: \"ENABLE.COMMAND\",\n    155: \"CHECK.COMMAND\",\n    156: \"RENAME.COMMAND\",\n    157: \"SHOW.BAR\",\n    158: \"DELETE.MENU\",\n    159: \"DELETE.COMMAND\",\n    160: \"GET.CHART.ITEM\",\n    161: \"DIALOG.BOX\",\n    162: \"CLEAN\",\n    163: \"MDETERM\",\n    164: \"MINVERSE\",\n    165: \"MMULT\",\n    166: \"FILES\",\n    167: \"IPMT\",\n    168: \"PPMT\",\n    169: \"COUNTA\",\n    170: \"CANCEL.KEY\",\n    171: \"FOR\",\n    172: \"WHILE\",\n    173: \"BREAK\",\n    174: \"NEXT\",\n    175: \"INITIATE\",\n    176: \"REQUEST\",\n    177: \"POKE\",\n    178: \"EXECUTE\",\n    179: \"TERMINATE\",\n    180: \"RESTART\",\n    181: \"HELP\",\n    182: \"GET.BAR\",\n    183: \"PRODUCT\",\n    184: \"FACT\",\n    185: \"GET.CELL\",\n    186: \"GET.WORKSPACE\",\n    187: \"GET.WINDOW\",\n    188: \"GET.DOCUMENT\",\n    189: \"DPRODUCT\",\n    190: \"ISNONTEXT\",\n    191: \"GET.NOTE\",\n    192: \"NOTE\",\n    193: \"STDEVP\",\n    194: \"VARP\",\n    195: \"DSTDEVP\",\n    196: \"DVARP\",\n    197: \"TRUNC\",\n    198: \"ISLOGICAL\",\n    199: \"DCOUNTA\",\n    200: \"DELETE.BAR\",\n    201: \"UNREGISTER\",\n    204: \"USDOLLAR\",\n    205: \"FINDB\",\n    206: \"SEARCHB\",\n    207: \"REPLACEB\",\n    208: \"LEFTB\",\n    209: \"RIGHTB\",\n    210: \"MIDB\",\n    211: \"LENB\",\n    212: \"ROUNDUP\",\n    213: \"ROUNDDOWN\",\n    214: \"ASC\",\n    215: \"DBCS\",\n    216: \"RANK\",\n    219: \"ADDRESS\",\n    220: \"DAYS360\",\n    221: \"TODAY\",\n    222: \"VDB\",\n    223: \"ELSE\",\n    224: \"ELSE.IF\",\n    225: \"END.IF\",\n    226: \"FOR.CELL\",\n    227: \"MEDIAN\",\n    228: \"SUMPRODUCT\",\n    229: \"SINH\",\n    230: \"COSH\",\n    231: \"TANH\",\n    232: \"ASINH\",\n    233: \"ACOSH\",\n    234: \"ATANH\",\n    235: \"DGET\",\n    236: \"CREATE.OBJECT\",\n    237: \"VOLATILE\",\n    238: \"LAST.ERROR\",\n    239: \"CUSTOM.UNDO\",\n    240: \"CUSTOM.REPEAT\",\n    241: \"FORMULA.CONVERT\",\n    242: \"GET.LINK.INFO\",\n    243: \"TEXT.BOX\",\n    244: \"INFO\",\n    245: \"GROUP\",\n    246: \"GET.OBJECT\",\n    247: \"DB\",\n    248: \"PAUSE\",\n    251: \"RESUME\",\n    252: \"FREQUENCY\",\n    253: \"ADD.TOOLBAR\",\n    254: \"DELETE.TOOLBAR\",\n    255: \"User\",\n    256: \"RESET.TOOLBAR\",\n    257: \"EVALUATE\",\n    258: \"GET.TOOLBAR\",\n    259: \"GET.TOOL\",\n    260: \"SPELLING.CHECK\",\n    261: \"ERROR.TYPE\",\n    262: \"APP.TITLE\",\n    263: \"WINDOW.TITLE\",\n    264: \"SAVE.TOOLBAR\",\n    265: \"ENABLE.TOOL\",\n    266: \"PRESS.TOOL\",\n    267: \"REGISTER.ID\",\n    268: \"GET.WORKBOOK\",\n    269: \"AVEDEV\",\n    270: \"BETADIST\",\n    271: \"GAMMALN\",\n    272: \"BETAINV\",\n    273: \"BINOMDIST\",\n    274: \"CHIDIST\",\n    275: \"CHIINV\",\n    276: \"COMBIN\",\n    277: \"CONFIDENCE\",\n    278: \"CRITBINOM\",\n    279: \"EVEN\",\n    280: \"EXPONDIST\",\n    281: \"FDIST\",\n    282: \"FINV\",\n    283: \"FISHER\",\n    284: \"FISHERINV\",\n    285: \"FLOOR\",\n    286: \"GAMMADIST\",\n    287: \"GAMMAINV\",\n    288: \"CEILING\",\n    289: \"HYPGEOMDIST\",\n    290: \"LOGNORMDIST\",\n    291: \"LOGINV\",\n    292: \"NEGBINOMDIST\",\n    293: \"NORMDIST\",\n    294: \"NORMSDIST\",\n    295: \"NORMINV\",\n    296: \"NORMSINV\",\n    297: \"STANDARDIZE\",\n    298: \"ODD\",\n    299: \"PERMUT\",\n    300: \"POISSON\",\n    301: \"TDIST\",\n    302: \"WEIBULL\",\n    303: \"SUMXMY2\",\n    304: \"SUMX2MY2\",\n    305: \"SUMX2PY2\",\n    306: \"CHITEST\",\n    307: \"CORREL\",\n    308: \"COVAR\",\n    309: \"FORECAST\",\n    310: \"FTEST\",\n    311: \"INTERCEPT\",\n    312: \"PEARSON\",\n    313: \"RSQ\",\n    314: \"STEYX\",\n    315: \"SLOPE\",\n    316: \"TTEST\",\n    317: \"PROB\",\n    318: \"DEVSQ\",\n    319: \"GEOMEAN\",\n    320: \"HARMEAN\",\n    321: \"SUMSQ\",\n    322: \"KURT\",\n    323: \"SKEW\",\n    324: \"ZTEST\",\n    325: \"LARGE\",\n    326: \"SMALL\",\n    327: \"QUARTILE\",\n    328: \"PERCENTILE\",\n    329: \"PERCENTRANK\",\n    330: \"MODE\",\n    331: \"TRIMMEAN\",\n    332: \"TINV\",\n    334: \"MOVIE.COMMAND\",\n    335: \"GET.MOVIE\",\n    336: \"CONCATENATE\",\n    337: \"POWER\",\n    338: \"PIVOT.ADD.DATA\",\n    339: \"GET.PIVOT.TABLE\",\n    340: \"GET.PIVOT.FIELD\",\n    341: \"GET.PIVOT.ITEM\",\n    342: \"RADIANS\",\n    343: \"DEGREES\",\n    344: \"SUBTOTAL\",\n    345: \"SUMIF\",\n    346: \"COUNTIF\",\n    347: \"COUNTBLANK\",\n    348: \"SCENARIO.GET\",\n    349: \"OPTIONS.LISTS.GET\",\n    350: \"ISPMT\",\n    351: \"DATEDIF\",\n    352: \"DATESTRING\",\n    353: \"NUMBERSTRING\",\n    354: \"ROMAN\",\n    355: \"OPEN.DIALOG\",\n    356: \"SAVE.DIALOG\",\n    357: \"VIEW.GET\",\n    358: \"GETPIVOTDATA\",\n    359: \"HYPERLINK\",\n    360: \"PHONETIC\",\n    361: \"AVERAGEA\",\n    362: \"MAXA\",\n    363: \"MINA\",\n    364: \"STDEVPA\",\n    365: \"VARPA\",\n    366: \"STDEVA\",\n    367: \"VARA\",\n    368: \"BAHTTEXT\",\n    369: \"THAIDAYOFWEEK\",\n    370: \"THAIDIGIT\",\n    371: \"THAIMONTHOFYEAR\",\n    372: \"THAINUMSOUND\",\n    373: \"THAINUMSTRING\",\n    374: \"THAISTRINGLENGTH\",\n    375: \"ISTHAIDIGIT\",\n    376: \"ROUNDBAHTDOWN\",\n    377: \"ROUNDBAHTUP\",\n    378: \"THAIYEAR\",\n    379: \"RTD\",\n    380: \"CUBEVALUE\",\n    381: \"CUBEMEMBER\",\n    382: \"CUBEMEMBERPROPERTY\",\n    383: \"CUBERANKEDMEMBER\",\n    384: \"HEX2BIN\",\n    385: \"HEX2DEC\",\n    386: \"HEX2OCT\",\n    387: \"DEC2BIN\",\n    388: \"DEC2HEX\",\n    389: \"DEC2OCT\",\n    390: \"OCT2BIN\",\n    391: \"OCT2HEX\",\n    392: \"OCT2DEC\",\n    393: \"BIN2DEC\",\n    394: \"BIN2OCT\",\n    395: \"BIN2HEX\",\n    396: \"IMSUB\",\n    397: \"IMDIV\",\n    398: \"IMPOWER\",\n    399: \"IMABS\",\n    400: \"IMSQRT\",\n    401: \"IMLN\",\n    402: \"IMLOG2\",\n    403: \"IMLOG10\",\n    404: \"IMSIN\",\n    405: \"IMCOS\",\n    406: \"IMEXP\",\n    407: \"IMARGUMENT\",\n    408: \"IMCONJUGATE\",\n    409: \"IMAGINARY\",\n    410: \"IMREAL\",\n    411: \"COMPLEX\",\n    412: \"IMSUM\",\n    413: \"IMPRODUCT\",\n    414: \"SERIESSUM\",\n    415: \"FACTDOUBLE\",\n    416: \"SQRTPI\",\n    417: \"QUOTIENT\",\n    418: \"DELTA\",\n    419: \"GESTEP\",\n    420: \"ISEVEN\",\n    421: \"ISODD\",\n    422: \"MROUND\",\n    423: \"ERF\",\n    424: \"ERFC\",\n    425: \"BESSELJ\",\n    426: \"BESSELK\",\n    427: \"BESSELY\",\n    428: \"BESSELI\",\n    429: \"XIRR\",\n    430: \"XNPV\",\n    431: \"PRICEMAT\",\n    432: \"YIELDMAT\",\n    433: \"INTRATE\",\n    434: \"RECEIVED\",\n    435: \"DISC\",\n    436: \"PRICEDISC\",\n    437: \"YIELDDISC\",\n    438: \"TBILLEQ\",\n    439: \"TBILLPRICE\",\n    440: \"TBILLYIELD\",\n    441: \"PRICE\",\n    442: \"YIELD\",\n    443: \"DOLLARDE\",\n    444: \"DOLLARFR\",\n    445: \"NOMINAL\",\n    446: \"EFFECT\",\n    447: \"CUMPRINC\",\n    448: \"CUMIPMT\",\n    449: \"EDATE\",\n    450: \"EOMONTH\",\n    451: \"YEARFRAC\",\n    452: \"COUPDAYBS\",\n    453: \"COUPDAYS\",\n    454: \"COUPDAYSNC\",\n    455: \"COUPNCD\",\n    456: \"COUPNUM\",\n    457: \"COUPPCD\",\n    458: \"DURATION\",\n    459: \"MDURATION\",\n    460: \"ODDLPRICE\",\n    461: \"ODDLYIELD\",\n    462: \"ODDFPRICE\",\n    463: \"ODDFYIELD\",\n    464: \"RANDBETWEEN\",\n    465: \"WEEKNUM\",\n    466: \"AMORDEGRC\",\n    467: \"AMORLINC\",\n    468: \"CONVERT\",\n    724: \"SHEETJS\",\n    469: \"ACCRINT\",\n    470: \"ACCRINTM\",\n    471: \"WORKDAY\",\n    472: \"NETWORKDAYS\",\n    473: \"GCD\",\n    474: \"MULTINOMIAL\",\n    475: \"LCM\",\n    476: \"FVSCHEDULE\",\n    477: \"CUBEKPIMEMBER\",\n    478: \"CUBESET\",\n    479: \"CUBESETCOUNT\",\n    480: \"IFERROR\",\n    481: \"COUNTIFS\",\n    482: \"SUMIFS\",\n    483: \"AVERAGEIF\",\n    484: \"AVERAGEIFS\"\n};\nvar FtabArgc = {\n    2: 1,\n    3: 1,\n    10: 0,\n    15: 1,\n    16: 1,\n    17: 1,\n    18: 1,\n    19: 0,\n    20: 1,\n    21: 1,\n    22: 1,\n    23: 1,\n    24: 1,\n    25: 1,\n    26: 1,\n    27: 2,\n    30: 2,\n    31: 3,\n    32: 1,\n    33: 1,\n    34: 0,\n    35: 0,\n    38: 1,\n    39: 2,\n    40: 3,\n    41: 3,\n    42: 3,\n    43: 3,\n    44: 3,\n    45: 3,\n    47: 3,\n    48: 2,\n    53: 1,\n    61: 3,\n    63: 0,\n    65: 3,\n    66: 3,\n    67: 1,\n    68: 1,\n    69: 1,\n    70: 1,\n    71: 1,\n    72: 1,\n    73: 1,\n    74: 0,\n    75: 1,\n    76: 1,\n    77: 1,\n    79: 2,\n    80: 2,\n    83: 1,\n    85: 0,\n    86: 1,\n    89: 0,\n    90: 1,\n    94: 0,\n    95: 0,\n    97: 2,\n    98: 1,\n    99: 1,\n    101: 3,\n    102: 3,\n    105: 1,\n    106: 1,\n    108: 2,\n    111: 1,\n    112: 1,\n    113: 1,\n    114: 1,\n    117: 2,\n    118: 1,\n    119: 4,\n    121: 1,\n    126: 1,\n    127: 1,\n    128: 1,\n    129: 1,\n    130: 1,\n    131: 1,\n    133: 1,\n    134: 1,\n    135: 1,\n    136: 2,\n    137: 2,\n    138: 2,\n    140: 1,\n    141: 1,\n    142: 3,\n    143: 4,\n    144: 4,\n    161: 1,\n    162: 1,\n    163: 1,\n    164: 1,\n    165: 2,\n    172: 1,\n    175: 2,\n    176: 2,\n    177: 3,\n    178: 2,\n    179: 1,\n    184: 1,\n    186: 1,\n    189: 3,\n    190: 1,\n    195: 3,\n    196: 3,\n    197: 1,\n    198: 1,\n    199: 3,\n    201: 1,\n    207: 4,\n    210: 3,\n    211: 1,\n    212: 2,\n    213: 2,\n    214: 1,\n    215: 1,\n    225: 0,\n    229: 1,\n    230: 1,\n    231: 1,\n    232: 1,\n    233: 1,\n    234: 1,\n    235: 3,\n    244: 1,\n    247: 4,\n    252: 2,\n    257: 1,\n    261: 1,\n    271: 1,\n    273: 4,\n    274: 2,\n    275: 2,\n    276: 2,\n    277: 3,\n    278: 3,\n    279: 1,\n    280: 3,\n    281: 3,\n    282: 3,\n    283: 1,\n    284: 1,\n    285: 2,\n    286: 4,\n    287: 3,\n    288: 2,\n    289: 4,\n    290: 3,\n    291: 3,\n    292: 3,\n    293: 4,\n    294: 1,\n    295: 3,\n    296: 1,\n    297: 3,\n    298: 1,\n    299: 2,\n    300: 3,\n    301: 3,\n    302: 4,\n    303: 2,\n    304: 2,\n    305: 2,\n    306: 2,\n    307: 2,\n    308: 2,\n    309: 3,\n    310: 2,\n    311: 2,\n    312: 2,\n    313: 2,\n    314: 2,\n    315: 2,\n    316: 4,\n    325: 2,\n    326: 2,\n    327: 2,\n    328: 2,\n    331: 2,\n    332: 2,\n    337: 2,\n    342: 1,\n    343: 1,\n    346: 2,\n    347: 1,\n    350: 4,\n    351: 3,\n    352: 1,\n    353: 2,\n    360: 1,\n    368: 1,\n    369: 1,\n    370: 1,\n    371: 1,\n    372: 1,\n    373: 1,\n    374: 1,\n    375: 1,\n    376: 1,\n    377: 1,\n    378: 1,\n    382: 3,\n    385: 1,\n    392: 1,\n    393: 1,\n    396: 2,\n    397: 2,\n    398: 2,\n    399: 1,\n    400: 1,\n    401: 1,\n    402: 1,\n    403: 1,\n    404: 1,\n    405: 1,\n    406: 1,\n    407: 1,\n    408: 1,\n    409: 1,\n    410: 1,\n    414: 4,\n    415: 1,\n    416: 1,\n    417: 2,\n    420: 1,\n    421: 1,\n    422: 2,\n    424: 1,\n    425: 2,\n    426: 2,\n    427: 2,\n    428: 2,\n    430: 3,\n    438: 3,\n    439: 3,\n    440: 3,\n    443: 2,\n    444: 2,\n    445: 2,\n    446: 2,\n    447: 6,\n    448: 6,\n    449: 2,\n    450: 2,\n    464: 2,\n    468: 3,\n    476: 2,\n    479: 1,\n    480: 2,\n    65535: 0\n};\n/* Part 3 TODO: actually parse formulae */ function ods_to_csf_formula(f /*:string*/ ) /*:string*/ {\n    if (f.slice(0, 3) == \"of:\") f = f.slice(3);\n    /* 5.2 Basic Expressions */ if (f.charCodeAt(0) == 61) {\n        f = f.slice(1);\n        if (f.charCodeAt(0) == 61) f = f.slice(1);\n    }\n    f = f.replace(/COM\\.MICROSOFT\\./g, \"\");\n    /* Part 3 Section 5.8 References */ f = f.replace(/\\[((?:\\.[A-Z]+[0-9]+)(?::\\.[A-Z]+[0-9]+)?)\\]/g, function($$, $1) {\n        return $1.replace(/\\./g, \"\");\n    });\n    /* TODO: something other than this */ f = f.replace(/\\[.(#[A-Z]*[?!])\\]/g, \"$1\");\n    return f.replace(/[;~]/g, \",\").replace(/\\|/g, \";\");\n}\nfunction csf_to_ods_formula(f /*:string*/ ) /*:string*/ {\n    var o = \"of:=\" + f.replace(crefregex, \"$1[.$2$3$4$5]\").replace(/\\]:\\[/g, \":\");\n    /* TODO: something other than this */ return o.replace(/;/g, \"|\").replace(/,/g, \";\");\n}\nfunction ods_to_csf_3D(r /*:string*/ ) /*:[string, string]*/ {\n    var a = r.split(\":\");\n    var s = a[0].split(\".\")[0];\n    return [\n        s,\n        a[0].split(\".\")[1] + (a.length > 1 ? \":\" + (a[1].split(\".\")[1] || a[1].split(\".\")[0]) : \"\")\n    ];\n}\nfunction csf_to_ods_3D(r /*:string*/ ) /*:string*/ {\n    return r.replace(/\\./, \"!\");\n}\nvar strs = {}; // shared strings\nvar _ssfopts = {}; // spreadsheet formatting options\n/*global Map */ var browser_has_Map = typeof Map !== \"undefined\";\nfunction get_sst_id(sst /*:SST*/ , str /*:string*/ , rev) /*:number*/ {\n    var i = 0, len = sst.length;\n    if (rev) {\n        if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {\n            var revarr = browser_has_Map ? rev.get(str) : rev[str];\n            for(; i < revarr.length; ++i){\n                if (sst[revarr[i]].t === str) {\n                    sst.Count++;\n                    return revarr[i];\n                }\n            }\n        }\n    } else for(; i < len; ++i){\n        if (sst[i].t === str) {\n            sst.Count++;\n            return i;\n        }\n    }\n    sst[len] = {\n        t: str\n    } /*:any*/ ;\n    sst.Count++;\n    sst.Unique++;\n    if (rev) {\n        if (browser_has_Map) {\n            if (!rev.has(str)) rev.set(str, []);\n            rev.get(str).push(len);\n        } else {\n            if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];\n            rev[str].push(len);\n        }\n    }\n    return len;\n}\nfunction col_obj_w(C /*:number*/ , col) {\n    var p = {\n        min: C + 1,\n        max: C + 1\n    } /*:any*/ ;\n    /* wch (chars), wpx (pixels) */ var wch = -1;\n    if (col.MDW) MDW = col.MDW;\n    if (col.width != null) p.customWidth = 1;\n    else if (col.wpx != null) wch = px2char(col.wpx);\n    else if (col.wch != null) wch = col.wch;\n    if (wch > -1) {\n        p.width = char2width(wch);\n        p.customWidth = 1;\n    } else if (col.width != null) p.width = col.width;\n    if (col.hidden) p.hidden = true;\n    if (col.level != null) {\n        p.outlineLevel = p.level = col.level;\n    }\n    return p;\n}\nfunction default_margins(margins /*:Margins*/ , mode /*:?string*/ ) {\n    if (!margins) return;\n    var defs = [\n        0.7,\n        0.7,\n        0.75,\n        0.75,\n        0.3,\n        0.3\n    ];\n    if (mode == \"xlml\") defs = [\n        1,\n        1,\n        1,\n        1,\n        0.5,\n        0.5\n    ];\n    if (margins.left == null) margins.left = defs[0];\n    if (margins.right == null) margins.right = defs[1];\n    if (margins.top == null) margins.top = defs[2];\n    if (margins.bottom == null) margins.bottom = defs[3];\n    if (margins.header == null) margins.header = defs[4];\n    if (margins.footer == null) margins.footer = defs[5];\n}\nfunction get_cell_style(styles /*:Array<any>*/ , cell /*:Cell*/ , opts) {\n    var z = opts.revssf[cell.z != null ? cell.z : \"General\"];\n    var i = 0x3c, len = styles.length;\n    if (z == null && opts.ssf) {\n        for(; i < 0x188; ++i)if (opts.ssf[i] == null) {\n            SSF_load(cell.z, i);\n            // $FlowIgnore\n            opts.ssf[i] = cell.z;\n            opts.revssf[cell.z] = z = i;\n            break;\n        }\n    }\n    for(i = 0; i != len; ++i)if (styles[i].numFmtId === z) return i;\n    styles[len] = {\n        numFmtId: z,\n        fontId: 0,\n        fillId: 0,\n        borderId: 0,\n        xfId: 0,\n        applyNumberFormat: 1\n    };\n    return len;\n}\nfunction safe_format(p /*:Cell*/ , fmtid /*:number*/ , fillid /*:?number*/ , opts, themes, styles) {\n    try {\n        if (opts.cellNF) p.z = table_fmt[fmtid];\n    } catch (e) {\n        if (opts.WTF) throw e;\n    }\n    if (p.t === \"z\" && !opts.cellStyles) return;\n    if (p.t === \"d\" && typeof p.v === \"string\") p.v = parseDate(p.v);\n    if ((!opts || opts.cellText !== false) && p.t !== \"z\") try {\n        if (table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || \"General\", fmtid);\n        if (p.t === \"e\") p.w = p.w || BErr[p.v];\n        else if (fmtid === 0) {\n            if (p.t === \"n\") {\n                if ((p.v | 0) === p.v) p.w = p.v.toString(10);\n                else p.w = SSF_general_num(p.v);\n            } else if (p.t === \"d\") {\n                var dd = datenum(p.v);\n                if ((dd | 0) === dd) p.w = dd.toString(10);\n                else p.w = SSF_general_num(dd);\n            } else if (p.v === undefined) return \"\";\n            else p.w = SSF_general(p.v, _ssfopts);\n        } else if (p.t === \"d\") p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);\n        else p.w = SSF_format(fmtid, p.v, _ssfopts);\n    } catch (e) {\n        if (opts.WTF) throw e;\n    }\n    if (!opts.cellStyles) return;\n    if (fillid != null) try {\n        p.s = styles.Fills[fillid];\n        if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {\n            p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);\n            if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;\n        }\n        if (p.s.bgColor && p.s.bgColor.theme) {\n            p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);\n            if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;\n        }\n    } catch (e) {\n        if (opts.WTF && styles.Fills) throw e;\n    }\n}\nfunction check_ws(ws /*:Worksheet*/ , sname /*:string*/ , i /*:number*/ ) {\n    if (ws && ws[\"!ref\"]) {\n        var range = safe_decode_range(ws[\"!ref\"]);\n        if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error(\"Bad range (\" + i + \"): \" + ws[\"!ref\"]);\n    }\n}\nfunction parse_ws_xml_dim(ws /*:Worksheet*/ , s /*:string*/ ) {\n    var d = safe_decode_range(s);\n    if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws[\"!ref\"] = encode_range(d);\n}\nvar mergecregex = /<(?:\\w:)?mergeCell ref=\"[A-Z0-9:]+\"\\s*[\\/]?>/g;\nvar sheetdataregex = /<(?:\\w+:)?sheetData[^>]*>([\\s\\S]*)<\\/(?:\\w+:)?sheetData>/;\nvar hlinkregex = /<(?:\\w:)?hyperlink [^>]*>/mg;\nvar dimregex = /\"(\\w*:\\w*)\"/;\nvar colregex = /<(?:\\w:)?col\\b[^>]*[\\/]?>/g;\nvar afregex = /<(?:\\w:)?autoFilter[^>]*([\\/]|>([\\s\\S]*)<\\/(?:\\w:)?autoFilter)>/g;\nvar marginregex = /<(?:\\w:)?pageMargins[^>]*\\/>/g;\nvar sheetprregex = /<(?:\\w:)?sheetPr\\b(?:[^>a-z][^>]*)?\\/>/;\nvar sheetprregex2 = /<(?:\\w:)?sheetPr[^>]*(?:[\\/]|>([\\s\\S]*)<\\/(?:\\w:)?sheetPr)>/;\nvar svsregex = /<(?:\\w:)?sheetViews[^>]*(?:[\\/]|>([\\s\\S]*)<\\/(?:\\w:)?sheetViews)>/;\n/* 18.3 Worksheets */ function parse_ws_xml(data /*:?string*/ , opts, idx /*:number*/ , rels, wb /*:WBWBProps*/ , themes, styles) /*:Worksheet*/ {\n    if (!data) return data;\n    if (!rels) rels = {\n        \"!id\": {}\n    };\n    if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n    /* 18.3.1.99 worksheet CT_Worksheet */ var s = opts.dense ? [] : {} /*:any*/ ;\n    var refguess /*:Range*/  = {\n        s: {\n            r: 2000000,\n            c: 2000000\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    } /*:any*/ ;\n    var data1 = \"\", data2 = \"\";\n    var mtch /*:?any*/  = data.match(sheetdataregex);\n    if (mtch) {\n        data1 = data.slice(0, mtch.index);\n        data2 = data.slice(mtch.index + mtch[0].length);\n    } else data1 = data2 = data;\n    /* 18.3.1.82 sheetPr CT_SheetPr */ var sheetPr = data1.match(sheetprregex);\n    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);\n    else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || \"\", s, wb, idx, styles, themes);\n    /* 18.3.1.35 dimension CT_SheetDimension */ var ridx = (data1.match(/<(?:\\w*:)?dimension/) || {\n        index: -1\n    }).index;\n    if (ridx > 0) {\n        var ref = data1.slice(ridx, ridx + 50).match(dimregex);\n        if (ref) parse_ws_xml_dim(s, ref[1]);\n    }\n    /* 18.3.1.88 sheetViews CT_SheetViews */ var svs = data1.match(svsregex);\n    if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);\n    /* 18.3.1.17 cols CT_Cols */ var columns /*:Array<ColInfo>*/  = [];\n    if (opts.cellStyles) {\n        /* 18.3.1.13 col CT_Col */ var cols = data1.match(colregex);\n        if (cols) parse_ws_xml_cols(columns, cols);\n    }\n    /* 18.3.1.80 sheetData CT_SheetData ? */ if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);\n    /* 18.3.1.2  autoFilter CT_AutoFilter */ var afilter = data2.match(afregex);\n    if (afilter) s[\"!autofilter\"] = parse_ws_xml_autofilter(afilter[0]);\n    /* 18.3.1.55 mergeCells CT_MergeCells */ var merges /*:Array<Range>*/  = [];\n    var _merge = data2.match(mergecregex);\n    if (_merge) for(ridx = 0; ridx != _merge.length; ++ridx)merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('\"') + 1));\n    /* 18.3.1.48 hyperlinks CT_Hyperlinks */ var hlink = data2.match(hlinkregex);\n    if (hlink) parse_ws_xml_hlinks(s, hlink, rels);\n    /* 18.3.1.62 pageMargins CT_PageMargins */ var margins = data2.match(marginregex);\n    if (margins) s[\"!margins\"] = parse_ws_xml_margins(parsexmltag(margins[0]));\n    if (!s[\"!ref\"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s[\"!ref\"] = encode_range(refguess);\n    if (opts.sheetRows > 0 && s[\"!ref\"]) {\n        var tmpref = safe_decode_range(s[\"!ref\"]);\n        if (opts.sheetRows <= +tmpref.e.r) {\n            tmpref.e.r = opts.sheetRows - 1;\n            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n            s[\"!fullref\"] = s[\"!ref\"];\n            s[\"!ref\"] = encode_range(tmpref);\n        }\n    }\n    if (columns.length > 0) s[\"!cols\"] = columns;\n    if (merges.length > 0) s[\"!merges\"] = merges;\n    return s;\n}\nfunction write_ws_xml_merges(merges /*:Array<Range>*/ ) /*:string*/ {\n    if (merges.length === 0) return \"\";\n    var o = '<mergeCells count=\"' + merges.length + '\">';\n    for(var i = 0; i != merges.length; ++i)o += '<mergeCell ref=\"' + encode_range(merges[i]) + '\"/>';\n    return o + \"</mergeCells>\";\n}\n/* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */ function parse_ws_xml_sheetpr(sheetPr /*:string*/ , s, wb /*:WBWBProps*/ , idx /*:number*/ ) {\n    var data = parsexmltag(sheetPr);\n    if (!wb.Sheets[idx]) wb.Sheets[idx] = {};\n    if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));\n}\nfunction parse_ws_xml_sheetpr2(sheetPr /*:string*/ , body /*:string*/ , s, wb /*:WBWBProps*/ , idx /*:number*/ ) {\n    parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(\">\")), s, wb, idx);\n}\nfunction write_ws_xml_sheetpr(ws, wb, idx, opts, o) {\n    var needed = false;\n    var props = {}, payload = null;\n    if (opts.bookType !== \"xlsx\" && wb.vbaraw) {\n        var cname = wb.SheetNames[idx];\n        try {\n            if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;\n        } catch (e) {}\n        needed = true;\n        props.codeName = utf8write(escapexml(cname));\n    }\n    if (ws && ws[\"!outline\"]) {\n        var outlineprops = {\n            summaryBelow: 1,\n            summaryRight: 1\n        };\n        if (ws[\"!outline\"].above) outlineprops.summaryBelow = 0;\n        if (ws[\"!outline\"].left) outlineprops.summaryRight = 0;\n        payload = (payload || \"\") + writextag(\"outlinePr\", null, outlineprops);\n    }\n    if (!needed && !payload) return;\n    o[o.length] = writextag(\"sheetPr\", payload, props);\n}\n/* 18.3.1.85 sheetProtection CT_SheetProtection */ var sheetprot_deffalse = [\n    \"objects\",\n    \"scenarios\",\n    \"selectLockedCells\",\n    \"selectUnlockedCells\"\n];\nvar sheetprot_deftrue = [\n    \"formatColumns\",\n    \"formatRows\",\n    \"formatCells\",\n    \"insertColumns\",\n    \"insertRows\",\n    \"insertHyperlinks\",\n    \"deleteColumns\",\n    \"deleteRows\",\n    \"sort\",\n    \"autoFilter\",\n    \"pivotTables\"\n];\nfunction write_ws_xml_protection(sp) /*:string*/ {\n    // algorithmName, hashValue, saltValue, spinCount\n    var o = {\n        sheet: 1\n    } /*:any*/ ;\n    sheetprot_deffalse.forEach(function(n) {\n        if (sp[n] != null && sp[n]) o[n] = \"1\";\n    });\n    sheetprot_deftrue.forEach(function(n) {\n        if (sp[n] != null && !sp[n]) o[n] = \"0\";\n    });\n    /* TODO: algorithm */ if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();\n    return writextag(\"sheetProtection\", null, o);\n}\nfunction parse_ws_xml_hlinks(s, data /*:Array<string>*/ , rels) {\n    var dense = Array.isArray(s);\n    for(var i = 0; i != data.length; ++i){\n        var val = parsexmltag(utf8read(data[i]), true);\n        if (!val.ref) return;\n        var rel = ((rels || {})[\"!id\"] || [])[val.id];\n        if (rel) {\n            val.Target = rel.Target;\n            if (val.location) val.Target += \"#\" + unescapexml(val.location);\n        } else {\n            val.Target = \"#\" + unescapexml(val.location);\n            rel = {\n                Target: val.Target,\n                TargetMode: \"Internal\"\n            };\n        }\n        val.Rel = rel;\n        if (val.tooltip) {\n            val.Tooltip = val.tooltip;\n            delete val.tooltip;\n        }\n        var rng = safe_decode_range(val.ref);\n        for(var R = rng.s.r; R <= rng.e.r; ++R)for(var C = rng.s.c; C <= rng.e.c; ++C){\n            var addr = encode_cell({\n                c: C,\n                r: R\n            });\n            if (dense) {\n                if (!s[R]) s[R] = [];\n                if (!s[R][C]) s[R][C] = {\n                    t: \"z\",\n                    v: undefined\n                };\n                s[R][C].l = val;\n            } else {\n                if (!s[addr]) s[addr] = {\n                    t: \"z\",\n                    v: undefined\n                };\n                s[addr].l = val;\n            }\n        }\n    }\n}\nfunction parse_ws_xml_margins(margin) {\n    var o = {};\n    [\n        \"left\",\n        \"right\",\n        \"top\",\n        \"bottom\",\n        \"header\",\n        \"footer\"\n    ].forEach(function(k) {\n        if (margin[k]) o[k] = parseFloat(margin[k]);\n    });\n    return o;\n}\nfunction write_ws_xml_margins(margin) /*:string*/ {\n    default_margins(margin);\n    return writextag(\"pageMargins\", null, margin);\n}\nfunction parse_ws_xml_cols(columns, cols) {\n    var seencol = false;\n    for(var coli = 0; coli != cols.length; ++coli){\n        var coll = parsexmltag(cols[coli], true);\n        if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);\n        var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;\n        if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;\n        delete coll.min;\n        delete coll.max;\n        coll.width = +coll.width;\n        if (!seencol && coll.width) {\n            seencol = true;\n            find_mdw_colw(coll.width);\n        }\n        process_col(coll);\n        while(colm <= colM)columns[colm++] = dup(coll);\n    }\n}\nfunction write_ws_xml_cols(ws, cols) /*:string*/ {\n    var o = [\n        \"<cols>\"\n    ], col;\n    for(var i = 0; i != cols.length; ++i){\n        if (!(col = cols[i])) continue;\n        o[o.length] = writextag(\"col\", null, col_obj_w(i, col));\n    }\n    o[o.length] = \"</cols>\";\n    return o.join(\"\");\n}\nfunction parse_ws_xml_autofilter(data /*:string*/ ) {\n    var o = {\n        ref: (data.match(/ref=\"([^\"]*)\"/) || [])[1]\n    };\n    return o;\n}\nfunction write_ws_xml_autofilter(data, ws, wb, idx) /*:string*/ {\n    var ref = typeof data.ref == \"string\" ? data.ref : encode_range(data.ref);\n    if (!wb.Workbook) wb.Workbook = {\n        Sheets: []\n    } /*:any*/ ;\n    if (!wb.Workbook.Names) wb.Workbook.Names = [];\n    var names /*: Array<any> */  = wb.Workbook.Names;\n    var range = decode_range(ref);\n    if (range.s.r == range.e.r) {\n        range.e.r = decode_range(ws[\"!ref\"]).e.r;\n        ref = encode_range(range);\n    }\n    for(var i = 0; i < names.length; ++i){\n        var name = names[i];\n        if (name.Name != \"_xlnm._FilterDatabase\") continue;\n        if (name.Sheet != idx) continue;\n        name.Ref = \"'\" + wb.SheetNames[idx] + \"'!\" + ref;\n        break;\n    }\n    if (i == names.length) names.push({\n        Name: \"_xlnm._FilterDatabase\",\n        Sheet: idx,\n        Ref: \"'\" + wb.SheetNames[idx] + \"'!\" + ref\n    });\n    return writextag(\"autoFilter\", null, {\n        ref: ref\n    });\n}\n/* 18.3.1.88 sheetViews CT_SheetViews */ /* 18.3.1.87 sheetView CT_SheetView */ var sviewregex = /<(?:\\w:)?sheetView(?:[^>a-z][^>]*)?\\/?>/;\nfunction parse_ws_xml_sheetviews(data, wb /*:WBWBProps*/ ) {\n    if (!wb.Views) wb.Views = [\n        {}\n    ];\n    (data.match(sviewregex) || []).forEach(function(r /*:string*/ , i /*:number*/ ) {\n        var tag = parsexmltag(r);\n        // $FlowIgnore\n        if (!wb.Views[i]) wb.Views[i] = {};\n        // $FlowIgnore\n        if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;\n        // $FlowIgnore\n        if (parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;\n    });\n}\nfunction write_ws_xml_sheetviews(ws, opts, idx, wb) /*:string*/ {\n    var sview = {\n        workbookViewId: \"0\"\n    } /*:any*/ ;\n    // $FlowIgnore\n    if ((((wb || {}).Workbook || {}).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? \"1\" : \"0\";\n    return writextag(\"sheetViews\", writextag(\"sheetView\", null, sview), {});\n}\nfunction write_ws_xml_cell(cell /*:Cell*/ , ref, ws, opts /*::, idx, wb*/ ) /*:string*/ {\n    if (cell.c) ws[\"!comments\"].push([\n        ref,\n        cell.c\n    ]);\n    if (cell.v === undefined && typeof cell.f !== \"string\" || cell.t === \"z\" && !cell.f) return \"\";\n    var vv = \"\";\n    var oldt = cell.t, oldv = cell.v;\n    if (cell.t !== \"z\") switch(cell.t){\n        case \"b\":\n            vv = cell.v ? \"1\" : \"0\";\n            break;\n        case \"n\":\n            vv = \"\" + cell.v;\n            break;\n        case \"e\":\n            vv = BErr[cell.v];\n            break;\n        case \"d\":\n            if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();\n            else {\n                cell = dup(cell);\n                cell.t = \"n\";\n                vv = \"\" + (cell.v = datenum(parseDate(cell.v)));\n            }\n            if (typeof cell.z === \"undefined\") cell.z = table_fmt[14];\n            break;\n        default:\n            vv = cell.v;\n            break;\n    }\n    var v = writetag(\"v\", escapexml(vv)), o = {\n        r: ref\n    } /*:any*/ ;\n    /* TODO: cell style */ var os = get_cell_style(opts.cellXfs, cell, opts);\n    if (os !== 0) o.s = os;\n    switch(cell.t){\n        case \"n\":\n            break;\n        case \"d\":\n            o.t = \"d\";\n            break;\n        case \"b\":\n            o.t = \"b\";\n            break;\n        case \"e\":\n            o.t = \"e\";\n            break;\n        case \"z\":\n            break;\n        default:\n            if (cell.v == null) {\n                delete cell.t;\n                break;\n            }\n            if (cell.v.length > 32767) throw new Error(\"Text length must not exceed 32767 characters\");\n            if (opts && opts.bookSST) {\n                v = writetag(\"v\", \"\" + get_sst_id(opts.Strings, cell.v, opts.revStrings));\n                o.t = \"s\";\n                break;\n            }\n            o.t = \"str\";\n            break;\n    }\n    if (cell.t != oldt) {\n        cell.t = oldt;\n        cell.v = oldv;\n    }\n    if (typeof cell.f == \"string\" && cell.f) {\n        var ff = cell.F && cell.F.slice(0, ref.length) == ref ? {\n            t: \"array\",\n            ref: cell.F\n        } : null;\n        v = writextag(\"f\", escapexml(cell.f), ff) + (cell.v != null ? v : \"\");\n    }\n    if (cell.l) ws[\"!links\"].push([\n        ref,\n        cell.l\n    ]);\n    if (cell.D) o.cm = 1;\n    return writextag(\"c\", v, o);\n}\nvar parse_ws_xml_data = /*#__PURE__*/ function() {\n    var cellregex = /<(?:\\w+:)?c[ \\/>]/, rowregex = /<\\/(?:\\w+:)?row>/;\n    var rregex = /r=[\"']([^\"']*)[\"']/, isregex = /<(?:\\w+:)?is>([\\S\\s]*?)<\\/(?:\\w+:)?is>/;\n    var refregex = /ref=[\"']([^\"']*)[\"']/;\n    var match_v = matchtag(\"v\"), match_f = matchtag(\"f\");\n    return function parse_ws_xml_data(sdata /*:string*/ , s, opts, guess /*:Range*/ , themes, styles) {\n        var ri = 0, x = \"\", cells /*:Array<string>*/  = [], cref /*:?Array<string>*/  = [], idx = 0, i = 0, cc = 0, d = \"\", p /*:any*/ ;\n        var tag, tagr = 0, tagc = 0;\n        var sstr, ftag;\n        var fmtid = 0, fillid = 0;\n        var do_format = Array.isArray(styles.CellXf), cf;\n        var arrayf /*:Array<[Range, string]>*/  = [];\n        var sharedf = [];\n        var dense = Array.isArray(s);\n        var rows /*:Array<RowInfo>*/  = [], rowobj = {}, rowrite = false;\n        var sheetStubs = !!opts.sheetStubs;\n        for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt){\n            x = marr[mt].trim();\n            var xlen = x.length;\n            if (xlen === 0) continue;\n            /* 18.3.1.73 row CT_Row */ var rstarti = 0;\n            outa: for(ri = 0; ri < xlen; ++ri)switch(/*x.charCodeAt(ri)*/ x[ri]){\n                case \">\" /*62*/ :\n                    if (/*x.charCodeAt(ri-1) != 47*/ x[ri - 1] != \"/\") {\n                        ++ri;\n                        break outa;\n                    }\n                    if (opts && opts.cellStyles) {\n                        // TODO: avoid duplication\n                        tag = parsexmltag(x.slice(rstarti, ri), true);\n                        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;\n                        tagc = -1;\n                        if (opts.sheetRows && opts.sheetRows < tagr) continue;\n                        rowobj = {};\n                        rowrite = false;\n                        if (tag.ht) {\n                            rowrite = true;\n                            rowobj.hpt = parseFloat(tag.ht);\n                            rowobj.hpx = pt2px(rowobj.hpt);\n                        }\n                        if (tag.hidden == \"1\") {\n                            rowrite = true;\n                            rowobj.hidden = true;\n                        }\n                        if (tag.outlineLevel != null) {\n                            rowrite = true;\n                            rowobj.level = +tag.outlineLevel;\n                        }\n                        if (rowrite) rows[tagr - 1] = rowobj;\n                    }\n                    break;\n                case \"<\" /*60*/ :\n                    rstarti = ri;\n                    break;\n            }\n            if (rstarti >= ri) break;\n            tag = parsexmltag(x.slice(rstarti, ri), true);\n            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;\n            tagc = -1;\n            if (opts.sheetRows && opts.sheetRows < tagr) continue;\n            if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;\n            if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;\n            if (opts && opts.cellStyles) {\n                rowobj = {};\n                rowrite = false;\n                if (tag.ht) {\n                    rowrite = true;\n                    rowobj.hpt = parseFloat(tag.ht);\n                    rowobj.hpx = pt2px(rowobj.hpt);\n                }\n                if (tag.hidden == \"1\") {\n                    rowrite = true;\n                    rowobj.hidden = true;\n                }\n                if (tag.outlineLevel != null) {\n                    rowrite = true;\n                    rowobj.level = +tag.outlineLevel;\n                }\n                if (rowrite) rows[tagr - 1] = rowobj;\n            }\n            /* 18.3.1.4 c CT_Cell */ cells = x.slice(ri).split(cellregex);\n            for(var rslice = 0; rslice != cells.length; ++rslice)if (cells[rslice].trim().charAt(0) != \"<\") break;\n            cells = cells.slice(rslice);\n            for(ri = 0; ri != cells.length; ++ri){\n                x = cells[ri].trim();\n                if (x.length === 0) continue;\n                cref = x.match(rregex);\n                idx = ri;\n                i = 0;\n                cc = 0;\n                x = \"<c \" + (x.slice(0, 1) == \"<\" ? \">\" : \"\") + x;\n                if (cref != null && cref.length === 2) {\n                    idx = 0;\n                    d = cref[1];\n                    for(i = 0; i != d.length; ++i){\n                        if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;\n                        idx = 26 * idx + cc;\n                    }\n                    --idx;\n                    tagc = idx;\n                } else ++tagc;\n                for(i = 0; i != x.length; ++i)if (x.charCodeAt(i) === 62) break;\n                ++i;\n                tag = parsexmltag(x.slice(0, i), true);\n                if (!tag.r) tag.r = encode_cell({\n                    r: tagr - 1,\n                    c: tagc\n                });\n                d = x.slice(i);\n                p = {\n                    t: \"\"\n                } /*:any*/ ;\n                if ((cref = d.match(match_v)) != null && /*::cref != null && */ cref[1] !== \"\") p.v = unescapexml(cref[1]);\n                if (opts.cellFormula) {\n                    if ((cref = d.match(match_f)) != null && /*::cref != null && */ cref[1] !== \"\") {\n                        /* TODO: match against XLSXFutureFunctions */ p.f = unescapexml(utf8read(cref[1])).replace(/\\r\\n/g, \"\\n\");\n                        if (!opts.xlfn) p.f = _xlfn(p.f);\n                        if (/*::cref != null && cref[0] != null && */ cref[0].indexOf('t=\"array\"') > -1) {\n                            p.F = (d.match(refregex) || [])[1];\n                            if (p.F.indexOf(\":\") > -1) arrayf.push([\n                                safe_decode_range(p.F),\n                                p.F\n                            ]);\n                        } else if (/*::cref != null && cref[0] != null && */ cref[0].indexOf('t=\"shared\"') > -1) {\n                            // TODO: parse formula\n                            ftag = parsexmltag(cref[0]);\n                            var ___f = unescapexml(utf8read(cref[1]));\n                            if (!opts.xlfn) ___f = _xlfn(___f);\n                            sharedf[parseInt(ftag.si, 10)] = [\n                                ftag,\n                                ___f,\n                                tag.r\n                            ];\n                        }\n                    } else if (cref = d.match(/<f[^>]*\\/>/)) {\n                        ftag = parsexmltag(cref[0]);\n                        if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);\n                    }\n                    /* TODO: factor out contains logic */ var _tag = decode_cell(tag.r);\n                    for(i = 0; i < arrayf.length; ++i)if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) {\n                        if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1];\n                    }\n                }\n                if (tag.t == null && p.v === undefined) {\n                    if (p.f || p.F) {\n                        p.v = 0;\n                        p.t = \"n\";\n                    } else if (!sheetStubs) continue;\n                    else p.t = \"z\";\n                } else p.t = tag.t || \"n\";\n                if (guess.s.c > tagc) guess.s.c = tagc;\n                if (guess.e.c < tagc) guess.e.c = tagc;\n                /* 18.18.11 t ST_CellType */ switch(p.t){\n                    case \"n\":\n                        if (p.v == \"\" || p.v == null) {\n                            if (!sheetStubs) continue;\n                            p.t = \"z\";\n                        } else p.v = parseFloat(p.v);\n                        break;\n                    case \"s\":\n                        if (typeof p.v == \"undefined\") {\n                            if (!sheetStubs) continue;\n                            p.t = \"z\";\n                        } else {\n                            sstr = strs[parseInt(p.v, 10)];\n                            p.v = sstr.t;\n                            p.r = sstr.r;\n                            if (opts.cellHTML) p.h = sstr.h;\n                        }\n                        break;\n                    case \"str\":\n                        p.t = \"s\";\n                        p.v = p.v != null ? utf8read(p.v) : \"\";\n                        if (opts.cellHTML) p.h = escapehtml(p.v);\n                        break;\n                    case \"inlineStr\":\n                        cref = d.match(isregex);\n                        p.t = \"s\";\n                        if (cref != null && (sstr = parse_si(cref[1]))) {\n                            p.v = sstr.t;\n                            if (opts.cellHTML) p.h = sstr.h;\n                        } else p.v = \"\";\n                        break;\n                    case \"b\":\n                        p.v = parsexmlbool(p.v);\n                        break;\n                    case \"d\":\n                        if (opts.cellDates) p.v = parseDate(p.v, 1);\n                        else {\n                            p.v = datenum(parseDate(p.v, 1));\n                            p.t = \"n\";\n                        }\n                        break;\n                    /* error string in .w, number in .v */ case \"e\":\n                        if (!opts || opts.cellText !== false) p.w = p.v;\n                        p.v = RBErr[p.v];\n                        break;\n                }\n                /* formatting */ fmtid = fillid = 0;\n                cf = null;\n                if (do_format && tag.s !== undefined) {\n                    cf = styles.CellXf[tag.s];\n                    if (cf != null) {\n                        if (cf.numFmtId != null) fmtid = cf.numFmtId;\n                        if (opts.cellStyles) {\n                            if (cf.fillId != null) fillid = cf.fillId;\n                        }\n                    }\n                }\n                safe_format(p, fmtid, fillid, opts, themes, styles);\n                if (opts.cellDates && do_format && p.t == \"n\" && fmt_is_date(table_fmt[fmtid])) {\n                    p.t = \"d\";\n                    p.v = numdate(p.v);\n                }\n                if (tag.cm && opts.xlmeta) {\n                    var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];\n                    if (cm && cm.type == \"XLDAPR\") p.D = true;\n                }\n                if (dense) {\n                    var _r = decode_cell(tag.r);\n                    if (!s[_r.r]) s[_r.r] = [];\n                    s[_r.r][_r.c] = p;\n                } else s[tag.r] = p;\n            }\n        }\n        if (rows.length > 0) s[\"!rows\"] = rows;\n    };\n}();\nfunction write_ws_xml_data(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/  /*::, rels*/ ) /*:string*/ {\n    var o /*:Array<string>*/  = [], r /*:Array<string>*/  = [], range = safe_decode_range(ws[\"!ref\"]), cell = \"\", ref, rr = \"\", cols /*:Array<string>*/  = [], R = 0, C = 0, rows = ws[\"!rows\"];\n    var dense = Array.isArray(ws);\n    var params = {\n        r: rr\n    } /*:any*/ , row /*:RowInfo*/ , height = -1;\n    for(C = range.s.c; C <= range.e.c; ++C)cols[C] = encode_col(C);\n    for(R = range.s.r; R <= range.e.r; ++R){\n        r = [];\n        rr = encode_row(R);\n        for(C = range.s.c; C <= range.e.c; ++C){\n            ref = cols[C] + rr;\n            var _cell = dense ? (ws[R] || [])[C] : ws[ref];\n            if (_cell === undefined) continue;\n            if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);\n        }\n        if (r.length > 0 || rows && rows[R]) {\n            params = {\n                r: rr\n            } /*:any*/ ;\n            if (rows && rows[R]) {\n                row = rows[R];\n                if (row.hidden) params.hidden = 1;\n                height = -1;\n                if (row.hpx) height = px2pt(row.hpx);\n                else if (row.hpt) height = row.hpt;\n                if (height > -1) {\n                    params.ht = height;\n                    params.customHeight = 1;\n                }\n                if (row.level) {\n                    params.outlineLevel = row.level;\n                }\n            }\n            o[o.length] = writextag(\"row\", r.join(\"\"), params);\n        }\n    }\n    if (rows) for(; R < rows.length; ++R){\n        if (rows && rows[R]) {\n            params = {\n                r: R + 1\n            } /*:any*/ ;\n            row = rows[R];\n            if (row.hidden) params.hidden = 1;\n            height = -1;\n            if (row.hpx) height = px2pt(row.hpx);\n            else if (row.hpt) height = row.hpt;\n            if (height > -1) {\n                params.ht = height;\n                params.customHeight = 1;\n            }\n            if (row.level) {\n                params.outlineLevel = row.level;\n            }\n            o[o.length] = writextag(\"row\", \"\", params);\n        }\n    }\n    return o.join(\"\");\n}\nfunction write_ws_xml(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) /*:string*/ {\n    var o = [\n        XML_HEADER,\n        writextag(\"worksheet\", null, {\n            \"xmlns\": XMLNS_main[0],\n            \"xmlns:r\": XMLNS.r\n        })\n    ];\n    var s = wb.SheetNames[idx], sidx = 0, rdata = \"\";\n    var ws = wb.Sheets[s];\n    if (ws == null) ws = {};\n    var ref = ws[\"!ref\"] || \"A1\";\n    var range = safe_decode_range(ref);\n    if (range.e.c > 0x3FFF || range.e.r > 0xFFFFF) {\n        if (opts.WTF) throw new Error(\"Range \" + ref + \" exceeds format limit A1:XFD1048576\");\n        range.e.c = Math.min(range.e.c, 0x3FFF);\n        range.e.r = Math.min(range.e.c, 0xFFFFF);\n        ref = encode_range(range);\n    }\n    if (!rels) rels = {};\n    ws[\"!comments\"] = [];\n    var _drawing = [];\n    write_ws_xml_sheetpr(ws, wb, idx, opts, o);\n    o[o.length] = writextag(\"dimension\", null, {\n        \"ref\": ref\n    });\n    o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);\n    /* TODO: store in WB, process styles */ if (opts.sheetFormat) o[o.length] = writextag(\"sheetFormatPr\", null, {\n        defaultRowHeight: opts.sheetFormat.defaultRowHeight || \"16\",\n        baseColWidth: opts.sheetFormat.baseColWidth || \"10\",\n        outlineLevelRow: opts.sheetFormat.outlineLevelRow || \"7\"\n    });\n    if (ws[\"!cols\"] != null && ws[\"!cols\"].length > 0) o[o.length] = write_ws_xml_cols(ws, ws[\"!cols\"]);\n    o[sidx = o.length] = \"<sheetData/>\";\n    ws[\"!links\"] = [];\n    if (ws[\"!ref\"] != null) {\n        rdata = write_ws_xml_data(ws, opts, idx, wb, rels);\n        if (rdata.length > 0) o[o.length] = rdata;\n    }\n    if (o.length > sidx + 1) {\n        o[o.length] = \"</sheetData>\";\n        o[sidx] = o[sidx].replace(\"/>\", \">\");\n    }\n    /* sheetCalcPr */ if (ws[\"!protect\"]) o[o.length] = write_ws_xml_protection(ws[\"!protect\"]);\n    /* protectedRanges */ /* scenarios */ if (ws[\"!autofilter\"] != null) o[o.length] = write_ws_xml_autofilter(ws[\"!autofilter\"], ws, wb, idx);\n    /* sortState */ /* dataConsolidate */ /* customSheetViews */ if (ws[\"!merges\"] != null && ws[\"!merges\"].length > 0) o[o.length] = write_ws_xml_merges(ws[\"!merges\"]);\n    /* phoneticPr */ /* conditionalFormatting */ /* dataValidations */ var relc = -1, rel, rId = -1;\n    if (/*::(*/ ws[\"!links\"]/*::||[])*/ .length > 0) {\n        o[o.length] = \"<hyperlinks>\";\n        /*::(*/ ws[\"!links\"]/*::||[])*/ .forEach(function(l) {\n            if (!l[1].Target) return;\n            rel = {\n                \"ref\": l[0]\n            } /*:any*/ ;\n            if (l[1].Target.charAt(0) != \"#\") {\n                rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, \"\"), RELS.HLINK);\n                rel[\"r:id\"] = \"rId\" + rId;\n            }\n            if ((relc = l[1].Target.indexOf(\"#\")) > -1) rel.location = escapexml(l[1].Target.slice(relc + 1));\n            if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);\n            o[o.length] = writextag(\"hyperlink\", null, rel);\n        });\n        o[o.length] = \"</hyperlinks>\";\n    }\n    delete ws[\"!links\"];\n    /* printOptions */ if (ws[\"!margins\"] != null) o[o.length] = write_ws_xml_margins(ws[\"!margins\"]);\n    /* pageSetup */ /* headerFooter */ /* rowBreaks */ /* colBreaks */ /* customProperties */ /* cellWatches */ if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o[o.length] = writetag(\"ignoredErrors\", writextag(\"ignoredError\", null, {\n        numberStoredAsText: 1,\n        sqref: ref\n    }));\n    /* smartTags */ if (_drawing.length > 0) {\n        rId = add_rels(rels, -1, \"../drawings/drawing\" + (idx + 1) + \".xml\", RELS.DRAW);\n        o[o.length] = writextag(\"drawing\", null, {\n            \"r:id\": \"rId\" + rId\n        });\n        ws[\"!drawing\"] = _drawing;\n    }\n    if (ws[\"!comments\"].length > 0) {\n        rId = add_rels(rels, -1, \"../drawings/vmlDrawing\" + (idx + 1) + \".vml\", RELS.VML);\n        o[o.length] = writextag(\"legacyDrawing\", null, {\n            \"r:id\": \"rId\" + rId\n        });\n        ws[\"!legacy\"] = rId;\n    }\n    /* legacyDrawingHF */ /* picture */ /* oleObjects */ /* controls */ /* webPublishItems */ /* tableParts */ /* extLst */ if (o.length > 1) {\n        o[o.length] = \"</worksheet>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.726 BrtRowHdr */ function parse_BrtRowHdr(data, length) {\n    var z = {} /*:any*/ ;\n    var tgt = data.l + length;\n    z.r = data.read_shift(4);\n    data.l += 4; // TODO: ixfe\n    var miyRw = data.read_shift(2);\n    data.l += 1; // TODO: top/bot padding\n    var flags = data.read_shift(1);\n    data.l = tgt;\n    if (flags & 0x07) z.level = flags & 0x07;\n    if (flags & 0x10) z.hidden = true;\n    if (flags & 0x20) z.hpt = miyRw / 20;\n    return z;\n}\nfunction write_BrtRowHdr(R /*:number*/ , range, ws) {\n    var o = new_buf(17 + 8 * 16);\n    var row = (ws[\"!rows\"] || [])[R] || {};\n    o.write_shift(4, R);\n    o.write_shift(4, 0); /* TODO: ixfe */ \n    var miyRw = 0x0140;\n    if (row.hpx) miyRw = px2pt(row.hpx) * 20;\n    else if (row.hpt) miyRw = row.hpt * 20;\n    o.write_shift(2, miyRw);\n    o.write_shift(1, 0); /* top/bot padding */ \n    var flags = 0x0;\n    if (row.level) flags |= row.level;\n    if (row.hidden) flags |= 0x10;\n    if (row.hpx || row.hpt) flags |= 0x20;\n    o.write_shift(1, flags);\n    o.write_shift(1, 0); /* phonetic guide */ \n    /* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */ var ncolspan = 0, lcs = o.l;\n    o.l += 4;\n    var caddr = {\n        r: R,\n        c: 0\n    };\n    for(var i = 0; i < 16; ++i){\n        if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue;\n        var first = -1, last = -1;\n        for(var j = i << 10; j < i + 1 << 10; ++j){\n            caddr.c = j;\n            var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];\n            if (cell) {\n                if (first < 0) first = j;\n                last = j;\n            }\n        }\n        if (first < 0) continue;\n        ++ncolspan;\n        o.write_shift(4, first);\n        o.write_shift(4, last);\n    }\n    var l = o.l;\n    o.l = lcs;\n    o.write_shift(4, ncolspan);\n    o.l = l;\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\nfunction write_row_header(ba, ws, range, R) {\n    var o = write_BrtRowHdr(R, range, ws);\n    if (o.length > 17 || (ws[\"!rows\"] || [])[R]) write_record(ba, 0x0000 /* BrtRowHdr */ , o);\n}\n/* [MS-XLSB] 2.4.820 BrtWsDim */ var parse_BrtWsDim = parse_UncheckedRfX;\nvar write_BrtWsDim = write_UncheckedRfX;\n/* [MS-XLSB] 2.4.821 BrtWsFmtInfo */ function parse_BrtWsFmtInfo() {}\n//function write_BrtWsFmtInfo(ws, o) { }\n/* [MS-XLSB] 2.4.823 BrtWsProp */ function parse_BrtWsProp(data, length) {\n    var z = {};\n    var f = data[data.l];\n    ++data.l;\n    z.above = !(f & 0x40);\n    z.left = !(f & 0x80);\n    /* TODO: pull flags */ data.l += 18;\n    z.name = parse_XLSBCodeName(data, length - 19);\n    return z;\n}\nfunction write_BrtWsProp(str, outl, o) {\n    if (o == null) o = new_buf(84 + 4 * str.length);\n    var f = 0xC0;\n    if (outl) {\n        if (outl.above) f &= ~0x40;\n        if (outl.left) f &= ~0x80;\n    }\n    o.write_shift(1, f);\n    for(var i = 1; i < 3; ++i)o.write_shift(1, 0);\n    write_BrtColor({\n        auto: 1\n    }, o);\n    o.write_shift(-4, -1);\n    o.write_shift(-4, -1);\n    write_XLSBCodeName(str, o);\n    return o.slice(0, o.l);\n}\n/* [MS-XLSB] 2.4.306 BrtCellBlank */ function parse_BrtCellBlank(data) {\n    var cell = parse_XLSBCell(data);\n    return [\n        cell\n    ];\n}\nfunction write_BrtCellBlank(cell, ncell, o) {\n    if (o == null) o = new_buf(8);\n    return write_XLSBCell(ncell, o);\n}\nfunction parse_BrtShortBlank(data) {\n    var cell = parse_XLSBShortCell(data);\n    return [\n        cell\n    ];\n}\nfunction write_BrtShortBlank(cell, ncell, o) {\n    if (o == null) o = new_buf(4);\n    return write_XLSBShortCell(ncell, o);\n}\n/* [MS-XLSB] 2.4.307 BrtCellBool */ function parse_BrtCellBool(data) {\n    var cell = parse_XLSBCell(data);\n    var fBool = data.read_shift(1);\n    return [\n        cell,\n        fBool,\n        \"b\"\n    ];\n}\nfunction write_BrtCellBool(cell, ncell, o) {\n    if (o == null) o = new_buf(9);\n    write_XLSBCell(ncell, o);\n    o.write_shift(1, cell.v ? 1 : 0);\n    return o;\n}\nfunction parse_BrtShortBool(data) {\n    var cell = parse_XLSBShortCell(data);\n    var fBool = data.read_shift(1);\n    return [\n        cell,\n        fBool,\n        \"b\"\n    ];\n}\nfunction write_BrtShortBool(cell, ncell, o) {\n    if (o == null) o = new_buf(5);\n    write_XLSBShortCell(ncell, o);\n    o.write_shift(1, cell.v ? 1 : 0);\n    return o;\n}\n/* [MS-XLSB] 2.4.308 BrtCellError */ function parse_BrtCellError(data) {\n    var cell = parse_XLSBCell(data);\n    var bError = data.read_shift(1);\n    return [\n        cell,\n        bError,\n        \"e\"\n    ];\n}\nfunction write_BrtCellError(cell, ncell, o) {\n    if (o == null) o = new_buf(9);\n    write_XLSBCell(ncell, o);\n    o.write_shift(1, cell.v);\n    return o;\n}\nfunction parse_BrtShortError(data) {\n    var cell = parse_XLSBShortCell(data);\n    var bError = data.read_shift(1);\n    return [\n        cell,\n        bError,\n        \"e\"\n    ];\n}\nfunction write_BrtShortError(cell, ncell, o) {\n    if (o == null) o = new_buf(8);\n    write_XLSBShortCell(ncell, o);\n    o.write_shift(1, cell.v);\n    o.write_shift(2, 0);\n    o.write_shift(1, 0);\n    return o;\n}\n/* [MS-XLSB] 2.4.311 BrtCellIsst */ function parse_BrtCellIsst(data) {\n    var cell = parse_XLSBCell(data);\n    var isst = data.read_shift(4);\n    return [\n        cell,\n        isst,\n        \"s\"\n    ];\n}\nfunction write_BrtCellIsst(cell, ncell, o) {\n    if (o == null) o = new_buf(12);\n    write_XLSBCell(ncell, o);\n    o.write_shift(4, ncell.v);\n    return o;\n}\nfunction parse_BrtShortIsst(data) {\n    var cell = parse_XLSBShortCell(data);\n    var isst = data.read_shift(4);\n    return [\n        cell,\n        isst,\n        \"s\"\n    ];\n}\nfunction write_BrtShortIsst(cell, ncell, o) {\n    if (o == null) o = new_buf(8);\n    write_XLSBShortCell(ncell, o);\n    o.write_shift(4, ncell.v);\n    return o;\n}\n/* [MS-XLSB] 2.4.313 BrtCellReal */ function parse_BrtCellReal(data) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_Xnum(data);\n    return [\n        cell,\n        value,\n        \"n\"\n    ];\n}\nfunction write_BrtCellReal(cell, ncell, o) {\n    if (o == null) o = new_buf(16);\n    write_XLSBCell(ncell, o);\n    write_Xnum(cell.v, o);\n    return o;\n}\nfunction parse_BrtShortReal(data) {\n    var cell = parse_XLSBShortCell(data);\n    var value = parse_Xnum(data);\n    return [\n        cell,\n        value,\n        \"n\"\n    ];\n}\nfunction write_BrtShortReal(cell, ncell, o) {\n    if (o == null) o = new_buf(12);\n    write_XLSBShortCell(ncell, o);\n    write_Xnum(cell.v, o);\n    return o;\n}\n/* [MS-XLSB] 2.4.314 BrtCellRk */ function parse_BrtCellRk(data) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_RkNumber(data);\n    return [\n        cell,\n        value,\n        \"n\"\n    ];\n}\nfunction write_BrtCellRk(cell, ncell, o) {\n    if (o == null) o = new_buf(12);\n    write_XLSBCell(ncell, o);\n    write_RkNumber(cell.v, o);\n    return o;\n}\nfunction parse_BrtShortRk(data) {\n    var cell = parse_XLSBShortCell(data);\n    var value = parse_RkNumber(data);\n    return [\n        cell,\n        value,\n        \"n\"\n    ];\n}\nfunction write_BrtShortRk(cell, ncell, o) {\n    if (o == null) o = new_buf(8);\n    write_XLSBShortCell(ncell, o);\n    write_RkNumber(cell.v, o);\n    return o;\n}\n/* [MS-XLSB] 2.4.323 BrtCellRString */ function parse_BrtCellRString(data) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_RichStr(data);\n    return [\n        cell,\n        value,\n        \"is\"\n    ];\n}\n/* [MS-XLSB] 2.4.317 BrtCellSt */ function parse_BrtCellSt(data) {\n    var cell = parse_XLSBCell(data);\n    var value = parse_XLWideString(data);\n    return [\n        cell,\n        value,\n        \"str\"\n    ];\n}\nfunction write_BrtCellSt(cell, ncell, o) {\n    if (o == null) o = new_buf(12 + 4 * cell.v.length);\n    write_XLSBCell(ncell, o);\n    write_XLWideString(cell.v, o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\nfunction parse_BrtShortSt(data) {\n    var cell = parse_XLSBShortCell(data);\n    var value = parse_XLWideString(data);\n    return [\n        cell,\n        value,\n        \"str\"\n    ];\n}\nfunction write_BrtShortSt(cell, ncell, o) {\n    if (o == null) o = new_buf(8 + 4 * cell.v.length);\n    write_XLSBShortCell(ncell, o);\n    write_XLWideString(cell.v, o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.653 BrtFmlaBool */ function parse_BrtFmlaBool(data, length, opts) {\n    var end = data.l + length;\n    var cell = parse_XLSBCell(data);\n    cell.r = opts[\"!row\"];\n    var value = data.read_shift(1);\n    var o = [\n        cell,\n        value,\n        \"b\"\n    ];\n    if (opts.cellFormula) {\n        data.l += 2;\n        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ \n    } else data.l = end;\n    return o;\n}\n/* [MS-XLSB] 2.4.654 BrtFmlaError */ function parse_BrtFmlaError(data, length, opts) {\n    var end = data.l + length;\n    var cell = parse_XLSBCell(data);\n    cell.r = opts[\"!row\"];\n    var value = data.read_shift(1);\n    var o = [\n        cell,\n        value,\n        \"e\"\n    ];\n    if (opts.cellFormula) {\n        data.l += 2;\n        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ \n    } else data.l = end;\n    return o;\n}\n/* [MS-XLSB] 2.4.655 BrtFmlaNum */ function parse_BrtFmlaNum(data, length, opts) {\n    var end = data.l + length;\n    var cell = parse_XLSBCell(data);\n    cell.r = opts[\"!row\"];\n    var value = parse_Xnum(data);\n    var o = [\n        cell,\n        value,\n        \"n\"\n    ];\n    if (opts.cellFormula) {\n        data.l += 2;\n        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ \n    } else data.l = end;\n    return o;\n}\n/* [MS-XLSB] 2.4.656 BrtFmlaString */ function parse_BrtFmlaString(data, length, opts) {\n    var end = data.l + length;\n    var cell = parse_XLSBCell(data);\n    cell.r = opts[\"!row\"];\n    var value = parse_XLWideString(data);\n    var o = [\n        cell,\n        value,\n        \"str\"\n    ];\n    if (opts.cellFormula) {\n        data.l += 2;\n        var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);\n        o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts); /* TODO */ \n    } else data.l = end;\n    return o;\n}\n/* [MS-XLSB] 2.4.682 BrtMergeCell */ var parse_BrtMergeCell = parse_UncheckedRfX;\nvar write_BrtMergeCell = write_UncheckedRfX;\n/* [MS-XLSB] 2.4.107 BrtBeginMergeCells */ function write_BrtBeginMergeCells(cnt, o) {\n    if (o == null) o = new_buf(4);\n    o.write_shift(4, cnt);\n    return o;\n}\n/* [MS-XLSB] 2.4.662 BrtHLink */ function parse_BrtHLink(data, length /*::, opts*/ ) {\n    var end = data.l + length;\n    var rfx = parse_UncheckedRfX(data, 16);\n    var relId = parse_XLNullableWideString(data);\n    var loc = parse_XLWideString(data);\n    var tooltip = parse_XLWideString(data);\n    var display = parse_XLWideString(data);\n    data.l = end;\n    var o = {\n        rfx: rfx,\n        relId: relId,\n        loc: loc,\n        display: display\n    } /*:any*/ ;\n    if (tooltip) o.Tooltip = tooltip;\n    return o;\n}\nfunction write_BrtHLink(l, rId) {\n    var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || \"\").length));\n    write_UncheckedRfX({\n        s: decode_cell(l[0]),\n        e: decode_cell(l[0])\n    }, o);\n    write_RelID(\"rId\" + rId, o);\n    var locidx = l[1].Target.indexOf(\"#\");\n    var loc = locidx == -1 ? \"\" : l[1].Target.slice(locidx + 1);\n    write_XLWideString(loc || \"\", o);\n    write_XLWideString(l[1].Tooltip || \"\", o);\n    write_XLWideString(\"\", o);\n    return o.slice(0, o.l);\n}\n/* [MS-XLSB] 2.4.692 BrtPane */ function parse_BrtPane() {}\n/* [MS-XLSB] 2.4.6 BrtArrFmla */ function parse_BrtArrFmla(data, length, opts) {\n    var end = data.l + length;\n    var rfx = parse_RfX(data, 16);\n    var fAlwaysCalc = data.read_shift(1);\n    var o = [\n        rfx\n    ];\n    o[2] = fAlwaysCalc;\n    if (opts.cellFormula) {\n        var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);\n        o[1] = formula;\n    } else data.l = end;\n    return o;\n}\n/* [MS-XLSB] 2.4.750 BrtShrFmla */ function parse_BrtShrFmla(data, length, opts) {\n    var end = data.l + length;\n    var rfx = parse_UncheckedRfX(data, 16);\n    var o = [\n        rfx\n    ];\n    if (opts.cellFormula) {\n        var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);\n        o[1] = formula;\n        data.l = end;\n    } else data.l = end;\n    return o;\n}\n/* [MS-XLSB] 2.4.323 BrtColInfo */ /* TODO: once XLS ColInfo is set, combine the functions */ function write_BrtColInfo(C /*:number*/ , col, o) {\n    if (o == null) o = new_buf(18);\n    var p = col_obj_w(C, col);\n    o.write_shift(-4, C);\n    o.write_shift(-4, C);\n    o.write_shift(4, (p.width || 10) * 256);\n    o.write_shift(4, 0 /*ixfe*/ ); // style\n    var flags = 0;\n    if (col.hidden) flags |= 0x01;\n    if (typeof p.width == \"number\") flags |= 0x02;\n    if (col.level) flags |= col.level << 8;\n    o.write_shift(2, flags); // bit flag\n    return o;\n}\n/* [MS-XLSB] 2.4.678 BrtMargins */ var BrtMarginKeys = [\n    \"left\",\n    \"right\",\n    \"top\",\n    \"bottom\",\n    \"header\",\n    \"footer\"\n];\nfunction parse_BrtMargins(data /*::, length, opts*/ ) /*:Margins*/ {\n    var margins = {} /*:any*/ ;\n    BrtMarginKeys.forEach(function(k) {\n        margins[k] = parse_Xnum(data, 8);\n    });\n    return margins;\n}\nfunction write_BrtMargins(margins /*:Margins*/ , o) {\n    if (o == null) o = new_buf(6 * 8);\n    default_margins(margins);\n    BrtMarginKeys.forEach(function(k) {\n        write_Xnum(margins /*:any*/ [k], o);\n    });\n    return o;\n}\n/* [MS-XLSB] 2.4.299 BrtBeginWsView */ function parse_BrtBeginWsView(data /*::, length, opts*/ ) {\n    var f = data.read_shift(2);\n    data.l += 28;\n    return {\n        RTL: f & 0x20\n    };\n}\nfunction write_BrtBeginWsView(ws, Workbook, o) {\n    if (o == null) o = new_buf(30);\n    var f = 0x39c;\n    if ((((Workbook || {}).Views || [])[0] || {}).RTL) f |= 0x20;\n    o.write_shift(2, f); // bit flag\n    o.write_shift(4, 0);\n    o.write_shift(4, 0); // view first row\n    o.write_shift(4, 0); // view first col\n    o.write_shift(1, 0); // gridline color ICV\n    o.write_shift(1, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, 100); // zoom scale\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(4, 0); // workbook view id\n    return o;\n}\n/* [MS-XLSB] 2.4.309 BrtCellIgnoreEC */ function write_BrtCellIgnoreEC(ref) {\n    var o = new_buf(24);\n    o.write_shift(4, 4);\n    o.write_shift(4, 1);\n    write_UncheckedRfX(ref, o);\n    return o;\n}\n/* [MS-XLSB] 2.4.748 BrtSheetProtection */ function write_BrtSheetProtection(sp, o) {\n    if (o == null) o = new_buf(16 * 4 + 2);\n    o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);\n    o.write_shift(4, 1); // this record should not be written if no protection\n    [\n        [\n            \"objects\",\n            false\n        ],\n        [\n            \"scenarios\",\n            false\n        ],\n        [\n            \"formatCells\",\n            true\n        ],\n        [\n            \"formatColumns\",\n            true\n        ],\n        [\n            \"formatRows\",\n            true\n        ],\n        [\n            \"insertColumns\",\n            true\n        ],\n        [\n            \"insertRows\",\n            true\n        ],\n        [\n            \"insertHyperlinks\",\n            true\n        ],\n        [\n            \"deleteColumns\",\n            true\n        ],\n        [\n            \"deleteRows\",\n            true\n        ],\n        [\n            \"selectLockedCells\",\n            false\n        ],\n        [\n            \"sort\",\n            true\n        ],\n        [\n            \"autoFilter\",\n            true\n        ],\n        [\n            \"pivotTables\",\n            true\n        ],\n        [\n            \"selectUnlockedCells\",\n            false\n        ] // fSelUnlockedCells\n    ].forEach(function(n) {\n        /*:: if(o == null) throw \"unreachable\"; */ if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);\n        else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);\n    });\n    return o;\n}\nfunction parse_BrtDVal() {}\nfunction parse_BrtDVal14() {}\n/* [MS-XLSB] 2.1.7.61 Worksheet */ function parse_ws_bin(data, _opts, idx, rels, wb /*:WBWBProps*/ , themes, styles) /*:Worksheet*/ {\n    if (!data) return data;\n    var opts = _opts || {};\n    if (!rels) rels = {\n        \"!id\": {}\n    };\n    if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n    var s /*:Worksheet*/  = opts.dense ? [] : {};\n    var ref;\n    var refguess = {\n        s: {\n            r: 2000000,\n            c: 2000000\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    var state /*:Array<string>*/  = [];\n    var pass = false, end = false;\n    var row, p, cf, R, C, addr, sstr, rr, cell /*:Cell*/ ;\n    var merges /*:Array<Range>*/  = [];\n    opts.biff = 12;\n    opts[\"!row\"] = 0;\n    var ai = 0, af = false;\n    var arrayf /*:Array<[Range, string]>*/  = [];\n    var sharedf = {};\n    var supbooks = opts.supbooks || /*::(*/ wb /*:: :any)*/ .supbooks || [\n        []\n    ];\n    supbooks.sharedf = sharedf;\n    supbooks.arrayf = arrayf;\n    supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {\n        return x.name;\n    });\n    if (!opts.supbooks) {\n        opts.supbooks = supbooks;\n        if (wb.Names) for(var i = 0; i < wb.Names.length; ++i)supbooks[0][i + 1] = wb.Names[i];\n    }\n    var colinfo /*:Array<ColInfo>*/  = [], rowinfo /*:Array<RowInfo>*/  = [];\n    var seencol = false;\n    XLSBRecordEnum[0x0010] = {\n        n: \"BrtShortReal\",\n        f: parse_BrtShortReal\n    };\n    var cm, vm;\n    recordhopper(data, function ws_parse(val, RR, RT) {\n        if (end) return;\n        switch(RT){\n            case 0x0094:\n                /* 'BrtWsDim' */ ref = val;\n                break;\n            case 0x0000:\n                /* 'BrtRowHdr' */ row = val;\n                if (opts.sheetRows && opts.sheetRows <= row.r) end = true;\n                rr = encode_row(R = row.r);\n                opts[\"!row\"] = row.r;\n                if (val.hidden || val.hpt || val.level != null) {\n                    if (val.hpt) val.hpx = pt2px(val.hpt);\n                    rowinfo[val.r] = val;\n                }\n                break;\n            case 0x0002:\n            /* 'BrtCellRk' */ case 0x0003:\n            /* 'BrtCellError' */ case 0x0004:\n            /* 'BrtCellBool' */ case 0x0005:\n            /* 'BrtCellReal' */ case 0x0006:\n            /* 'BrtCellSt' */ case 0x0007:\n            /* 'BrtCellIsst' */ case 0x0008:\n            /* 'BrtFmlaString' */ case 0x0009:\n            /* 'BrtFmlaNum' */ case 0x000A:\n            /* 'BrtFmlaBool' */ case 0x000B:\n            /* 'BrtFmlaError' */ case 0x000D:\n            /* 'BrtShortRk' */ case 0x000E:\n            /* 'BrtShortError' */ case 0x000F:\n            /* 'BrtShortBool' */ case 0x0010:\n            /* 'BrtShortReal' */ case 0x0011:\n            /* 'BrtShortSt' */ case 0x0012:\n            /* 'BrtShortIsst' */ case 0x003E:\n                /* 'BrtCellRString' */ p = {\n                    t: val[2]\n                } /*:any*/ ;\n                switch(val[2]){\n                    case \"n\":\n                        p.v = val[1];\n                        break;\n                    case \"s\":\n                        sstr = strs[val[1]];\n                        p.v = sstr.t;\n                        p.r = sstr.r;\n                        break;\n                    case \"b\":\n                        p.v = val[1] ? true : false;\n                        break;\n                    case \"e\":\n                        p.v = val[1];\n                        if (opts.cellText !== false) p.w = BErr[p.v];\n                        break;\n                    case \"str\":\n                        p.t = \"s\";\n                        p.v = val[1];\n                        break;\n                    case \"is\":\n                        p.t = \"s\";\n                        p.v = val[1].t;\n                        break;\n                }\n                if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles);\n                C = val[0].c == -1 ? C + 1 : val[0].c;\n                if (opts.dense) {\n                    if (!s[R]) s[R] = [];\n                    s[R][C] = p;\n                } else s[encode_col(C) + rr] = p;\n                if (opts.cellFormula) {\n                    af = false;\n                    for(ai = 0; ai < arrayf.length; ++ai){\n                        var aii = arrayf[ai];\n                        if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {\n                            if (C >= aii[0].s.c && C <= aii[0].e.c) {\n                                p.F = encode_range(aii[0]);\n                                af = true;\n                            }\n                        }\n                    }\n                    if (!af && val.length > 3) p.f = val[3];\n                }\n                if (refguess.s.r > row.r) refguess.s.r = row.r;\n                if (refguess.s.c > C) refguess.s.c = C;\n                if (refguess.e.r < row.r) refguess.e.r = row.r;\n                if (refguess.e.c < C) refguess.e.c = C;\n                if (opts.cellDates && cf && p.t == \"n\" && fmt_is_date(table_fmt[cf.numFmtId])) {\n                    var _d = SSF_parse_date_code(p.v);\n                    if (_d) {\n                        p.t = \"d\";\n                        p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);\n                    }\n                }\n                if (cm) {\n                    if (cm.type == \"XLDAPR\") p.D = true;\n                    cm = void 0;\n                }\n                if (vm) vm = void 0;\n                break;\n            case 0x0001:\n            /* 'BrtCellBlank' */ case 0x000C:\n                /* 'BrtShortBlank' */ if (!opts.sheetStubs || pass) break;\n                p = {\n                    t: \"z\",\n                    v: void 0\n                } /*:any*/ ;\n                C = val[0].c == -1 ? C + 1 : val[0].c;\n                if (opts.dense) {\n                    if (!s[R]) s[R] = [];\n                    s[R][C] = p;\n                } else s[encode_col(C) + rr] = p;\n                if (refguess.s.r > row.r) refguess.s.r = row.r;\n                if (refguess.s.c > C) refguess.s.c = C;\n                if (refguess.e.r < row.r) refguess.e.r = row.r;\n                if (refguess.e.c < C) refguess.e.c = C;\n                if (cm) {\n                    if (cm.type == \"XLDAPR\") p.D = true;\n                    cm = void 0;\n                }\n                if (vm) vm = void 0;\n                break;\n            case 0x00B0:\n                /* 'BrtMergeCell' */ merges.push(val);\n                break;\n            case 0x0031:\n                {\n                    cm = ((opts.xlmeta || {}).Cell || [])[val - 1];\n                }\n                break;\n            case 0x01EE:\n                /* 'BrtHLink' */ var rel = rels[\"!id\"][val.relId];\n                if (rel) {\n                    val.Target = rel.Target;\n                    if (val.loc) val.Target += \"#\" + val.loc;\n                    val.Rel = rel;\n                } else if (val.relId == \"\") {\n                    val.Target = \"#\" + val.loc;\n                }\n                for(R = val.rfx.s.r; R <= val.rfx.e.r; ++R)for(C = val.rfx.s.c; C <= val.rfx.e.c; ++C){\n                    if (opts.dense) {\n                        if (!s[R]) s[R] = [];\n                        if (!s[R][C]) s[R][C] = {\n                            t: \"z\",\n                            v: undefined\n                        };\n                        s[R][C].l = val;\n                    } else {\n                        addr = encode_cell({\n                            c: C,\n                            r: R\n                        });\n                        if (!s[addr]) s[addr] = {\n                            t: \"z\",\n                            v: undefined\n                        };\n                        s[addr].l = val;\n                    }\n                }\n                break;\n            case 0x01AA:\n                /* 'BrtArrFmla' */ if (!opts.cellFormula) break;\n                arrayf.push(val);\n                cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];\n                cell.f = stringify_formula(val[1], refguess, {\n                    r: row.r,\n                    c: C\n                }, supbooks, opts);\n                cell.F = encode_range(val[0]);\n                break;\n            case 0x01AB:\n                /* 'BrtShrFmla' */ if (!opts.cellFormula) break;\n                sharedf[encode_cell(val[0].s)] = val[1];\n                cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];\n                cell.f = stringify_formula(val[1], refguess, {\n                    r: row.r,\n                    c: C\n                }, supbooks, opts);\n                break;\n            /* identical to 'ColInfo' in XLS */ case 0x003C:\n                /* 'BrtColInfo' */ if (!opts.cellStyles) break;\n                while(val.e >= val.s){\n                    colinfo[val.e--] = {\n                        width: val.w / 256,\n                        hidden: !!(val.flags & 0x01),\n                        level: val.level\n                    };\n                    if (!seencol) {\n                        seencol = true;\n                        find_mdw_colw(val.w / 256);\n                    }\n                    process_col(colinfo[val.e + 1]);\n                }\n                break;\n            case 0x00A1:\n                /* 'BrtBeginAFilter' */ s[\"!autofilter\"] = {\n                    ref: encode_range(val)\n                };\n                break;\n            case 0x01DC:\n                /* 'BrtMargins' */ s[\"!margins\"] = val;\n                break;\n            case 0x0093:\n                /* 'BrtWsProp' */ if (!wb.Sheets[idx]) wb.Sheets[idx] = {};\n                if (val.name) wb.Sheets[idx].CodeName = val.name;\n                if (val.above || val.left) s[\"!outline\"] = {\n                    above: val.above,\n                    left: val.left\n                };\n                break;\n            case 0x0089:\n                /* 'BrtBeginWsView' */ if (!wb.Views) wb.Views = [\n                    {}\n                ];\n                if (!wb.Views[0]) wb.Views[0] = {};\n                if (val.RTL) wb.Views[0].RTL = true;\n                break;\n            case 0x01E5:\n                break;\n            case 0x0040:\n            /* 'BrtDVal' */ case 0x041D:\n                break;\n            case 0x0097:\n                break;\n            case 0x0098:\n            /* 'BrtSel' */ case 0x00AF:\n            /* 'BrtAFilterDateGroupItem' */ case 0x0284:\n            /* 'BrtActiveX' */ case 0x0271:\n            /* 'BrtBigName' */ case 0x0232:\n            /* 'BrtBkHim' */ case 0x018C:\n            /* 'BrtBrk' */ case 0x0458:\n            /* 'BrtCFIcon' */ case 0x047A:\n            /* 'BrtCFRuleExt' */ case 0x01D7:\n            /* 'BrtCFVO' */ case 0x041A:\n            /* 'BrtCFVO14' */ case 0x0289:\n            /* 'BrtCellIgnoreEC' */ case 0x0451:\n            /* 'BrtCellIgnoreEC14' */ case 0x024D:\n            /* 'BrtCellSmartTagProperty' */ case 0x025F:\n            /* 'BrtCellWatch' */ case 0x0234:\n            /* 'BrtColor' */ case 0x041F:\n            /* 'BrtColor14' */ case 0x00A8:\n            /* 'BrtColorFilter' */ case 0x00AE:\n            /* 'BrtCustomFilter' */ case 0x049C:\n            /* 'BrtCustomFilter14' */ case 0x01F3:\n            /* 'BrtDRef' */ case 0x01FB:\n            /* 'BrtDXF' */ case 0x0226:\n            /* 'BrtDrawing' */ case 0x00AB:\n            /* 'BrtDynamicFilter' */ case 0x00A7:\n            /* 'BrtFilter' */ case 0x0499:\n            /* 'BrtFilter14' */ case 0x00A9:\n            /* 'BrtIconFilter' */ case 0x049D:\n            /* 'BrtIconFilter14' */ case 0x0227:\n            /* 'BrtLegacyDrawing' */ case 0x0228:\n            /* 'BrtLegacyDrawingHF' */ case 0x0295:\n            /* 'BrtListPart' */ case 0x027F:\n            /* 'BrtOleObject' */ case 0x01DE:\n            /* 'BrtPageSetup' */ case 0x0219:\n            /* 'BrtPhoneticInfo' */ case 0x01DD:\n            /* 'BrtPrintOptions' */ case 0x0218:\n            /* 'BrtRangeProtection' */ case 0x044F:\n            /* 'BrtRangeProtection14' */ case 0x02A8:\n            /* 'BrtRangeProtectionIso' */ case 0x0450:\n            /* 'BrtRangeProtectionIso14' */ case 0x0400:\n            /* 'BrtRwDescent' */ case 0x0297:\n            /* 'BrtSheetCalcProp' */ case 0x0217:\n            /* 'BrtSheetProtection' */ case 0x02A6:\n            /* 'BrtSheetProtectionIso' */ case 0x01F8:\n            /* 'BrtSlc' */ case 0x0413:\n            /* 'BrtSparkline' */ case 0x01AC:\n            /* 'BrtTable' */ case 0x00AA:\n            /* 'BrtTop10Filter' */ case 0x0C00:\n            /* 'BrtUid' */ case 0x0032:\n            /* 'BrtValueMeta' */ case 0x0816:\n            /* 'BrtWebExtension' */ case 0x0415:\n                break;\n            case 0x0023:\n                /* 'BrtFRTBegin' */ pass = true;\n                break;\n            case 0x0024:\n                /* 'BrtFRTEnd' */ pass = false;\n                break;\n            case 0x0025:\n                /* 'BrtACBegin' */ state.push(RT);\n                pass = true;\n                break;\n            case 0x0026:\n                /* 'BrtACEnd' */ state.pop();\n                pass = false;\n                break;\n            default:\n                if (RR.T) {} else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    }, opts);\n    delete opts.supbooks;\n    delete opts[\"!row\"];\n    if (!s[\"!ref\"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s[\"!ref\"] = encode_range(ref || refguess);\n    if (opts.sheetRows && s[\"!ref\"]) {\n        var tmpref = safe_decode_range(s[\"!ref\"]);\n        if (opts.sheetRows <= +tmpref.e.r) {\n            tmpref.e.r = opts.sheetRows - 1;\n            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n            s[\"!fullref\"] = s[\"!ref\"];\n            s[\"!ref\"] = encode_range(tmpref);\n        }\n    }\n    if (merges.length > 0) s[\"!merges\"] = merges;\n    if (colinfo.length > 0) s[\"!cols\"] = colinfo;\n    if (rowinfo.length > 0) s[\"!rows\"] = rowinfo;\n    return s;\n}\n/* TODO: something useful -- this is a stub */ function write_ws_bin_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts, ws /*:Worksheet*/ , last_seen /*:boolean*/ ) /*:boolean*/ {\n    if (cell.v === undefined) return false;\n    var vv = \"\";\n    switch(cell.t){\n        case \"b\":\n            vv = cell.v ? \"1\" : \"0\";\n            break;\n        case \"d\":\n            cell = dup(cell);\n            cell.z = cell.z || table_fmt[14];\n            cell.v = datenum(parseDate(cell.v));\n            cell.t = \"n\";\n            break;\n        /* falls through */ case \"n\":\n        case \"e\":\n            vv = \"\" + cell.v;\n            break;\n        default:\n            vv = cell.v;\n            break;\n    }\n    var o /*:any*/  = {\n        r: R,\n        c: C\n    } /*:any*/ ;\n    /* TODO: cell style */ o.s = get_cell_style(opts.cellXfs, cell, opts);\n    if (cell.l) ws[\"!links\"].push([\n        encode_cell(o),\n        cell.l\n    ]);\n    if (cell.c) ws[\"!comments\"].push([\n        encode_cell(o),\n        cell.c\n    ]);\n    switch(cell.t){\n        case \"s\":\n        case \"str\":\n            if (opts.bookSST) {\n                vv = get_sst_id(opts.Strings, cell.v /*:any*/ , opts.revStrings);\n                o.t = \"s\";\n                o.v = vv;\n                if (last_seen) write_record(ba, 0x0012 /* BrtShortIsst */ , write_BrtShortIsst(cell, o));\n                else write_record(ba, 0x0007 /* BrtCellIsst */ , write_BrtCellIsst(cell, o));\n            } else {\n                o.t = \"str\";\n                if (last_seen) write_record(ba, 0x0011 /* BrtShortSt */ , write_BrtShortSt(cell, o));\n                else write_record(ba, 0x0006 /* BrtCellSt */ , write_BrtCellSt(cell, o));\n            }\n            return true;\n        case \"n\":\n            /* TODO: determine threshold for Real vs RK */ if (cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) {\n                if (last_seen) write_record(ba, 0x000D /* BrtShortRk */ , write_BrtShortRk(cell, o));\n                else write_record(ba, 0x0002 /* BrtCellRk */ , write_BrtCellRk(cell, o));\n            } else {\n                if (last_seen) write_record(ba, 0x0010 /* BrtShortReal */ , write_BrtShortReal(cell, o));\n                else write_record(ba, 0x0005 /* BrtCellReal */ , write_BrtCellReal(cell, o));\n            }\n            return true;\n        case \"b\":\n            o.t = \"b\";\n            if (last_seen) write_record(ba, 0x000F /* BrtShortBool */ , write_BrtShortBool(cell, o));\n            else write_record(ba, 0x0004 /* BrtCellBool */ , write_BrtCellBool(cell, o));\n            return true;\n        case \"e\":\n            o.t = \"e\";\n            if (last_seen) write_record(ba, 0x000E /* BrtShortError */ , write_BrtShortError(cell, o));\n            else write_record(ba, 0x0003 /* BrtCellError */ , write_BrtCellError(cell, o));\n            return true;\n    }\n    if (last_seen) write_record(ba, 0x000C /* BrtShortBlank */ , write_BrtShortBlank(cell, o));\n    else write_record(ba, 0x0001 /* BrtCellBlank */ , write_BrtCellBlank(cell, o));\n    return true;\n}\nfunction write_CELLTABLE(ba, ws /*:Worksheet*/ , idx /*:number*/ , opts /*::, wb:Workbook*/ ) {\n    var range = safe_decode_range(ws[\"!ref\"] || \"A1\"), ref, rr = \"\", cols /*:Array<string>*/  = [];\n    write_record(ba, 0x0091 /* BrtBeginSheetData */ );\n    var dense = Array.isArray(ws);\n    var cap = range.e.r;\n    if (ws[\"!rows\"]) cap = Math.max(range.e.r, ws[\"!rows\"].length - 1);\n    for(var R = range.s.r; R <= cap; ++R){\n        rr = encode_row(R);\n        /* [ACCELLTABLE] */ /* BrtRowHdr */ write_row_header(ba, ws, range, R);\n        var last_seen = false;\n        if (R <= range.e.r) for(var C = range.s.c; C <= range.e.c; ++C){\n            /* *16384CELL */ if (R === range.s.r) cols[C] = encode_col(C);\n            ref = cols[C] + rr;\n            var cell = dense ? (ws[R] || [])[C] : ws[ref];\n            if (!cell) {\n                last_seen = false;\n                continue;\n            }\n            /* write cell */ last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);\n        }\n    }\n    write_record(ba, 0x0092 /* BrtEndSheetData */ );\n}\nfunction write_MERGECELLS(ba, ws /*:Worksheet*/ ) {\n    if (!ws || !ws[\"!merges\"]) return;\n    write_record(ba, 0x00B1 /* BrtBeginMergeCells */ , write_BrtBeginMergeCells(ws[\"!merges\"].length));\n    ws[\"!merges\"].forEach(function(m) {\n        write_record(ba, 0x00B0 /* BrtMergeCell */ , write_BrtMergeCell(m));\n    });\n    write_record(ba, 0x00B2 /* BrtEndMergeCells */ );\n}\nfunction write_COLINFOS(ba, ws /*:Worksheet*/  /*::, idx:number, opts, wb:Workbook*/ ) {\n    if (!ws || !ws[\"!cols\"]) return;\n    write_record(ba, 0x0186 /* BrtBeginColInfos */ );\n    ws[\"!cols\"].forEach(function(m, i) {\n        if (m) write_record(ba, 0x003C /* 'BrtColInfo' */ , write_BrtColInfo(i, m));\n    });\n    write_record(ba, 0x0187 /* BrtEndColInfos */ );\n}\nfunction write_IGNOREECS(ba, ws /*:Worksheet*/ ) {\n    if (!ws || !ws[\"!ref\"]) return;\n    write_record(ba, 0x0288 /* BrtBeginCellIgnoreECs */ );\n    write_record(ba, 0x0289 /* BrtCellIgnoreEC */ , write_BrtCellIgnoreEC(safe_decode_range(ws[\"!ref\"])));\n    write_record(ba, 0x028A /* BrtEndCellIgnoreECs */ );\n}\nfunction write_HLINKS(ba, ws /*:Worksheet*/ , rels) {\n    /* *BrtHLink */ ws[\"!links\"].forEach(function(l) {\n        if (!l[1].Target) return;\n        var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, \"\"), RELS.HLINK);\n        write_record(ba, 0x01EE /* BrtHLink */ , write_BrtHLink(l, rId));\n    });\n    delete ws[\"!links\"];\n}\nfunction write_LEGACYDRAWING(ba, ws /*:Worksheet*/ , idx /*:number*/ , rels) {\n    /* [BrtLegacyDrawing] */ if (ws[\"!comments\"].length > 0) {\n        var rId = add_rels(rels, -1, \"../drawings/vmlDrawing\" + (idx + 1) + \".vml\", RELS.VML);\n        write_record(ba, 0x0227 /* BrtLegacyDrawing */ , write_RelID(\"rId\" + rId));\n        ws[\"!legacy\"] = rId;\n    }\n}\nfunction write_AUTOFILTER(ba, ws, wb, idx) {\n    if (!ws[\"!autofilter\"]) return;\n    var data = ws[\"!autofilter\"];\n    var ref = typeof data.ref === \"string\" ? data.ref : encode_range(data.ref);\n    /* Update FilterDatabase defined name for the worksheet */ if (!wb.Workbook) wb.Workbook = {\n        Sheets: []\n    } /*:any*/ ;\n    if (!wb.Workbook.Names) wb.Workbook.Names = [];\n    var names /*: Array<any> */  = wb.Workbook.Names;\n    var range = decode_range(ref);\n    if (range.s.r == range.e.r) {\n        range.e.r = decode_range(ws[\"!ref\"]).e.r;\n        ref = encode_range(range);\n    }\n    for(var i = 0; i < names.length; ++i){\n        var name = names[i];\n        if (name.Name != \"_xlnm._FilterDatabase\") continue;\n        if (name.Sheet != idx) continue;\n        name.Ref = \"'\" + wb.SheetNames[idx] + \"'!\" + ref;\n        break;\n    }\n    if (i == names.length) names.push({\n        Name: \"_xlnm._FilterDatabase\",\n        Sheet: idx,\n        Ref: \"'\" + wb.SheetNames[idx] + \"'!\" + ref\n    });\n    write_record(ba, 0x00A1 /* BrtBeginAFilter */ , write_UncheckedRfX(safe_decode_range(ref)));\n    /* *FILTERCOLUMN */ /* [SORTSTATE] */ /* BrtEndAFilter */ write_record(ba, 0x00A2 /* BrtEndAFilter */ );\n}\nfunction write_WSVIEWS2(ba, ws, Workbook) {\n    write_record(ba, 0x0085 /* BrtBeginWsViews */ );\n    {\n        /* [ACUID] */ write_record(ba, 0x0089 /* BrtBeginWsView */ , write_BrtBeginWsView(ws, Workbook));\n        /* [BrtPane] */ /* *4BrtSel */ /* *4SXSELECT */ /* *FRT */ write_record(ba, 0x008A /* BrtEndWsView */ );\n    }\n    /* *FRT */ write_record(ba, 0x0086 /* BrtEndWsViews */ );\n}\nfunction write_WSFMTINFO() {\n/* [ACWSFMTINFO] */ // write_record(ba, 0x01E5 /* BrtWsFmtInfo */, write_BrtWsFmtInfo(ws));\n}\nfunction write_SHEETPROTECT(ba, ws) {\n    if (!ws[\"!protect\"]) return;\n    /* [BrtSheetProtectionIso] */ write_record(ba, 0x0217 /* BrtSheetProtection */ , write_BrtSheetProtection(ws[\"!protect\"]));\n}\nfunction write_ws_bin(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) {\n    var ba = buf_array();\n    var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};\n    var c /*:string*/  = s;\n    try {\n        if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;\n    } catch (e) {}\n    var r = safe_decode_range(ws[\"!ref\"] || \"A1\");\n    if (r.e.c > 0x3FFF || r.e.r > 0xFFFFF) {\n        if (opts.WTF) throw new Error(\"Range \" + (ws[\"!ref\"] || \"A1\") + \" exceeds format limit A1:XFD1048576\");\n        r.e.c = Math.min(r.e.c, 0x3FFF);\n        r.e.r = Math.min(r.e.c, 0xFFFFF);\n    }\n    ws[\"!links\"] = [];\n    /* passed back to write_zip and removed there */ ws[\"!comments\"] = [];\n    write_record(ba, 0x0081 /* BrtBeginSheet */ );\n    if (wb.vbaraw || ws[\"!outline\"]) write_record(ba, 0x0093 /* BrtWsProp */ , write_BrtWsProp(c, ws[\"!outline\"]));\n    write_record(ba, 0x0094 /* BrtWsDim */ , write_BrtWsDim(r));\n    write_WSVIEWS2(ba, ws, wb.Workbook);\n    write_WSFMTINFO(ba, ws);\n    write_COLINFOS(ba, ws, idx, opts, wb);\n    write_CELLTABLE(ba, ws, idx, opts, wb);\n    /* [BrtSheetCalcProp] */ write_SHEETPROTECT(ba, ws);\n    /* *([BrtRangeProtectionIso] BrtRangeProtection) */ /* [SCENMAN] */ write_AUTOFILTER(ba, ws, wb, idx);\n    /* [SORTSTATE] */ /* [DCON] */ /* [USERSHVIEWS] */ write_MERGECELLS(ba, ws);\n    /* [BrtPhoneticInfo] */ /* *CONDITIONALFORMATTING */ /* [DVALS] */ write_HLINKS(ba, ws, rels);\n    /* [BrtPrintOptions] */ if (ws[\"!margins\"]) write_record(ba, 0x01DC /* BrtMargins */ , write_BrtMargins(ws[\"!margins\"]));\n    /* [BrtPageSetup] */ /* [HEADERFOOTER] */ /* [RWBRK] */ /* [COLBRK] */ /* *BrtBigName */ /* [CELLWATCHES] */ if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);\n    /* [SMARTTAGS] */ /* [BrtDrawing] */ write_LEGACYDRAWING(ba, ws, idx, rels);\n    /* [BrtLegacyDrawingHF] */ /* [BrtBkHim] */ /* [OLEOBJECTS] */ /* [ACTIVEXCONTROLS] */ /* [WEBPUBITEMS] */ /* [LISTPARTS] */ /* FRTWORKSHEET */ write_record(ba, 0x0082 /* BrtEndSheet */ );\n    return ba.end();\n}\nfunction parse_Cache(data /*:string*/ ) /*:[Array<number|string>, string, ?string]*/ {\n    var col /*:Array<number|string>*/  = [];\n    var num = data.match(/^<c:numCache>/);\n    var f;\n    /* 21.2.2.150 pt CT_NumVal */ (data.match(/<c:pt idx=\"(\\d*)\">(.*?)<\\/c:pt>/mg) || []).forEach(function(pt) {\n        var q = pt.match(/<c:pt idx=\"(\\d*?)\"><c:v>(.*)<\\/c:v><\\/c:pt>/);\n        if (!q) return;\n        col[+q[1]] = num ? +q[2] : q[2];\n    });\n    /* 21.2.2.71 formatCode CT_Xstring */ var nf = unescapexml((data.match(/<c:formatCode>([\\s\\S]*?)<\\/c:formatCode>/) || [\n        \"\",\n        \"General\"\n    ])[1]);\n    (data.match(/<c:f>(.*?)<\\/c:f>/mg) || []).forEach(function(F) {\n        f = F.replace(/<.*?>/g, \"\");\n    });\n    return [\n        col,\n        nf,\n        f\n    ];\n}\n/* 21.2 DrawingML - Charts */ function parse_chart(data /*:?string*/ , name /*:string*/ , opts, rels, wb, csheet) {\n    var cs /*:Worksheet*/  = csheet || {\n        \"!type\": \"chart\"\n    };\n    if (!data) return csheet;\n    /* 21.2.2.27 chart CT_Chart */ var C = 0, R = 0, col = \"A\";\n    var refguess = {\n        s: {\n            r: 2000000,\n            c: 2000000\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    /* 21.2.2.120 numCache CT_NumData */ (data.match(/<c:numCache>[\\s\\S]*?<\\/c:numCache>/gm) || []).forEach(function(nc) {\n        var cache = parse_Cache(nc);\n        refguess.s.r = refguess.s.c = 0;\n        refguess.e.c = C;\n        col = encode_col(C);\n        cache[0].forEach(function(n, i) {\n            cs[col + encode_row(i)] = {\n                t: \"n\",\n                v: n,\n                z: cache[1]\n            };\n            R = i;\n        });\n        if (refguess.e.r < R) refguess.e.r = R;\n        ++C;\n    });\n    if (C > 0) cs[\"!ref\"] = encode_range(refguess);\n    return cs;\n}\n/* 18.3 Worksheets also covers Chartsheets */ function parse_cs_xml(data /*:?string*/ , opts, idx /*:number*/ , rels, wb /*::, themes, styles*/ ) /*:Worksheet*/ {\n    if (!data) return data;\n    /* 18.3.1.12 chartsheet CT_ChartSheet */ if (!rels) rels = {\n        \"!id\": {}\n    };\n    var s = {\n        \"!type\": \"chart\",\n        \"!drawel\": null,\n        \"!rel\": \"\"\n    } /*:any*/ ;\n    var m;\n    /* 18.3.1.83 sheetPr CT_ChartsheetPr */ var sheetPr = data.match(sheetprregex);\n    if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);\n    /* 18.3.1.36 drawing CT_Drawing */ if (m = data.match(/drawing r:id=\"(.*?)\"/)) s[\"!rel\"] = m[1];\n    if (rels[\"!id\"][s[\"!rel\"]]) s[\"!drawel\"] = rels[\"!id\"][s[\"!rel\"]];\n    return s;\n}\nfunction write_cs_xml(idx /*:number*/ , opts, wb /*:Workbook*/ , rels) /*:string*/ {\n    var o = [\n        XML_HEADER,\n        writextag(\"chartsheet\", null, {\n            \"xmlns\": XMLNS_main[0],\n            \"xmlns:r\": XMLNS.r\n        })\n    ];\n    o[o.length] = writextag(\"drawing\", null, {\n        \"r:id\": \"rId1\"\n    });\n    add_rels(rels, -1, \"../drawings/drawing\" + (idx + 1) + \".xml\", RELS.DRAW);\n    if (o.length > 2) {\n        o[o.length] = \"</chartsheet>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.331 BrtCsProp */ function parse_BrtCsProp(data, length /*:number*/ ) {\n    data.l += 10;\n    var name = parse_XLWideString(data, length - 10);\n    return {\n        name: name\n    };\n}\n/* [MS-XLSB] 2.1.7.7 Chart Sheet */ function parse_cs_bin(data, opts, idx /*:number*/ , rels, wb /*::, themes, styles*/ ) /*:Worksheet*/ {\n    if (!data) return data;\n    if (!rels) rels = {\n        \"!id\": {}\n    };\n    var s = {\n        \"!type\": \"chart\",\n        \"!drawel\": null,\n        \"!rel\": \"\"\n    };\n    var state /*:Array<string>*/  = [];\n    var pass = false;\n    recordhopper(data, function cs_parse(val, R, RT) {\n        switch(RT){\n            case 0x0226:\n                /* 'BrtDrawing' */ s[\"!rel\"] = val;\n                break;\n            case 0x028B:\n                /* 'BrtCsProp' */ if (!wb.Sheets[idx]) wb.Sheets[idx] = {};\n                if (val.name) wb.Sheets[idx].CodeName = val.name;\n                break;\n            case 0x0232:\n            /* 'BrtBkHim' */ case 0x028C:\n            /* 'BrtCsPageSetup' */ case 0x029D:\n            /* 'BrtCsProtection' */ case 0x02A7:\n            /* 'BrtCsProtectionIso' */ case 0x0227:\n            /* 'BrtLegacyDrawing' */ case 0x0228:\n            /* 'BrtLegacyDrawingHF' */ case 0x01DC:\n            /* 'BrtMargins' */ case 0x0C00:\n                break;\n            case 0x0023:\n                /* 'BrtFRTBegin' */ pass = true;\n                break;\n            case 0x0024:\n                /* 'BrtFRTEnd' */ pass = false;\n                break;\n            case 0x0025:\n                /* 'BrtACBegin' */ state.push(RT);\n                break;\n            case 0x0026:\n                /* 'BrtACEnd' */ state.pop();\n                break;\n            default:\n                if (R.T > 0) state.push(RT);\n                else if (R.T < 0) state.pop();\n                else if (!pass || opts.WTF) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    }, opts);\n    if (rels[\"!id\"][s[\"!rel\"]]) s[\"!drawel\"] = rels[\"!id\"][s[\"!rel\"]];\n    return s;\n}\nfunction write_cs_bin() {\n    var ba = buf_array();\n    write_record(ba, 0x0081 /* BrtBeginSheet */ );\n    /* [BrtCsProp] */ /* CSVIEWS */ /* [[BrtCsProtectionIso] BrtCsProtection] */ /* [USERCSVIEWS] */ /* [BrtMargins] */ /* [BrtCsPageSetup] */ /* [HEADERFOOTER] */ /* BrtDrawing */ /* [BrtLegacyDrawing] */ /* [BrtLegacyDrawingHF] */ /* [BrtBkHim] */ /* [WEBPUBITEMS] */ /* FRTCHARTSHEET */ write_record(ba, 0x0082 /* BrtEndSheet */ );\n    return ba.end();\n}\n/* 18.2.28 (CT_WorkbookProtection) Defaults */ var WBPropsDef = [\n    [\n        \"allowRefreshQuery\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"autoCompressPictures\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"backupFile\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"checkCompatibility\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"CodeName\",\n        \"\"\n    ],\n    [\n        \"date1904\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"defaultThemeVersion\",\n        0,\n        \"int\"\n    ],\n    [\n        \"filterPrivacy\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"hidePivotFieldList\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"promptedSolutions\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"publishItems\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"refreshAllConnections\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"saveExternalLinkValues\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"showBorderUnselectedTables\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"showInkAnnotation\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"showObjects\",\n        \"all\"\n    ],\n    [\n        \"showPivotChartFilter\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"updateLinks\",\n        \"userSet\"\n    ]\n];\n/* 18.2.30 (CT_BookView) Defaults */ var WBViewDef = [\n    [\n        \"activeTab\",\n        0,\n        \"int\"\n    ],\n    [\n        \"autoFilterDateGrouping\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"firstSheet\",\n        0,\n        \"int\"\n    ],\n    [\n        \"minimized\",\n        false,\n        \"bool\"\n    ],\n    [\n        \"showHorizontalScroll\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"showSheetTabs\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"showVerticalScroll\",\n        true,\n        \"bool\"\n    ],\n    [\n        \"tabRatio\",\n        600,\n        \"int\"\n    ],\n    [\n        \"visibility\",\n        \"visible\"\n    ]\n];\n/* 18.2.19 (CT_Sheet) Defaults */ var SheetDef = [];\n/* 18.2.2  (CT_CalcPr) Defaults */ var CalcPrDef = [\n    [\n        \"calcCompleted\",\n        \"true\"\n    ],\n    [\n        \"calcMode\",\n        \"auto\"\n    ],\n    [\n        \"calcOnSave\",\n        \"true\"\n    ],\n    [\n        \"concurrentCalc\",\n        \"true\"\n    ],\n    [\n        \"fullCalcOnLoad\",\n        \"false\"\n    ],\n    [\n        \"fullPrecision\",\n        \"true\"\n    ],\n    [\n        \"iterate\",\n        \"false\"\n    ],\n    [\n        \"iterateCount\",\n        \"100\"\n    ],\n    [\n        \"iterateDelta\",\n        \"0.001\"\n    ],\n    [\n        \"refMode\",\n        \"A1\"\n    ]\n];\n/* 18.2.3 (CT_CustomWorkbookView) Defaults */ /*var CustomWBViewDef = [\n\t['autoUpdate', 'false'],\n\t['changesSavedWin', 'false'],\n\t['includeHiddenRowCol', 'true'],\n\t['includePrintSettings', 'true'],\n\t['maximized', 'false'],\n\t['minimized', 'false'],\n\t['onlySync', 'false'],\n\t['personalView', 'false'],\n\t['showComments', 'commIndicator'],\n\t['showFormulaBar', 'true'],\n\t['showHorizontalScroll', 'true'],\n\t['showObjects', 'all'],\n\t['showSheetTabs', 'true'],\n\t['showStatusbar', 'true'],\n\t['showVerticalScroll', 'true'],\n\t['tabRatio', '600'],\n\t['xWindow', '0'],\n\t['yWindow', '0']\n];*/ function push_defaults_array(target, defaults) {\n    for(var j = 0; j != target.length; ++j){\n        var w = target[j];\n        for(var i = 0; i != defaults.length; ++i){\n            var z = defaults[i];\n            if (w[z[0]] == null) w[z[0]] = z[1];\n            else switch(z[2]){\n                case \"bool\":\n                    if (typeof w[z[0]] == \"string\") w[z[0]] = parsexmlbool(w[z[0]]);\n                    break;\n                case \"int\":\n                    if (typeof w[z[0]] == \"string\") w[z[0]] = parseInt(w[z[0]], 10);\n                    break;\n            }\n        }\n    }\n}\nfunction push_defaults(target, defaults) {\n    for(var i = 0; i != defaults.length; ++i){\n        var z = defaults[i];\n        if (target[z[0]] == null) target[z[0]] = z[1];\n        else switch(z[2]){\n            case \"bool\":\n                if (typeof target[z[0]] == \"string\") target[z[0]] = parsexmlbool(target[z[0]]);\n                break;\n            case \"int\":\n                if (typeof target[z[0]] == \"string\") target[z[0]] = parseInt(target[z[0]], 10);\n                break;\n        }\n    }\n}\nfunction parse_wb_defaults(wb) {\n    push_defaults(wb.WBProps, WBPropsDef);\n    push_defaults(wb.CalcPr, CalcPrDef);\n    push_defaults_array(wb.WBView, WBViewDef);\n    push_defaults_array(wb.Sheets, SheetDef);\n    _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);\n}\nfunction safe1904(wb /*:Workbook*/ ) /*:string*/ {\n    /* TODO: store date1904 somewhere else */ if (!wb.Workbook) return \"false\";\n    if (!wb.Workbook.WBProps) return \"false\";\n    return parsexmlbool(wb.Workbook.WBProps.date1904) ? \"true\" : \"false\";\n}\nvar badchars = /*#__PURE__*/ \"][*?/\\\\\".split(\"\");\nfunction check_ws_name(n /*:string*/ , safe /*:?boolean*/ ) /*:boolean*/ {\n    if (n.length > 31) {\n        if (safe) return false;\n        throw new Error(\"Sheet names cannot exceed 31 chars\");\n    }\n    var _good = true;\n    badchars.forEach(function(c) {\n        if (n.indexOf(c) == -1) return;\n        if (!safe) throw new Error(\"Sheet name cannot contain : \\\\ / ? * [ ]\");\n        _good = false;\n    });\n    return _good;\n}\nfunction check_wb_names(N, S, codes) {\n    N.forEach(function(n, i) {\n        check_ws_name(n);\n        for(var j = 0; j < i; ++j)if (n == N[j]) throw new Error(\"Duplicate Sheet Name: \" + n);\n        if (codes) {\n            var cn = S && S[i] && S[i].CodeName || n;\n            if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error(\"Bad Code Name: Worksheet\" + cn);\n        }\n    });\n}\nfunction check_wb(wb) {\n    if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error(\"Invalid Workbook\");\n    if (!wb.SheetNames.length) throw new Error(\"Workbook is empty\");\n    var Sheets = wb.Workbook && wb.Workbook.Sheets || [];\n    check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);\n    for(var i = 0; i < wb.SheetNames.length; ++i)check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);\n/* TODO: validate workbook */ }\n/* 18.2 Workbook */ var wbnsregex = /<\\w+:workbook/;\nfunction parse_wb_xml(data, opts) /*:WorkbookFile*/ {\n    if (!data) throw new Error(\"Could not find file\");\n    var wb = /*::(*/ {\n        AppVersion: {},\n        WBProps: {},\n        WBView: [],\n        Sheets: [],\n        CalcPr: {},\n        Names: [],\n        xmlns: \"\"\n    } /*::)*/ ;\n    var pass = false, xmlns = \"xmlns\";\n    var dname = {}, dnstart = 0;\n    data.replace(tagregex, function xml_wb(x, idx) {\n        var y /*:any*/  = parsexmltag(x);\n        switch(strip_ns(y[0])){\n            case \"<?xml\":\n                break;\n            /* 18.2.27 workbook CT_Workbook 1 */ case \"<workbook\":\n                if (x.match(wbnsregex)) xmlns = \"xmlns\" + x.match(/<(\\w+):/)[1];\n                wb.xmlns = y[xmlns];\n                break;\n            case \"</workbook>\":\n                break;\n            /* 18.2.13 fileVersion CT_FileVersion ? */ case \"<fileVersion\":\n                delete y[0];\n                wb.AppVersion = y;\n                break;\n            case \"<fileVersion/>\":\n            case \"</fileVersion>\":\n                break;\n            /* 18.2.12 fileSharing CT_FileSharing ? */ case \"<fileSharing\":\n                break;\n            case \"<fileSharing/>\":\n                break;\n            /* 18.2.28 workbookPr CT_WorkbookPr ? */ case \"<workbookPr\":\n            case \"<workbookPr/>\":\n                WBPropsDef.forEach(function(w) {\n                    if (y[w[0]] == null) return;\n                    switch(w[2]){\n                        case \"bool\":\n                            wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);\n                            break;\n                        case \"int\":\n                            wb.WBProps[w[0]] = parseInt(y[w[0]], 10);\n                            break;\n                        default:\n                            wb.WBProps[w[0]] = y[w[0]];\n                    }\n                });\n                if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);\n                break;\n            case \"</workbookPr>\":\n                break;\n            /* 18.2.29 workbookProtection CT_WorkbookProtection ? */ case \"<workbookProtection\":\n                break;\n            case \"<workbookProtection/>\":\n                break;\n            /* 18.2.1  bookViews CT_BookViews ? */ case \"<bookViews\":\n            case \"<bookViews>\":\n            case \"</bookViews>\":\n                break;\n            /* 18.2.30   workbookView CT_BookView + */ case \"<workbookView\":\n            case \"<workbookView/>\":\n                delete y[0];\n                wb.WBView.push(y);\n                break;\n            case \"</workbookView>\":\n                break;\n            /* 18.2.20 sheets CT_Sheets 1 */ case \"<sheets\":\n            case \"<sheets>\":\n            case \"</sheets>\":\n                break; // aggregate sheet\n            /* 18.2.19   sheet CT_Sheet + */ case \"<sheet\":\n                switch(y.state){\n                    case \"hidden\":\n                        y.Hidden = 1;\n                        break;\n                    case \"veryHidden\":\n                        y.Hidden = 2;\n                        break;\n                    default:\n                        y.Hidden = 0;\n                }\n                delete y.state;\n                y.name = unescapexml(utf8read(y.name));\n                delete y[0];\n                wb.Sheets.push(y);\n                break;\n            case \"</sheet>\":\n                break;\n            /* 18.2.15 functionGroups CT_FunctionGroups ? */ case \"<functionGroups\":\n            case \"<functionGroups/>\":\n                break;\n            /* 18.2.14   functionGroup CT_FunctionGroup + */ case \"<functionGroup\":\n                break;\n            /* 18.2.9  externalReferences CT_ExternalReferences ? */ case \"<externalReferences\":\n            case \"</externalReferences>\":\n            case \"<externalReferences>\":\n                break;\n            /* 18.2.8    externalReference CT_ExternalReference + */ case \"<externalReference\":\n                break;\n            /* 18.2.6  definedNames CT_DefinedNames ? */ case \"<definedNames/>\":\n                break;\n            case \"<definedNames>\":\n            case \"<definedNames\":\n                pass = true;\n                break;\n            case \"</definedNames>\":\n                pass = false;\n                break;\n            /* 18.2.5    definedName CT_DefinedName + */ case \"<definedName\":\n                {\n                    dname = {};\n                    dname.Name = utf8read(y.name);\n                    if (y.comment) dname.Comment = y.comment;\n                    if (y.localSheetId) dname.Sheet = +y.localSheetId;\n                    if (parsexmlbool(y.hidden || \"0\")) dname.Hidden = true;\n                    dnstart = idx + x.length;\n                }\n                break;\n            case \"</definedName>\":\n                {\n                    dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));\n                    wb.Names.push(dname);\n                }\n                break;\n            case \"<definedName/>\":\n                break;\n            /* 18.2.2  calcPr CT_CalcPr ? */ case \"<calcPr\":\n                delete y[0];\n                wb.CalcPr = y;\n                break;\n            case \"<calcPr/>\":\n                delete y[0];\n                wb.CalcPr = y;\n                break;\n            case \"</calcPr>\":\n                break;\n            /* 18.2.16 oleSize CT_OleSize ? (ref required) */ case \"<oleSize\":\n                break;\n            /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */ case \"<customWorkbookViews>\":\n            case \"</customWorkbookViews>\":\n            case \"<customWorkbookViews\":\n                break;\n            /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */ case \"<customWorkbookView\":\n            case \"</customWorkbookView>\":\n                break;\n            /* 18.2.18 pivotCaches CT_PivotCaches ? */ case \"<pivotCaches>\":\n            case \"</pivotCaches>\":\n            case \"<pivotCaches\":\n                break;\n            /* 18.2.17 pivotCache CT_PivotCache ? */ case \"<pivotCache\":\n                break;\n            /* 18.2.21 smartTagPr CT_SmartTagPr ? */ case \"<smartTagPr\":\n            case \"<smartTagPr/>\":\n                break;\n            /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */ case \"<smartTagTypes\":\n            case \"<smartTagTypes>\":\n            case \"</smartTagTypes>\":\n                break;\n            /* 18.2.22 smartTagType CT_SmartTagType ? */ case \"<smartTagType\":\n                break;\n            /* 18.2.24 webPublishing CT_WebPublishing ? */ case \"<webPublishing\":\n            case \"<webPublishing/>\":\n                break;\n            /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */ case \"<fileRecoveryPr\":\n            case \"<fileRecoveryPr/>\":\n                break;\n            /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */ case \"<webPublishObjects>\":\n            case \"<webPublishObjects\":\n            case \"</webPublishObjects>\":\n                break;\n            /* 18.2.25 webPublishObject CT_WebPublishObject ? */ case \"<webPublishObject\":\n                break;\n            /* 18.2.10 extLst CT_ExtensionList ? */ case \"<extLst\":\n            case \"<extLst>\":\n            case \"</extLst>\":\n            case \"<extLst/>\":\n                break;\n            /* 18.2.7  ext CT_Extension + */ case \"<ext\":\n                pass = true;\n                break; //TODO: check with versions of excel\n            case \"</ext>\":\n                pass = false;\n                break;\n            /* Others */ case \"<ArchID\":\n                break;\n            case \"<AlternateContent\":\n            case \"<AlternateContent>\":\n                pass = true;\n                break;\n            case \"</AlternateContent>\":\n                pass = false;\n                break;\n            /* TODO */ case \"<revisionPtr\":\n                break;\n            default:\n                if (!pass && opts.WTF) throw new Error(\"unrecognized \" + y[0] + \" in workbook\");\n        }\n        return x;\n    });\n    if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error(\"Unknown Namespace: \" + wb.xmlns);\n    parse_wb_defaults(wb);\n    return wb;\n}\nfunction write_wb_xml(wb /*:Workbook*/  /*::, opts:?WriteOpts*/ ) /*:string*/ {\n    var o = [\n        XML_HEADER\n    ];\n    o[o.length] = writextag(\"workbook\", null, {\n        \"xmlns\": XMLNS_main[0],\n        //'xmlns:mx': XMLNS.mx,\n        //'xmlns:s': XMLNS_main[0],\n        \"xmlns:r\": XMLNS.r\n    });\n    var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;\n    /* fileVersion */ /* fileSharing */ var workbookPr /*:any*/  = {\n        codeName: \"ThisWorkbook\"\n    } /*:any*/ ;\n    if (wb.Workbook && wb.Workbook.WBProps) {\n        WBPropsDef.forEach(function(x) {\n            /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw \"unreachable\"; */ if (wb.Workbook.WBProps[x[0]] == null) return;\n            if (wb.Workbook.WBProps[x[0]] == x[1]) return;\n            workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];\n        });\n        /*:: if(!wb.Workbook || !wb.Workbook.WBProps) throw \"unreachable\"; */ if (wb.Workbook.WBProps.CodeName) {\n            workbookPr.codeName = wb.Workbook.WBProps.CodeName;\n            delete workbookPr.CodeName;\n        }\n    }\n    o[o.length] = writextag(\"workbookPr\", null, workbookPr);\n    /* workbookProtection */ var sheets = wb.Workbook && wb.Workbook.Sheets || [];\n    var i = 0;\n    /* bookViews only written if first worksheet is hidden */ if (sheets && sheets[0] && !!sheets[0].Hidden) {\n        o[o.length] = \"<bookViews>\";\n        for(i = 0; i != wb.SheetNames.length; ++i){\n            if (!sheets[i]) break;\n            if (!sheets[i].Hidden) break;\n        }\n        if (i == wb.SheetNames.length) i = 0;\n        o[o.length] = '<workbookView firstSheet=\"' + i + '\" activeTab=\"' + i + '\"/>';\n        o[o.length] = \"</bookViews>\";\n    }\n    o[o.length] = \"<sheets>\";\n    for(i = 0; i != wb.SheetNames.length; ++i){\n        var sht = {\n            name: escapexml(wb.SheetNames[i].slice(0, 31))\n        } /*:any*/ ;\n        sht.sheetId = \"\" + (i + 1);\n        sht[\"r:id\"] = \"rId\" + (i + 1);\n        if (sheets[i]) switch(sheets[i].Hidden){\n            case 1:\n                sht.state = \"hidden\";\n                break;\n            case 2:\n                sht.state = \"veryHidden\";\n                break;\n        }\n        o[o.length] = writextag(\"sheet\", null, sht);\n    }\n    o[o.length] = \"</sheets>\";\n    /* functionGroups */ /* externalReferences */ if (write_names) {\n        o[o.length] = \"<definedNames>\";\n        if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {\n            var d /*:any*/  = {\n                name: n.Name\n            };\n            if (n.Comment) d.comment = n.Comment;\n            if (n.Sheet != null) d.localSheetId = \"\" + n.Sheet;\n            if (n.Hidden) d.hidden = \"1\";\n            if (!n.Ref) return;\n            o[o.length] = writextag(\"definedName\", escapexml(n.Ref), d);\n        });\n        o[o.length] = \"</definedNames>\";\n    }\n    /* calcPr */ /* oleSize */ /* customWorkbookViews */ /* pivotCaches */ /* smartTagPr */ /* smartTagTypes */ /* webPublishing */ /* fileRecoveryPr */ /* webPublishObjects */ /* extLst */ if (o.length > 2) {\n        o[o.length] = \"</workbook>\";\n        o[1] = o[1].replace(\"/>\", \">\");\n    }\n    return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.304 BrtBundleSh */ function parse_BrtBundleSh(data, length /*:number*/ ) {\n    var z = {};\n    z.Hidden = data.read_shift(4); //hsState ST_SheetState\n    z.iTabID = data.read_shift(4);\n    z.strRelID = parse_RelID(data, length - 8);\n    z.name = parse_XLWideString(data);\n    return z;\n}\nfunction write_BrtBundleSh(data, o) {\n    if (!o) o = new_buf(127);\n    o.write_shift(4, data.Hidden);\n    o.write_shift(4, data.iTabID);\n    write_RelID(data.strRelID, o);\n    write_XLWideString(data.name.slice(0, 31), o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.815 BrtWbProp */ function parse_BrtWbProp(data, length) /*:WBProps*/ {\n    var o /*:WBProps*/  = {} /*:any*/ ;\n    var flags = data.read_shift(4);\n    o.defaultThemeVersion = data.read_shift(4);\n    var strName = length > 8 ? parse_XLWideString(data) : \"\";\n    if (strName.length > 0) o.CodeName = strName;\n    o.autoCompressPictures = !!(flags & 0x10000);\n    o.backupFile = !!(flags & 0x40);\n    o.checkCompatibility = !!(flags & 0x1000);\n    o.date1904 = !!(flags & 0x01);\n    o.filterPrivacy = !!(flags & 0x08);\n    o.hidePivotFieldList = !!(flags & 0x400);\n    o.promptedSolutions = !!(flags & 0x10);\n    o.publishItems = !!(flags & 0x800);\n    o.refreshAllConnections = !!(flags & 0x40000);\n    o.saveExternalLinkValues = !!(flags & 0x80);\n    o.showBorderUnselectedTables = !!(flags & 0x04);\n    o.showInkAnnotation = !!(flags & 0x20);\n    o.showObjects = [\n        \"all\",\n        \"placeholders\",\n        \"none\"\n    ][flags >> 13 & 0x03];\n    o.showPivotChartFilter = !!(flags & 0x8000);\n    o.updateLinks = [\n        \"userSet\",\n        \"never\",\n        \"always\"\n    ][flags >> 8 & 0x03];\n    return o;\n}\nfunction write_BrtWbProp(data /*:?WBProps*/ , o) {\n    if (!o) o = new_buf(72);\n    var flags = 0;\n    if (data) {\n        /* TODO: mirror parse_BrtWbProp fields */ if (data.filterPrivacy) flags |= 0x08;\n    }\n    o.write_shift(4, flags);\n    o.write_shift(4, 0);\n    write_XLSBCodeName(data && data.CodeName || \"ThisWorkbook\", o);\n    return o.slice(0, o.l);\n}\nfunction parse_BrtFRTArchID$(data, length) {\n    var o = {};\n    data.read_shift(4);\n    o.ArchID = data.read_shift(4);\n    data.l += length - 8;\n    return o;\n}\n/* [MS-XLSB] 2.4.687 BrtName */ function parse_BrtName(data, length, opts) {\n    var end = data.l + length;\n    data.l += 4; //var flags = data.read_shift(4);\n    data.l += 1; //var chKey = data.read_shift(1);\n    var itab = data.read_shift(4);\n    var name = parse_XLNameWideString(data);\n    var formula = parse_XLSBNameParsedFormula(data, 0, opts);\n    var comment = parse_XLNullableWideString(data);\n    //if(0 /* fProc */) {\n    // unusedstring1: XLNullableWideString\n    // description: XLNullableWideString\n    // helpTopic: XLNullableWideString\n    // unusedstring2: XLNullableWideString\n    //}\n    data.l = end;\n    var out = {\n        Name: name,\n        Ptg: formula\n    } /*:any*/ ;\n    if (itab < 0xFFFFFFF) out.Sheet = itab;\n    if (comment) out.Comment = comment;\n    return out;\n}\n/* [MS-XLSB] 2.1.7.61 Workbook */ function parse_wb_bin(data, opts) /*:WorkbookFile*/ {\n    var wb = {\n        AppVersion: {},\n        WBProps: {},\n        WBView: [],\n        Sheets: [],\n        CalcPr: {},\n        xmlns: \"\"\n    };\n    var state /*:Array<string>*/  = [];\n    var pass = false;\n    if (!opts) opts = {};\n    opts.biff = 12;\n    var Names = [];\n    var supbooks = [\n        []\n    ];\n    supbooks.SheetNames = [];\n    supbooks.XTI = [];\n    XLSBRecordEnum[0x0010] = {\n        n: \"BrtFRTArchID$\",\n        f: parse_BrtFRTArchID$\n    };\n    recordhopper(data, function hopper_wb(val, R, RT) {\n        switch(RT){\n            case 0x009C:\n                /* 'BrtBundleSh' */ supbooks.SheetNames.push(val.name);\n                wb.Sheets.push(val);\n                break;\n            case 0x0099:\n                /* 'BrtWbProp' */ wb.WBProps = val;\n                break;\n            case 0x0027:\n                /* 'BrtName' */ if (val.Sheet != null) opts.SID = val.Sheet;\n                val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);\n                delete opts.SID;\n                delete val.Ptg;\n                Names.push(val);\n                break;\n            case 0x040C:\n                break;\n            case 0x0165:\n            /* 'BrtSupSelf' */ case 0x0166:\n            /* 'BrtSupSame' */ case 0x0163:\n            /* 'BrtSupBookSrc' */ case 0x029B:\n                /* 'BrtSupAddin' */ if (!supbooks[0].length) supbooks[0] = [\n                    RT,\n                    val\n                ];\n                else supbooks.push([\n                    RT,\n                    val\n                ]);\n                supbooks[supbooks.length - 1].XTI = [];\n                break;\n            case 0x016A:\n                /* 'BrtExternSheet' */ if (supbooks.length === 0) {\n                    supbooks[0] = [];\n                    supbooks[0].XTI = [];\n                }\n                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);\n                supbooks.XTI = supbooks.XTI.concat(val);\n                break;\n            case 0x0169:\n                break;\n            case 0x0817:\n            /* 'BrtAbsPath15' */ case 0x009E:\n            /* 'BrtBookView' */ case 0x008F:\n            /* 'BrtBeginBundleShs' */ case 0x0298:\n            /* 'BrtBeginFnGroup' */ case 0x0161:\n                break;\n            /* case 'BrtModelTimeGroupingCalcCol' */ case 0x0C00:\n            /* 'BrtUid' */ case 0x0C01:\n            /* 'BrtRevisionPtr' */ case 0x0216:\n            /* 'BrtBookProtection' */ case 0x02A5:\n            /* 'BrtBookProtectionIso' */ case 0x009D:\n            /* 'BrtCalcProp' */ case 0x0262:\n            /* 'BrtCrashRecErr' */ case 0x0802:\n            /* 'BrtDecoupledPivotCacheID' */ case 0x009B:\n            /* 'BrtFileRecover' */ case 0x0224:\n            /* 'BrtFileSharing' */ case 0x02A4:\n            /* 'BrtFileSharingIso' */ case 0x0080:\n            /* 'BrtFileVersion' */ case 0x0299:\n            /* 'BrtFnGroup' */ case 0x0850:\n            /* 'BrtModelRelationship' */ case 0x084D:\n            /* 'BrtModelTable' */ case 0x0225:\n            /* 'BrtOleSize' */ case 0x0805:\n            /* 'BrtPivotTableRef' */ case 0x0254:\n            /* 'BrtSmartTagType' */ case 0x081C:\n            /* 'BrtTableSlicerCacheID' */ case 0x081B:\n            /* 'BrtTableSlicerCacheIDs' */ case 0x0822:\n            /* 'BrtTimelineCachePivotCacheID' */ case 0x018D:\n            /* 'BrtUserBookView' */ case 0x009A:\n            /* 'BrtWbFactoid' */ case 0x045D:\n            /* 'BrtWbProp14' */ case 0x0229:\n            /* 'BrtWebOpt' */ case 0x082B:\n                break;\n            case 0x0023:\n                /* 'BrtFRTBegin' */ state.push(RT);\n                pass = true;\n                break;\n            case 0x0024:\n                /* 'BrtFRTEnd' */ state.pop();\n                pass = false;\n                break;\n            case 0x0025:\n                /* 'BrtACBegin' */ state.push(RT);\n                pass = true;\n                break;\n            case 0x0026:\n                /* 'BrtACEnd' */ state.pop();\n                pass = false;\n                break;\n            case 0x0010:\n                break;\n            default:\n                if (R.T) {} else if (!pass || opts.WTF && state[state.length - 1] != 0x0025 /* BrtACBegin */  && state[state.length - 1] != 0x0023 /* BrtFRTBegin */ ) throw new Error(\"Unexpected record 0x\" + RT.toString(16));\n        }\n    }, opts);\n    parse_wb_defaults(wb);\n    // $FlowIgnore\n    wb.Names = Names;\n    wb /*:any*/ .supbooks = supbooks;\n    return wb;\n}\nfunction write_BUNDLESHS(ba, wb /*::, opts*/ ) {\n    write_record(ba, 0x008F /* BrtBeginBundleShs */ );\n    for(var idx = 0; idx != wb.SheetNames.length; ++idx){\n        var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;\n        var d = {\n            Hidden: viz,\n            iTabID: idx + 1,\n            strRelID: \"rId\" + (idx + 1),\n            name: wb.SheetNames[idx]\n        };\n        write_record(ba, 0x009C /* BrtBundleSh */ , write_BrtBundleSh(d));\n    }\n    write_record(ba, 0x0090 /* BrtEndBundleShs */ );\n}\n/* [MS-XLSB] 2.4.649 BrtFileVersion */ function write_BrtFileVersion(data, o) {\n    if (!o) o = new_buf(127);\n    for(var i = 0; i != 4; ++i)o.write_shift(4, 0);\n    write_XLWideString(\"SheetJS\", o);\n    write_XLWideString(XLSX.version, o);\n    write_XLWideString(XLSX.version, o);\n    write_XLWideString(\"7262\", o);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\n/* [MS-XLSB] 2.4.301 BrtBookView */ function write_BrtBookView(idx, o) {\n    if (!o) o = new_buf(29);\n    o.write_shift(-4, 0);\n    o.write_shift(-4, 460);\n    o.write_shift(4, 28800);\n    o.write_shift(4, 17600);\n    o.write_shift(4, 500);\n    o.write_shift(4, idx);\n    o.write_shift(4, idx);\n    var flags = 0x78;\n    o.write_shift(1, flags);\n    return o.length > o.l ? o.slice(0, o.l) : o;\n}\nfunction write_BOOKVIEWS(ba, wb /*::, opts*/ ) {\n    /* required if hidden tab appears before visible tab */ if (!wb.Workbook || !wb.Workbook.Sheets) return;\n    var sheets = wb.Workbook.Sheets;\n    var i = 0, vistab = -1, hidden = -1;\n    for(; i < sheets.length; ++i){\n        if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;\n        else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i;\n    }\n    if (hidden > vistab) return;\n    write_record(ba, 0x0087 /* BrtBeginBookViews */ );\n    write_record(ba, 0x009E /* BrtBookView */ , write_BrtBookView(vistab));\n    /* 1*(BrtBookView *FRT) */ write_record(ba, 0x0088 /* BrtEndBookViews */ );\n}\n/* [MS-XLSB] 2.4.305 BrtCalcProp */ /*function write_BrtCalcProp(data, o) {\n\tif(!o) o = new_buf(26);\n\to.write_shift(4,0); // force recalc\n\to.write_shift(4,1);\n\to.write_shift(4,0);\n\twrite_Xnum(0, o);\n\to.write_shift(-4, 1023);\n\to.write_shift(1, 0x33);\n\to.write_shift(1, 0x00);\n\treturn o;\n}*/ /* [MS-XLSB] 2.4.646 BrtFileRecover */ /*function write_BrtFileRecover(data, o) {\n\tif(!o) o = new_buf(1);\n\to.write_shift(1,0);\n\treturn o;\n}*/ /* [MS-XLSB] 2.1.7.61 Workbook */ function write_wb_bin(wb, opts) {\n    var ba = buf_array();\n    write_record(ba, 0x0083 /* BrtBeginBook */ );\n    write_record(ba, 0x0080 /* BrtFileVersion */ , write_BrtFileVersion());\n    /* [[BrtFileSharingIso] BrtFileSharing] */ write_record(ba, 0x0099 /* BrtWbProp */ , write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));\n    /* [ACABSPATH] */ /* [[BrtBookProtectionIso] BrtBookProtection] */ write_BOOKVIEWS(ba, wb, opts);\n    write_BUNDLESHS(ba, wb, opts);\n    /* [FNGROUP] */ /* [EXTERNALS] */ /* *BrtName */ /* write_record(ba, 0x009D BrtCalcProp, write_BrtCalcProp()); */ /* [BrtOleSize] */ /* *(BrtUserBookView *FRT) */ /* [PIVOTCACHEIDS] */ /* [BrtWbFactoid] */ /* [SMARTTAGTYPES] */ /* [BrtWebOpt] */ /* write_record(ba, 0x009B BrtFileRecover, write_BrtFileRecover()); */ /* [WEBPUBITEMS] */ /* [CRERRS] */ /* FRTWORKBOOK */ write_record(ba, 0x0084 /* BrtEndBook */ );\n    return ba.end();\n}\nfunction parse_wb(data, name /*:string*/ , opts) /*:WorkbookFile*/ {\n    if (name.slice(-4) === \".bin\") return parse_wb_bin(data /*:any*/ , opts);\n    return parse_wb_xml(data /*:any*/ , opts);\n}\nfunction parse_ws(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {\n    if (name.slice(-4) === \".bin\") return parse_ws_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n    return parse_ws_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n}\nfunction parse_cs(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {\n    if (name.slice(-4) === \".bin\") return parse_cs_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n    return parse_cs_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n}\nfunction parse_ms(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {\n    if (name.slice(-4) === \".bin\") return parse_ms_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n    return parse_ms_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n}\nfunction parse_ds(data, name /*:string*/ , idx /*:number*/ , opts, rels, wb, themes, styles) /*:Worksheet*/ {\n    if (name.slice(-4) === \".bin\") return parse_ds_bin(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n    return parse_ds_xml(data /*:any*/ , opts, idx, rels, wb, themes, styles);\n}\nfunction parse_sty(data, name /*:string*/ , themes, opts) {\n    if (name.slice(-4) === \".bin\") return parse_sty_bin(data /*:any*/ , themes, opts);\n    return parse_sty_xml(data /*:any*/ , themes, opts);\n}\nfunction parse_theme(data /*:string*/ , name /*:string*/ , opts) {\n    return parse_theme_xml(data, opts);\n}\nfunction parse_sst(data, name /*:string*/ , opts) /*:SST*/ {\n    if (name.slice(-4) === \".bin\") return parse_sst_bin(data /*:any*/ , opts);\n    return parse_sst_xml(data /*:any*/ , opts);\n}\nfunction parse_cmnt(data, name /*:string*/ , opts) /*:Array<RawComment>*/ {\n    if (name.slice(-4) === \".bin\") return parse_comments_bin(data /*:any*/ , opts);\n    return parse_comments_xml(data /*:any*/ , opts);\n}\nfunction parse_cc(data, name /*:string*/ , opts) {\n    if (name.slice(-4) === \".bin\") return parse_cc_bin(data /*:any*/ , name, opts);\n    return parse_cc_xml(data /*:any*/ , name, opts);\n}\nfunction parse_xlink(data, rel, name /*:string*/ , opts) {\n    if (name.slice(-4) === \".bin\") return parse_xlink_bin(data /*:any*/ , rel, name, opts);\n    return parse_xlink_xml(data /*:any*/ , rel, name, opts);\n}\nfunction parse_xlmeta(data, name /*:string*/ , opts) {\n    if (name.slice(-4) === \".bin\") return parse_xlmeta_bin(data /*:any*/ , name, opts);\n    return parse_xlmeta_xml(data /*:any*/ , name, opts);\n}\nfunction write_wb(wb, name /*:string*/ , opts) {\n    return (name.slice(-4) === \".bin\" ? write_wb_bin : write_wb_xml)(wb, opts);\n}\nfunction write_ws(data /*:number*/ , name /*:string*/ , opts, wb /*:Workbook*/ , rels) {\n    return (name.slice(-4) === \".bin\" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);\n}\n// eslint-disable-next-line no-unused-vars\nfunction write_cs(data /*:number*/ , name /*:string*/ , opts, wb /*:Workbook*/ , rels) {\n    return (name.slice(-4) === \".bin\" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);\n}\nfunction write_sty(data, name /*:string*/ , opts) {\n    return (name.slice(-4) === \".bin\" ? write_sty_bin : write_sty_xml)(data, opts);\n}\nfunction write_sst(data /*:SST*/ , name /*:string*/ , opts) {\n    return (name.slice(-4) === \".bin\" ? write_sst_bin : write_sst_xml)(data, opts);\n}\nfunction write_cmnt(data /*:Array<any>*/ , name /*:string*/ , opts) {\n    return (name.slice(-4) === \".bin\" ? write_comments_bin : write_comments_xml)(data, opts);\n}\n/*\nfunction write_cc(data, name:string, opts) {\n\treturn (name.slice(-4)===\".bin\" ? write_cc_bin : write_cc_xml)(data, opts);\n}\n*/ function write_xlmeta(name /*:string*/ ) {\n    return (name.slice(-4) === \".bin\" ? write_xlmeta_bin : write_xlmeta_xml)();\n}\nvar attregexg2 = /([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\nvar attregex2 = /([\\w:]+)=((?:\")(?:[^\"]*)(?:\")|(?:')(?:[^']*)(?:'))/;\nfunction xlml_parsexmltag(tag /*:string*/ , skip_root /*:?boolean*/ ) {\n    var words = tag.split(/\\s+/);\n    var z /*:any*/  = [];\n    if (!skip_root) z[0] = words[0];\n    if (words.length === 1) return z;\n    var m = tag.match(attregexg2), y, j, w, i;\n    if (m) for(i = 0; i != m.length; ++i){\n        y = m[i].match(attregex2);\n        /*:: if(!y || !y[2]) continue; */ if ((j = y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);\n        else {\n            if (y[1].slice(0, 6) === \"xmlns:\") w = \"xmlns\" + y[1].slice(6);\n            else w = y[1].slice(j + 1);\n            z[w] = y[2].slice(1, y[2].length - 1);\n        }\n    }\n    return z;\n}\nfunction xlml_parsexmltagobj(tag /*:string*/ ) {\n    var words = tag.split(/\\s+/);\n    var z = {};\n    if (words.length === 1) return z;\n    var m = tag.match(attregexg2), y, j, w, i;\n    if (m) for(i = 0; i != m.length; ++i){\n        y = m[i].match(attregex2);\n        /*:: if(!y || !y[2]) continue; */ if ((j = y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);\n        else {\n            if (y[1].slice(0, 6) === \"xmlns:\") w = \"xmlns\" + y[1].slice(6);\n            else w = y[1].slice(j + 1);\n            z[w] = y[2].slice(1, y[2].length - 1);\n        }\n    }\n    return z;\n}\n// ----\n/* map from xlml named formats to SSF TODO: localize */ var XLMLFormatMap /*: {[string]:string}*/ ;\nfunction xlml_format(format, value) /*:string*/ {\n    var fmt = XLMLFormatMap[format] || unescapexml(format);\n    if (fmt === \"General\") return SSF_general(value);\n    return SSF_format(fmt, value);\n}\nfunction xlml_set_custprop(Custprops, key, cp, val /*:string*/ ) {\n    var oval /*:any*/  = val;\n    switch((cp[0].match(/dt:dt=\"([\\w.]+)\"/) || [\n        \"\",\n        \"\"\n    ])[1]){\n        case \"boolean\":\n            oval = parsexmlbool(val);\n            break;\n        case \"i2\":\n        case \"int\":\n            oval = parseInt(val, 10);\n            break;\n        case \"r4\":\n        case \"float\":\n            oval = parseFloat(val);\n            break;\n        case \"date\":\n        case \"dateTime.tz\":\n            oval = parseDate(val);\n            break;\n        case \"i8\":\n        case \"string\":\n        case \"fixed\":\n        case \"uuid\":\n        case \"bin.base64\":\n            break;\n        default:\n            throw new Error(\"bad custprop:\" + cp[0]);\n    }\n    Custprops[unescapexml(key)] = oval;\n}\nfunction safe_format_xlml(cell /*:Cell*/ , nf, o) {\n    if (cell.t === \"z\") return;\n    if (!o || o.cellText !== false) try {\n        if (cell.t === \"e\") {\n            cell.w = cell.w || BErr[cell.v];\n        } else if (nf === \"General\") {\n            if (cell.t === \"n\") {\n                if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);\n                else cell.w = SSF_general_num(cell.v);\n            } else cell.w = SSF_general(cell.v);\n        } else cell.w = xlml_format(nf || \"General\", cell.v);\n    } catch (e) {\n        if (o.WTF) throw e;\n    }\n    try {\n        var z = XLMLFormatMap[nf] || nf || \"General\";\n        if (o.cellNF) cell.z = z;\n        if (o.cellDates && cell.t == \"n\" && fmt_is_date(z)) {\n            var _d = SSF_parse_date_code(cell.v);\n            if (_d) {\n                cell.t = \"d\";\n                cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);\n            }\n        }\n    } catch (e) {\n        if (o.WTF) throw e;\n    }\n}\nfunction process_style_xlml(styles, stag, opts) {\n    if (opts.cellStyles) {\n        if (stag.Interior) {\n            var I = stag.Interior;\n            if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;\n        }\n    }\n    styles[stag.ID] = stag;\n}\n/* TODO: there must exist some form of OSP-blessed spec */ function parse_xlml_data(xml, ss, data, cell /*:any*/ , base, styles, csty, row, arrayf, o) {\n    var nf = \"General\", sid = cell.StyleID, S = {};\n    o = o || {};\n    var interiors = [];\n    var i = 0;\n    if (sid === undefined && row) sid = row.StyleID;\n    if (sid === undefined && csty) sid = csty.StyleID;\n    while(styles[sid] !== undefined){\n        if (styles[sid].nf) nf = styles[sid].nf;\n        if (styles[sid].Interior) interiors.push(styles[sid].Interior);\n        if (!styles[sid].Parent) break;\n        sid = styles[sid].Parent;\n    }\n    switch(data.Type){\n        case \"Boolean\":\n            cell.t = \"b\";\n            cell.v = parsexmlbool(xml);\n            break;\n        case \"String\":\n            cell.t = \"s\";\n            cell.r = xlml_fixstr(unescapexml(xml));\n            cell.v = xml.indexOf(\"<\") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, \"\") : cell.r; // todo: BR etc\n            break;\n        case \"DateTime\":\n            if (xml.slice(-1) != \"Z\") xml += \"Z\";\n            cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n            if (cell.v !== cell.v) cell.v = unescapexml(xml);\n            else if (cell.v < 60) cell.v = cell.v - 1;\n            if (!nf || nf == \"General\") nf = \"yyyy-mm-dd\";\n        /* falls through */ case \"Number\":\n            if (cell.v === undefined) cell.v = +xml;\n            if (!cell.t) cell.t = \"n\";\n            break;\n        case \"Error\":\n            cell.t = \"e\";\n            cell.v = RBErr[xml];\n            if (o.cellText !== false) cell.w = xml;\n            break;\n        default:\n            if (xml == \"\" && ss == \"\") {\n                cell.t = \"z\";\n            } else {\n                cell.t = \"s\";\n                cell.v = xlml_fixstr(ss || xml);\n            }\n            break;\n    }\n    safe_format_xlml(cell, nf, o);\n    if (o.cellFormula !== false) {\n        if (cell.Formula) {\n            var fstr = unescapexml(cell.Formula);\n            /* strictly speaking, the leading = is required but some writers omit */ if (fstr.charCodeAt(0) == 61 /* = */ ) fstr = fstr.slice(1);\n            cell.f = rc_to_a1(fstr, base);\n            delete cell.Formula;\n            if (cell.ArrayRange == \"RC\") cell.F = rc_to_a1(\"RC:RC\", base);\n            else if (cell.ArrayRange) {\n                cell.F = rc_to_a1(cell.ArrayRange, base);\n                arrayf.push([\n                    safe_decode_range(cell.F),\n                    cell.F\n                ]);\n            }\n        } else {\n            for(i = 0; i < arrayf.length; ++i)if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) {\n                if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1];\n            }\n        }\n    }\n    if (o.cellStyles) {\n        interiors.forEach(function(x) {\n            if (!S.patternType && x.patternType) S.patternType = x.patternType;\n        });\n        cell.s = S;\n    }\n    if (cell.StyleID !== undefined) cell.ixfe = cell.StyleID;\n}\nfunction xlml_clean_comment(comment /*:any*/ ) {\n    comment.t = comment.v || \"\";\n    comment.t = comment.t.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n    comment.v = comment.w = comment.ixfe = undefined;\n}\n/* TODO: Everything */ function parse_xlml_xml(d, _opts) /*:Workbook*/ {\n    var opts = _opts || {};\n    make_ssf();\n    var str = debom(xlml_normalize(d));\n    if (opts.type == \"binary\" || opts.type == \"array\" || opts.type == \"base64\") {\n        if (typeof $cptable !== \"undefined\") str = $cptable.utils.decode(65001, char_codes(str));\n        else str = utf8read(str);\n    }\n    var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;\n    opening = opening.replace(/\".*?\"/g, \"\");\n    if ((opening.indexOf(\">\") & 1023) > Math.min(opening.indexOf(\",\") & 1023, opening.indexOf(\";\") & 1023)) {\n        var _o = dup(opts);\n        _o.type = \"string\";\n        return PRN.to_workbook(str, _o);\n    }\n    if (opening.indexOf(\"<?xml\") == -1) [\n        \"html\",\n        \"table\",\n        \"head\",\n        \"meta\",\n        \"script\",\n        \"style\",\n        \"div\"\n    ].forEach(function(tag) {\n        if (opening.indexOf(\"<\" + tag) >= 0) ishtml = true;\n    });\n    if (ishtml) return html_to_workbook(str, opts);\n    XLMLFormatMap = {\n        \"General Number\": \"General\",\n        \"General Date\": table_fmt[22],\n        \"Long Date\": \"dddd, mmmm dd, yyyy\",\n        \"Medium Date\": table_fmt[15],\n        \"Short Date\": table_fmt[14],\n        \"Long Time\": table_fmt[19],\n        \"Medium Time\": table_fmt[18],\n        \"Short Time\": table_fmt[20],\n        \"Currency\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n        \"Fixed\": table_fmt[2],\n        \"Standard\": table_fmt[4],\n        \"Percent\": table_fmt[10],\n        \"Scientific\": table_fmt[11],\n        \"Yes/No\": '\"Yes\";\"Yes\";\"No\";@',\n        \"True/False\": '\"True\";\"True\";\"False\";@',\n        \"On/Off\": '\"Yes\";\"Yes\";\"No\";@'\n    } /*:any*/ ;\n    var Rn;\n    var state = [], tmp;\n    if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n    var sheets = {}, sheetnames /*:Array<string>*/  = [], cursheet /*:Worksheet*/  = opts.dense ? [] : {}, sheetname = \"\";\n    var cell = {} /*:any*/ , row = {}; // eslint-disable-line no-unused-vars\n    var dtag = xlml_parsexmltag('<Data ss:Type=\"String\">'), didx = 0;\n    var c = 0, r = 0;\n    var refguess /*:Range*/  = {\n        s: {\n            r: 2000000,\n            c: 2000000\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    var styles = {}, stag = {};\n    var ss = \"\", fidx = 0;\n    var merges /*:Array<Range>*/  = [];\n    var Props = {}, Custprops = {}, pidx = 0, cp = [];\n    var comments /*:Array<Comment>*/  = [], comment /*:Comment*/  = {} /*:any*/ ;\n    var cstys = [], csty, seencol = false;\n    var arrayf /*:Array<[Range, string]>*/  = [];\n    var rowinfo /*:Array<RowInfo>*/  = [], rowobj = {}, cc = 0, rr = 0;\n    var Workbook /*:WBWBProps*/  = {\n        Sheets: [],\n        WBProps: {\n            date1904: false\n        }\n    } /*:any*/ , wsprops = {};\n    xlmlregex.lastIndex = 0;\n    str = str.replace(/<!--([\\s\\S]*?)-->/mg, \"\");\n    var raw_Rn3 = \"\";\n    while(Rn = xlmlregex.exec(str))switch(Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()){\n        case \"data\" /*case 'Data'*/ :\n            if (raw_Rn3 == \"data\") {\n                if (Rn[1] === \"/\") {\n                    if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n                } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") state.push([\n                    Rn[3],\n                    true\n                ]);\n                break;\n            }\n            if (state[state.length - 1][1]) break;\n            if (Rn[1] === \"/\") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == /*\"Comment\"*/ \"comment\" ? comment : cell, {\n                c: c,\n                r: r\n            }, styles, cstys[c], row, arrayf, opts);\n            else {\n                ss = \"\";\n                dtag = xlml_parsexmltag(Rn[0]);\n                didx = Rn.index + Rn[0].length;\n            }\n            break;\n        case \"cell\" /*case 'Cell'*/ :\n            if (Rn[1] === \"/\") {\n                if (comments.length > 0) cell.c = comments;\n                if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {\n                    if (opts.dense) {\n                        if (!cursheet[r]) cursheet[r] = [];\n                        cursheet[r][c] = cell;\n                    } else cursheet[encode_col(c) + encode_row(r)] = cell;\n                }\n                if (cell.HRef) {\n                    cell.l = {\n                        Target: unescapexml(cell.HRef)\n                    } /*:any*/ ;\n                    if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;\n                    delete cell.HRef;\n                    delete cell.HRefScreenTip;\n                }\n                if (cell.MergeAcross || cell.MergeDown) {\n                    cc = c + (parseInt(cell.MergeAcross, 10) | 0);\n                    rr = r + (parseInt(cell.MergeDown, 10) | 0);\n                    merges.push({\n                        s: {\n                            c: c,\n                            r: r\n                        },\n                        e: {\n                            c: cc,\n                            r: rr\n                        }\n                    });\n                }\n                if (!opts.sheetStubs) {\n                    if (cell.MergeAcross) c = cc + 1;\n                    else ++c;\n                } else if (cell.MergeAcross || cell.MergeDown) {\n                    /*:: if(!cc) cc = 0; if(!rr) rr = 0; */ for(var cma = c; cma <= cc; ++cma){\n                        for(var cmd = r; cmd <= rr; ++cmd){\n                            if (cma > c || cmd > r) {\n                                if (opts.dense) {\n                                    if (!cursheet[cmd]) cursheet[cmd] = [];\n                                    cursheet[cmd][cma] = {\n                                        t: \"z\"\n                                    };\n                                } else cursheet[encode_col(cma) + encode_row(cmd)] = {\n                                    t: \"z\"\n                                };\n                            }\n                        }\n                    }\n                    c = cc + 1;\n                } else ++c;\n            } else {\n                cell = xlml_parsexmltagobj(Rn[0]);\n                if (cell.Index) c = +cell.Index - 1;\n                if (c < refguess.s.c) refguess.s.c = c;\n                if (c > refguess.e.c) refguess.e.c = c;\n                if (Rn[0].slice(-2) === \"/>\") ++c;\n                comments = [];\n            }\n            break;\n        case \"row\" /*case 'Row'*/ :\n            if (Rn[1] === \"/\" || Rn[0].slice(-2) === \"/>\") {\n                if (r < refguess.s.r) refguess.s.r = r;\n                if (r > refguess.e.r) refguess.e.r = r;\n                if (Rn[0].slice(-2) === \"/>\") {\n                    row = xlml_parsexmltag(Rn[0]);\n                    if (row.Index) r = +row.Index - 1;\n                }\n                c = 0;\n                ++r;\n            } else {\n                row = xlml_parsexmltag(Rn[0]);\n                if (row.Index) r = +row.Index - 1;\n                rowobj = {};\n                if (row.AutoFitHeight == \"0\" || row.Height) {\n                    rowobj.hpx = parseInt(row.Height, 10);\n                    rowobj.hpt = px2pt(rowobj.hpx);\n                    rowinfo[r] = rowobj;\n                }\n                if (row.Hidden == \"1\") {\n                    rowobj.hidden = true;\n                    rowinfo[r] = rowobj;\n                }\n            }\n            break;\n        case \"worksheet\" /*case 'Worksheet'*/ :\n            /* TODO: read range from FullRows/FullColumns */ if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n                sheetnames.push(sheetname);\n                if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {\n                    cursheet[\"!ref\"] = encode_range(refguess);\n                    if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {\n                        cursheet[\"!fullref\"] = cursheet[\"!ref\"];\n                        refguess.e.r = opts.sheetRows - 1;\n                        cursheet[\"!ref\"] = encode_range(refguess);\n                    }\n                }\n                if (merges.length) cursheet[\"!merges\"] = merges;\n                if (cstys.length > 0) cursheet[\"!cols\"] = cstys;\n                if (rowinfo.length > 0) cursheet[\"!rows\"] = rowinfo;\n                sheets[sheetname] = cursheet;\n            } else {\n                refguess = {\n                    s: {\n                        r: 2000000,\n                        c: 2000000\n                    },\n                    e: {\n                        r: 0,\n                        c: 0\n                    }\n                };\n                r = c = 0;\n                state.push([\n                    Rn[3],\n                    false\n                ]);\n                tmp = xlml_parsexmltag(Rn[0]);\n                sheetname = unescapexml(tmp.Name);\n                cursheet = opts.dense ? [] : {};\n                merges = [];\n                arrayf = [];\n                rowinfo = [];\n                wsprops = {\n                    name: sheetname,\n                    Hidden: 0\n                };\n                Workbook.Sheets.push(wsprops);\n            }\n            break;\n        case \"table\" /*case 'Table'*/ :\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n            } else if (Rn[0].slice(-2) == \"/>\") break;\n            else {\n                state.push([\n                    Rn[3],\n                    false\n                ]);\n                cstys = [];\n                seencol = false;\n            }\n            break;\n        case \"style\" /*case 'Style'*/ :\n            if (Rn[1] === \"/\") process_style_xlml(styles, stag, opts);\n            else stag = xlml_parsexmltag(Rn[0]);\n            break;\n        case \"numberformat\" /*case 'NumberFormat'*/ :\n            stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || \"General\");\n            if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];\n            for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx)if (table_fmt[ssfidx] == stag.nf) break;\n            if (ssfidx == 0x188) {\n                for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx)if (table_fmt[ssfidx] == null) {\n                    SSF_load(stag.nf, ssfidx);\n                    break;\n                }\n            }\n            break;\n        case \"column\" /*case 'Column'*/ :\n            if (state[state.length - 1][0] !== /*'Table'*/ \"table\") break;\n            csty = xlml_parsexmltag(Rn[0]);\n            if (csty.Hidden) {\n                csty.hidden = true;\n                delete csty.Hidden;\n            }\n            if (csty.Width) csty.wpx = parseInt(csty.Width, 10);\n            if (!seencol && csty.wpx > 10) {\n                seencol = true;\n                MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);\n                for(var _col = 0; _col < cstys.length; ++_col)if (cstys[_col]) process_col(cstys[_col]);\n            }\n            if (seencol) process_col(csty);\n            cstys[csty.Index - 1 || cstys.length] = csty;\n            for(var i = 0; i < +csty.Span; ++i)cstys[cstys.length] = dup(csty);\n            break;\n        case \"namedrange\" /*case 'NamedRange'*/ :\n            if (Rn[1] === \"/\") break;\n            if (!Workbook.Names) Workbook.Names = [];\n            var _NamedRange = parsexmltag(Rn[0]);\n            var _DefinedName /*:DefinedName*/  = {\n                Name: _NamedRange.Name,\n                Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {\n                    r: 0,\n                    c: 0\n                })\n            } /*:any*/ ;\n            if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;\n            /*:: if(Workbook.Names) */ Workbook.Names.push(_DefinedName);\n            break;\n        case \"namedcell\" /*case 'NamedCell'*/ :\n            break;\n        case \"b\" /*case 'B'*/ :\n            break;\n        case \"i\" /*case 'I'*/ :\n            break;\n        case \"u\" /*case 'U'*/ :\n            break;\n        case \"s\" /*case 'S'*/ :\n            break;\n        case \"em\" /*case 'EM'*/ :\n            break;\n        case \"h2\" /*case 'H2'*/ :\n            break;\n        case \"h3\" /*case 'H3'*/ :\n            break;\n        case \"sub\" /*case 'Sub'*/ :\n            break;\n        case \"sup\" /*case 'Sup'*/ :\n            break;\n        case \"span\" /*case 'Span'*/ :\n            break;\n        case \"alignment\" /*case 'Alignment'*/ :\n            break;\n        case \"borders\" /*case 'Borders'*/ :\n            break;\n        case \"border\" /*case 'Border'*/ :\n            break;\n        case \"font\" /*case 'Font'*/ :\n            if (Rn[0].slice(-2) === \"/>\") break;\n            else if (Rn[1] === \"/\") ss += str.slice(fidx, Rn.index);\n            else fidx = Rn.index + Rn[0].length;\n            break;\n        case \"interior\" /*case 'Interior'*/ :\n            if (!opts.cellStyles) break;\n            stag.Interior = xlml_parsexmltag(Rn[0]);\n            break;\n        case \"protection\" /*case 'Protection'*/ :\n            break;\n        case \"author\" /*case 'Author'*/ :\n        case \"title\" /*case 'Title'*/ :\n        case \"description\" /*case 'Description'*/ :\n        case \"created\" /*case 'Created'*/ :\n        case \"keywords\" /*case 'Keywords'*/ :\n        case \"subject\" /*case 'Subject'*/ :\n        case \"category\" /*case 'Category'*/ :\n        case \"company\" /*case 'Company'*/ :\n        case \"lastauthor\" /*case 'LastAuthor'*/ :\n        case \"lastsaved\" /*case 'LastSaved'*/ :\n        case \"lastprinted\" /*case 'LastPrinted'*/ :\n        case \"version\" /*case 'Version'*/ :\n        case \"revision\" /*case 'Revision'*/ :\n        case \"totaltime\" /*case 'TotalTime'*/ :\n        case \"hyperlinkbase\" /*case 'HyperlinkBase'*/ :\n        case \"manager\" /*case 'Manager'*/ :\n        case \"contentstatus\" /*case 'ContentStatus'*/ :\n        case \"identifier\" /*case 'Identifier'*/ :\n        case \"language\" /*case 'Language'*/ :\n        case \"appname\" /*case 'AppName'*/ :\n            if (Rn[0].slice(-2) === \"/>\") break;\n            else if (Rn[1] === \"/\") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));\n            else pidx = Rn.index + Rn[0].length;\n            break;\n        case \"paragraphs\" /*case 'Paragraphs'*/ :\n            break;\n        case \"styles\" /*case 'Styles'*/ :\n        case \"workbook\" /*case 'Workbook'*/ :\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n            } else state.push([\n                Rn[3],\n                false\n            ]);\n            break;\n        case \"comment\" /*case 'Comment'*/ :\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n                xlml_clean_comment(comment);\n                comments.push(comment);\n            } else {\n                state.push([\n                    Rn[3],\n                    false\n                ]);\n                tmp = xlml_parsexmltag(Rn[0]);\n                comment = {\n                    a: tmp.Author\n                } /*:any*/ ;\n            }\n            break;\n        case \"autofilter\" /*case 'AutoFilter'*/ :\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") {\n                var AutoFilter = xlml_parsexmltag(Rn[0]);\n                cursheet[\"!autofilter\"] = {\n                    ref: rc_to_a1(AutoFilter.Range).replace(/\\$/g, \"\")\n                };\n                state.push([\n                    Rn[3],\n                    true\n                ]);\n            }\n            break;\n        case \"name\" /*case 'Name'*/ :\n            break;\n        case \"datavalidation\" /*case 'DataValidation'*/ :\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n            } else {\n                if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") state.push([\n                    Rn[3],\n                    true\n                ]);\n            }\n            break;\n        case \"pixelsperinch\" /*case 'PixelsPerInch'*/ :\n            break;\n        case \"componentoptions\" /*case 'ComponentOptions'*/ :\n        case \"documentproperties\" /*case 'DocumentProperties'*/ :\n        case \"customdocumentproperties\" /*case 'CustomDocumentProperties'*/ :\n        case \"officedocumentsettings\" /*case 'OfficeDocumentSettings'*/ :\n        case \"pivottable\" /*case 'PivotTable'*/ :\n        case \"pivotcache\" /*case 'PivotCache'*/ :\n        case \"names\" /*case 'Names'*/ :\n        case \"mapinfo\" /*case 'MapInfo'*/ :\n        case \"pagebreaks\" /*case 'PageBreaks'*/ :\n        case \"querytable\" /*case 'QueryTable'*/ :\n        case \"sorting\" /*case 'Sorting'*/ :\n        case \"schema\" /*case 'Schema'*/ :\n        case \"conditionalformatting\" /*case 'ConditionalFormatting'*/ :\n        case \"smarttagtype\" /*case 'SmartTagType'*/ :\n        case \"smarttags\" /*case 'SmartTags'*/ :\n        case \"excelworkbook\" /*case 'ExcelWorkbook'*/ :\n        case \"workbookoptions\" /*case 'WorkbookOptions'*/ :\n        case \"worksheetoptions\" /*case 'WorksheetOptions'*/ :\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error(\"Bad state: \" + tmp.join(\"|\"));\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") state.push([\n                Rn[3],\n                true\n            ]);\n            break;\n        case \"null\" /*case 'Null'*/ :\n            break;\n        default:\n            /* FODS file root is <office:document> */ if (state.length == 0 && Rn[3] == \"document\") return parse_fods(str, opts);\n            /* UOS file root is <uof:UOF> */ if (state.length == 0 && Rn[3] == \"uof\" /*\"UOF\"*/ ) return parse_fods(str, opts);\n            var seen = true;\n            switch(state[state.length - 1][0]){\n                /* OfficeDocumentSettings */ case \"officedocumentsettings\" /*case 'OfficeDocumentSettings'*/ :\n                    switch(Rn[3]){\n                        case \"allowpng\" /*case 'AllowPNG'*/ :\n                            break;\n                        case \"removepersonalinformation\" /*case 'RemovePersonalInformation'*/ :\n                            break;\n                        case \"downloadcomponents\" /*case 'DownloadComponents'*/ :\n                            break;\n                        case \"locationofcomponents\" /*case 'LocationOfComponents'*/ :\n                            break;\n                        case \"colors\" /*case 'Colors'*/ :\n                            break;\n                        case \"color\" /*case 'Color'*/ :\n                            break;\n                        case \"index\" /*case 'Index'*/ :\n                            break;\n                        case \"rgb\" /*case 'RGB'*/ :\n                            break;\n                        case \"targetscreensize\" /*case 'TargetScreenSize'*/ :\n                            break;\n                        case \"readonlyrecommended\" /*case 'ReadOnlyRecommended'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* ComponentOptions */ case \"componentoptions\" /*case 'ComponentOptions'*/ :\n                    switch(Rn[3]){\n                        case \"toolbar\" /*case 'Toolbar'*/ :\n                            break;\n                        case \"hideofficelogo\" /*case 'HideOfficeLogo'*/ :\n                            break;\n                        case \"spreadsheetautofit\" /*case 'SpreadsheetAutoFit'*/ :\n                            break;\n                        case \"label\" /*case 'Label'*/ :\n                            break;\n                        case \"caption\" /*case 'Caption'*/ :\n                            break;\n                        case \"maxheight\" /*case 'MaxHeight'*/ :\n                            break;\n                        case \"maxwidth\" /*case 'MaxWidth'*/ :\n                            break;\n                        case \"nextsheetnumber\" /*case 'NextSheetNumber'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* ExcelWorkbook */ case \"excelworkbook\" /*case 'ExcelWorkbook'*/ :\n                    switch(Rn[3]){\n                        case \"date1904\" /*case 'Date1904'*/ :\n                            /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ Workbook.WBProps.date1904 = true;\n                            break;\n                        case \"windowheight\" /*case 'WindowHeight'*/ :\n                            break;\n                        case \"windowwidth\" /*case 'WindowWidth'*/ :\n                            break;\n                        case \"windowtopx\" /*case 'WindowTopX'*/ :\n                            break;\n                        case \"windowtopy\" /*case 'WindowTopY'*/ :\n                            break;\n                        case \"tabratio\" /*case 'TabRatio'*/ :\n                            break;\n                        case \"protectstructure\" /*case 'ProtectStructure'*/ :\n                            break;\n                        case \"protectwindow\" /*case 'ProtectWindow'*/ :\n                            break;\n                        case \"protectwindows\" /*case 'ProtectWindows'*/ :\n                            break;\n                        case \"activesheet\" /*case 'ActiveSheet'*/ :\n                            break;\n                        case \"displayinknotes\" /*case 'DisplayInkNotes'*/ :\n                            break;\n                        case \"firstvisiblesheet\" /*case 'FirstVisibleSheet'*/ :\n                            break;\n                        case \"supbook\" /*case 'SupBook'*/ :\n                            break;\n                        case \"sheetname\" /*case 'SheetName'*/ :\n                            break;\n                        case \"sheetindex\" /*case 'SheetIndex'*/ :\n                            break;\n                        case \"sheetindexfirst\" /*case 'SheetIndexFirst'*/ :\n                            break;\n                        case \"sheetindexlast\" /*case 'SheetIndexLast'*/ :\n                            break;\n                        case \"dll\" /*case 'Dll'*/ :\n                            break;\n                        case \"acceptlabelsinformulas\" /*case 'AcceptLabelsInFormulas'*/ :\n                            break;\n                        case \"donotsavelinkvalues\" /*case 'DoNotSaveLinkValues'*/ :\n                            break;\n                        case \"iteration\" /*case 'Iteration'*/ :\n                            break;\n                        case \"maxiterations\" /*case 'MaxIterations'*/ :\n                            break;\n                        case \"maxchange\" /*case 'MaxChange'*/ :\n                            break;\n                        case \"path\" /*case 'Path'*/ :\n                            break;\n                        case \"xct\" /*case 'Xct'*/ :\n                            break;\n                        case \"count\" /*case 'Count'*/ :\n                            break;\n                        case \"selectedsheets\" /*case 'SelectedSheets'*/ :\n                            break;\n                        case \"calculation\" /*case 'Calculation'*/ :\n                            break;\n                        case \"uncalced\" /*case 'Uncalced'*/ :\n                            break;\n                        case \"startupprompt\" /*case 'StartupPrompt'*/ :\n                            break;\n                        case \"crn\" /*case 'Crn'*/ :\n                            break;\n                        case \"externname\" /*case 'ExternName'*/ :\n                            break;\n                        case \"formula\" /*case 'Formula'*/ :\n                            break;\n                        case \"colfirst\" /*case 'ColFirst'*/ :\n                            break;\n                        case \"collast\" /*case 'ColLast'*/ :\n                            break;\n                        case \"wantadvise\" /*case 'WantAdvise'*/ :\n                            break;\n                        case \"boolean\" /*case 'Boolean'*/ :\n                            break;\n                        case \"error\" /*case 'Error'*/ :\n                            break;\n                        case \"text\" /*case 'Text'*/ :\n                            break;\n                        case \"ole\" /*case 'OLE'*/ :\n                            break;\n                        case \"noautorecover\" /*case 'NoAutoRecover'*/ :\n                            break;\n                        case \"publishobjects\" /*case 'PublishObjects'*/ :\n                            break;\n                        case \"donotcalculatebeforesave\" /*case 'DoNotCalculateBeforeSave'*/ :\n                            break;\n                        case \"number\" /*case 'Number'*/ :\n                            break;\n                        case \"refmoder1c1\" /*case 'RefModeR1C1'*/ :\n                            break;\n                        case \"embedsavesmarttags\" /*case 'EmbedSaveSmartTags'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* WorkbookOptions */ case \"workbookoptions\" /*case 'WorkbookOptions'*/ :\n                    switch(Rn[3]){\n                        case \"owcversion\" /*case 'OWCVersion'*/ :\n                            break;\n                        case \"height\" /*case 'Height'*/ :\n                            break;\n                        case \"width\" /*case 'Width'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* WorksheetOptions */ case \"worksheetoptions\" /*case 'WorksheetOptions'*/ :\n                    switch(Rn[3]){\n                        case \"visible\" /*case 'Visible'*/ :\n                            if (Rn[0].slice(-2) === \"/>\") {} else if (Rn[1] === \"/\") switch(str.slice(pidx, Rn.index)){\n                                case \"SheetHidden\":\n                                    wsprops.Hidden = 1;\n                                    break;\n                                case \"SheetVeryHidden\":\n                                    wsprops.Hidden = 2;\n                                    break;\n                            }\n                            else pidx = Rn.index + Rn[0].length;\n                            break;\n                        case \"header\" /*case 'Header'*/ :\n                            if (!cursheet[\"!margins\"]) default_margins(cursheet[\"!margins\"] = {}, \"xlml\");\n                            if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet[\"!margins\"].header = +parsexmltag(Rn[0]).Margin;\n                            break;\n                        case \"footer\" /*case 'Footer'*/ :\n                            if (!cursheet[\"!margins\"]) default_margins(cursheet[\"!margins\"] = {}, \"xlml\");\n                            if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet[\"!margins\"].footer = +parsexmltag(Rn[0]).Margin;\n                            break;\n                        case \"pagemargins\" /*case 'PageMargins'*/ :\n                            var pagemargins = parsexmltag(Rn[0]);\n                            if (!cursheet[\"!margins\"]) default_margins(cursheet[\"!margins\"] = {}, \"xlml\");\n                            if (!isNaN(+pagemargins.Top)) cursheet[\"!margins\"].top = +pagemargins.Top;\n                            if (!isNaN(+pagemargins.Left)) cursheet[\"!margins\"].left = +pagemargins.Left;\n                            if (!isNaN(+pagemargins.Right)) cursheet[\"!margins\"].right = +pagemargins.Right;\n                            if (!isNaN(+pagemargins.Bottom)) cursheet[\"!margins\"].bottom = +pagemargins.Bottom;\n                            break;\n                        case \"displayrighttoleft\" /*case 'DisplayRightToLeft'*/ :\n                            if (!Workbook.Views) Workbook.Views = [];\n                            if (!Workbook.Views[0]) Workbook.Views[0] = {};\n                            Workbook.Views[0].RTL = true;\n                            break;\n                        case \"freezepanes\" /*case 'FreezePanes'*/ :\n                            break;\n                        case \"frozennosplit\" /*case 'FrozenNoSplit'*/ :\n                            break;\n                        case \"splithorizontal\" /*case 'SplitHorizontal'*/ :\n                        case \"splitvertical\" /*case 'SplitVertical'*/ :\n                            break;\n                        case \"donotdisplaygridlines\" /*case 'DoNotDisplayGridlines'*/ :\n                            break;\n                        case \"activerow\" /*case 'ActiveRow'*/ :\n                            break;\n                        case \"activecol\" /*case 'ActiveCol'*/ :\n                            break;\n                        case \"toprowbottompane\" /*case 'TopRowBottomPane'*/ :\n                            break;\n                        case \"leftcolumnrightpane\" /*case 'LeftColumnRightPane'*/ :\n                            break;\n                        case \"unsynced\" /*case 'Unsynced'*/ :\n                            break;\n                        case \"print\" /*case 'Print'*/ :\n                            break;\n                        case \"printerrors\" /*case 'PrintErrors'*/ :\n                            break;\n                        case \"panes\" /*case 'Panes'*/ :\n                            break;\n                        case \"scale\" /*case 'Scale'*/ :\n                            break;\n                        case \"pane\" /*case 'Pane'*/ :\n                            break;\n                        case \"number\" /*case 'Number'*/ :\n                            break;\n                        case \"layout\" /*case 'Layout'*/ :\n                            break;\n                        case \"pagesetup\" /*case 'PageSetup'*/ :\n                            break;\n                        case \"selected\" /*case 'Selected'*/ :\n                            break;\n                        case \"protectobjects\" /*case 'ProtectObjects'*/ :\n                            break;\n                        case \"enableselection\" /*case 'EnableSelection'*/ :\n                            break;\n                        case \"protectscenarios\" /*case 'ProtectScenarios'*/ :\n                            break;\n                        case \"validprinterinfo\" /*case 'ValidPrinterInfo'*/ :\n                            break;\n                        case \"horizontalresolution\" /*case 'HorizontalResolution'*/ :\n                            break;\n                        case \"verticalresolution\" /*case 'VerticalResolution'*/ :\n                            break;\n                        case \"numberofcopies\" /*case 'NumberofCopies'*/ :\n                            break;\n                        case \"activepane\" /*case 'ActivePane'*/ :\n                            break;\n                        case \"toprowvisible\" /*case 'TopRowVisible'*/ :\n                            break;\n                        case \"leftcolumnvisible\" /*case 'LeftColumnVisible'*/ :\n                            break;\n                        case \"fittopage\" /*case 'FitToPage'*/ :\n                            break;\n                        case \"rangeselection\" /*case 'RangeSelection'*/ :\n                            break;\n                        case \"papersizeindex\" /*case 'PaperSizeIndex'*/ :\n                            break;\n                        case \"pagelayoutzoom\" /*case 'PageLayoutZoom'*/ :\n                            break;\n                        case \"pagebreakzoom\" /*case 'PageBreakZoom'*/ :\n                            break;\n                        case \"filteron\" /*case 'FilterOn'*/ :\n                            break;\n                        case \"fitwidth\" /*case 'FitWidth'*/ :\n                            break;\n                        case \"fitheight\" /*case 'FitHeight'*/ :\n                            break;\n                        case \"commentslayout\" /*case 'CommentsLayout'*/ :\n                            break;\n                        case \"zoom\" /*case 'Zoom'*/ :\n                            break;\n                        case \"lefttoright\" /*case 'LeftToRight'*/ :\n                            break;\n                        case \"gridlines\" /*case 'Gridlines'*/ :\n                            break;\n                        case \"allowsort\" /*case 'AllowSort'*/ :\n                            break;\n                        case \"allowfilter\" /*case 'AllowFilter'*/ :\n                            break;\n                        case \"allowinsertrows\" /*case 'AllowInsertRows'*/ :\n                            break;\n                        case \"allowdeleterows\" /*case 'AllowDeleteRows'*/ :\n                            break;\n                        case \"allowinsertcols\" /*case 'AllowInsertCols'*/ :\n                            break;\n                        case \"allowdeletecols\" /*case 'AllowDeleteCols'*/ :\n                            break;\n                        case \"allowinserthyperlinks\" /*case 'AllowInsertHyperlinks'*/ :\n                            break;\n                        case \"allowformatcells\" /*case 'AllowFormatCells'*/ :\n                            break;\n                        case \"allowsizecols\" /*case 'AllowSizeCols'*/ :\n                            break;\n                        case \"allowsizerows\" /*case 'AllowSizeRows'*/ :\n                            break;\n                        case \"nosummaryrowsbelowdetail\" /*case 'NoSummaryRowsBelowDetail'*/ :\n                            if (!cursheet[\"!outline\"]) cursheet[\"!outline\"] = {};\n                            cursheet[\"!outline\"].above = true;\n                            break;\n                        case \"tabcolorindex\" /*case 'TabColorIndex'*/ :\n                            break;\n                        case \"donotdisplayheadings\" /*case 'DoNotDisplayHeadings'*/ :\n                            break;\n                        case \"showpagelayoutzoom\" /*case 'ShowPageLayoutZoom'*/ :\n                            break;\n                        case \"nosummarycolumnsrightdetail\" /*case 'NoSummaryColumnsRightDetail'*/ :\n                            if (!cursheet[\"!outline\"]) cursheet[\"!outline\"] = {};\n                            cursheet[\"!outline\"].left = true;\n                            break;\n                        case \"blackandwhite\" /*case 'BlackAndWhite'*/ :\n                            break;\n                        case \"donotdisplayzeros\" /*case 'DoNotDisplayZeros'*/ :\n                            break;\n                        case \"displaypagebreak\" /*case 'DisplayPageBreak'*/ :\n                            break;\n                        case \"rowcolheadings\" /*case 'RowColHeadings'*/ :\n                            break;\n                        case \"donotdisplayoutline\" /*case 'DoNotDisplayOutline'*/ :\n                            break;\n                        case \"noorientation\" /*case 'NoOrientation'*/ :\n                            break;\n                        case \"allowusepivottables\" /*case 'AllowUsePivotTables'*/ :\n                            break;\n                        case \"zeroheight\" /*case 'ZeroHeight'*/ :\n                            break;\n                        case \"viewablerange\" /*case 'ViewableRange'*/ :\n                            break;\n                        case \"selection\" /*case 'Selection'*/ :\n                            break;\n                        case \"protectcontents\" /*case 'ProtectContents'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* PivotTable */ case \"pivottable\" /*case 'PivotTable'*/ :\n                case \"pivotcache\" /*case 'PivotCache'*/ :\n                    switch(Rn[3]){\n                        case \"immediateitemsondrop\" /*case 'ImmediateItemsOnDrop'*/ :\n                            break;\n                        case \"showpagemultipleitemlabel\" /*case 'ShowPageMultipleItemLabel'*/ :\n                            break;\n                        case \"compactrowindent\" /*case 'CompactRowIndent'*/ :\n                            break;\n                        case \"location\" /*case 'Location'*/ :\n                            break;\n                        case \"pivotfield\" /*case 'PivotField'*/ :\n                            break;\n                        case \"orientation\" /*case 'Orientation'*/ :\n                            break;\n                        case \"layoutform\" /*case 'LayoutForm'*/ :\n                            break;\n                        case \"layoutsubtotallocation\" /*case 'LayoutSubtotalLocation'*/ :\n                            break;\n                        case \"layoutcompactrow\" /*case 'LayoutCompactRow'*/ :\n                            break;\n                        case \"position\" /*case 'Position'*/ :\n                            break;\n                        case \"pivotitem\" /*case 'PivotItem'*/ :\n                            break;\n                        case \"datatype\" /*case 'DataType'*/ :\n                            break;\n                        case \"datafield\" /*case 'DataField'*/ :\n                            break;\n                        case \"sourcename\" /*case 'SourceName'*/ :\n                            break;\n                        case \"parentfield\" /*case 'ParentField'*/ :\n                            break;\n                        case \"ptlineitems\" /*case 'PTLineItems'*/ :\n                            break;\n                        case \"ptlineitem\" /*case 'PTLineItem'*/ :\n                            break;\n                        case \"countofsameitems\" /*case 'CountOfSameItems'*/ :\n                            break;\n                        case \"item\" /*case 'Item'*/ :\n                            break;\n                        case \"itemtype\" /*case 'ItemType'*/ :\n                            break;\n                        case \"ptsource\" /*case 'PTSource'*/ :\n                            break;\n                        case \"cacheindex\" /*case 'CacheIndex'*/ :\n                            break;\n                        case \"consolidationreference\" /*case 'ConsolidationReference'*/ :\n                            break;\n                        case \"filename\" /*case 'FileName'*/ :\n                            break;\n                        case \"reference\" /*case 'Reference'*/ :\n                            break;\n                        case \"nocolumngrand\" /*case 'NoColumnGrand'*/ :\n                            break;\n                        case \"norowgrand\" /*case 'NoRowGrand'*/ :\n                            break;\n                        case \"blanklineafteritems\" /*case 'BlankLineAfterItems'*/ :\n                            break;\n                        case \"hidden\" /*case 'Hidden'*/ :\n                            break;\n                        case \"subtotal\" /*case 'Subtotal'*/ :\n                            break;\n                        case \"basefield\" /*case 'BaseField'*/ :\n                            break;\n                        case \"mapchilditems\" /*case 'MapChildItems'*/ :\n                            break;\n                        case \"function\" /*case 'Function'*/ :\n                            break;\n                        case \"refreshonfileopen\" /*case 'RefreshOnFileOpen'*/ :\n                            break;\n                        case \"printsettitles\" /*case 'PrintSetTitles'*/ :\n                            break;\n                        case \"mergelabels\" /*case 'MergeLabels'*/ :\n                            break;\n                        case \"defaultversion\" /*case 'DefaultVersion'*/ :\n                            break;\n                        case \"refreshname\" /*case 'RefreshName'*/ :\n                            break;\n                        case \"refreshdate\" /*case 'RefreshDate'*/ :\n                            break;\n                        case \"refreshdatecopy\" /*case 'RefreshDateCopy'*/ :\n                            break;\n                        case \"versionlastrefresh\" /*case 'VersionLastRefresh'*/ :\n                            break;\n                        case \"versionlastupdate\" /*case 'VersionLastUpdate'*/ :\n                            break;\n                        case \"versionupdateablemin\" /*case 'VersionUpdateableMin'*/ :\n                            break;\n                        case \"versionrefreshablemin\" /*case 'VersionRefreshableMin'*/ :\n                            break;\n                        case \"calculation\" /*case 'Calculation'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* PageBreaks */ case \"pagebreaks\" /*case 'PageBreaks'*/ :\n                    switch(Rn[3]){\n                        case \"colbreaks\" /*case 'ColBreaks'*/ :\n                            break;\n                        case \"colbreak\" /*case 'ColBreak'*/ :\n                            break;\n                        case \"rowbreaks\" /*case 'RowBreaks'*/ :\n                            break;\n                        case \"rowbreak\" /*case 'RowBreak'*/ :\n                            break;\n                        case \"colstart\" /*case 'ColStart'*/ :\n                            break;\n                        case \"colend\" /*case 'ColEnd'*/ :\n                            break;\n                        case \"rowend\" /*case 'RowEnd'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* AutoFilter */ case \"autofilter\" /*case 'AutoFilter'*/ :\n                    switch(Rn[3]){\n                        case \"autofiltercolumn\" /*case 'AutoFilterColumn'*/ :\n                            break;\n                        case \"autofiltercondition\" /*case 'AutoFilterCondition'*/ :\n                            break;\n                        case \"autofilterand\" /*case 'AutoFilterAnd'*/ :\n                            break;\n                        case \"autofilteror\" /*case 'AutoFilterOr'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* QueryTable */ case \"querytable\" /*case 'QueryTable'*/ :\n                    switch(Rn[3]){\n                        case \"id\" /*case 'Id'*/ :\n                            break;\n                        case \"autoformatfont\" /*case 'AutoFormatFont'*/ :\n                            break;\n                        case \"autoformatpattern\" /*case 'AutoFormatPattern'*/ :\n                            break;\n                        case \"querysource\" /*case 'QuerySource'*/ :\n                            break;\n                        case \"querytype\" /*case 'QueryType'*/ :\n                            break;\n                        case \"enableredirections\" /*case 'EnableRedirections'*/ :\n                            break;\n                        case \"refreshedinxl9\" /*case 'RefreshedInXl9'*/ :\n                            break;\n                        case \"urlstring\" /*case 'URLString'*/ :\n                            break;\n                        case \"htmltables\" /*case 'HTMLTables'*/ :\n                            break;\n                        case \"connection\" /*case 'Connection'*/ :\n                            break;\n                        case \"commandtext\" /*case 'CommandText'*/ :\n                            break;\n                        case \"refreshinfo\" /*case 'RefreshInfo'*/ :\n                            break;\n                        case \"notitles\" /*case 'NoTitles'*/ :\n                            break;\n                        case \"nextid\" /*case 'NextId'*/ :\n                            break;\n                        case \"columninfo\" /*case 'ColumnInfo'*/ :\n                            break;\n                        case \"overwritecells\" /*case 'OverwriteCells'*/ :\n                            break;\n                        case \"donotpromptforfile\" /*case 'DoNotPromptForFile'*/ :\n                            break;\n                        case \"textwizardsettings\" /*case 'TextWizardSettings'*/ :\n                            break;\n                        case \"source\" /*case 'Source'*/ :\n                            break;\n                        case \"number\" /*case 'Number'*/ :\n                            break;\n                        case \"decimal\" /*case 'Decimal'*/ :\n                            break;\n                        case \"thousandseparator\" /*case 'ThousandSeparator'*/ :\n                            break;\n                        case \"trailingminusnumbers\" /*case 'TrailingMinusNumbers'*/ :\n                            break;\n                        case \"formatsettings\" /*case 'FormatSettings'*/ :\n                            break;\n                        case \"fieldtype\" /*case 'FieldType'*/ :\n                            break;\n                        case \"delimiters\" /*case 'Delimiters'*/ :\n                            break;\n                        case \"tab\" /*case 'Tab'*/ :\n                            break;\n                        case \"comma\" /*case 'Comma'*/ :\n                            break;\n                        case \"autoformatname\" /*case 'AutoFormatName'*/ :\n                            break;\n                        case \"versionlastedit\" /*case 'VersionLastEdit'*/ :\n                            break;\n                        case \"versionlastrefresh\" /*case 'VersionLastRefresh'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                case \"datavalidation\" /*case 'DataValidation'*/ :\n                    switch(Rn[3]){\n                        case \"range\" /*case 'Range'*/ :\n                            break;\n                        case \"type\" /*case 'Type'*/ :\n                            break;\n                        case \"min\" /*case 'Min'*/ :\n                            break;\n                        case \"max\" /*case 'Max'*/ :\n                            break;\n                        case \"sort\" /*case 'Sort'*/ :\n                            break;\n                        case \"descending\" /*case 'Descending'*/ :\n                            break;\n                        case \"order\" /*case 'Order'*/ :\n                            break;\n                        case \"casesensitive\" /*case 'CaseSensitive'*/ :\n                            break;\n                        case \"value\" /*case 'Value'*/ :\n                            break;\n                        case \"errorstyle\" /*case 'ErrorStyle'*/ :\n                            break;\n                        case \"errormessage\" /*case 'ErrorMessage'*/ :\n                            break;\n                        case \"errortitle\" /*case 'ErrorTitle'*/ :\n                            break;\n                        case \"inputmessage\" /*case 'InputMessage'*/ :\n                            break;\n                        case \"inputtitle\" /*case 'InputTitle'*/ :\n                            break;\n                        case \"combohide\" /*case 'ComboHide'*/ :\n                            break;\n                        case \"inputhide\" /*case 'InputHide'*/ :\n                            break;\n                        case \"condition\" /*case 'Condition'*/ :\n                            break;\n                        case \"qualifier\" /*case 'Qualifier'*/ :\n                            break;\n                        case \"useblank\" /*case 'UseBlank'*/ :\n                            break;\n                        case \"value1\" /*case 'Value1'*/ :\n                            break;\n                        case \"value2\" /*case 'Value2'*/ :\n                            break;\n                        case \"format\" /*case 'Format'*/ :\n                            break;\n                        case \"cellrangelist\" /*case 'CellRangeList'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                case \"sorting\" /*case 'Sorting'*/ :\n                case \"conditionalformatting\" /*case 'ConditionalFormatting'*/ :\n                    switch(Rn[3]){\n                        case \"range\" /*case 'Range'*/ :\n                            break;\n                        case \"type\" /*case 'Type'*/ :\n                            break;\n                        case \"min\" /*case 'Min'*/ :\n                            break;\n                        case \"max\" /*case 'Max'*/ :\n                            break;\n                        case \"sort\" /*case 'Sort'*/ :\n                            break;\n                        case \"descending\" /*case 'Descending'*/ :\n                            break;\n                        case \"order\" /*case 'Order'*/ :\n                            break;\n                        case \"casesensitive\" /*case 'CaseSensitive'*/ :\n                            break;\n                        case \"value\" /*case 'Value'*/ :\n                            break;\n                        case \"errorstyle\" /*case 'ErrorStyle'*/ :\n                            break;\n                        case \"errormessage\" /*case 'ErrorMessage'*/ :\n                            break;\n                        case \"errortitle\" /*case 'ErrorTitle'*/ :\n                            break;\n                        case \"cellrangelist\" /*case 'CellRangeList'*/ :\n                            break;\n                        case \"inputmessage\" /*case 'InputMessage'*/ :\n                            break;\n                        case \"inputtitle\" /*case 'InputTitle'*/ :\n                            break;\n                        case \"combohide\" /*case 'ComboHide'*/ :\n                            break;\n                        case \"inputhide\" /*case 'InputHide'*/ :\n                            break;\n                        case \"condition\" /*case 'Condition'*/ :\n                            break;\n                        case \"qualifier\" /*case 'Qualifier'*/ :\n                            break;\n                        case \"useblank\" /*case 'UseBlank'*/ :\n                            break;\n                        case \"value1\" /*case 'Value1'*/ :\n                            break;\n                        case \"value2\" /*case 'Value2'*/ :\n                            break;\n                        case \"format\" /*case 'Format'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* MapInfo (schema) */ case \"mapinfo\" /*case 'MapInfo'*/ :\n                case \"schema\" /*case 'Schema'*/ :\n                case \"data\" /*case 'data'*/ :\n                    switch(Rn[3]){\n                        case \"map\" /*case 'Map'*/ :\n                            break;\n                        case \"entry\" /*case 'Entry'*/ :\n                            break;\n                        case \"range\" /*case 'Range'*/ :\n                            break;\n                        case \"xpath\" /*case 'XPath'*/ :\n                            break;\n                        case \"field\" /*case 'Field'*/ :\n                            break;\n                        case \"xsdtype\" /*case 'XSDType'*/ :\n                            break;\n                        case \"filteron\" /*case 'FilterOn'*/ :\n                            break;\n                        case \"aggregate\" /*case 'Aggregate'*/ :\n                            break;\n                        case \"elementtype\" /*case 'ElementType'*/ :\n                            break;\n                        case \"attributetype\" /*case 'AttributeType'*/ :\n                            break;\n                        /* These are from xsd (XML Schema Definition) */ case \"schema\" /*case 'schema'*/ :\n                        case \"element\" /*case 'element'*/ :\n                        case \"complextype\" /*case 'complexType'*/ :\n                        case \"datatype\" /*case 'datatype'*/ :\n                        case \"all\" /*case 'all'*/ :\n                        case \"attribute\" /*case 'attribute'*/ :\n                        case \"extends\" /*case 'extends'*/ :\n                            break;\n                        case \"row\" /*case 'row'*/ :\n                            break;\n                        default:\n                            seen = false;\n                    }\n                    break;\n                /* SmartTags (can be anything) */ case \"smarttags\" /*case 'SmartTags'*/ :\n                    break;\n                default:\n                    seen = false;\n                    break;\n            }\n            if (seen) break;\n            /* CustomDocumentProperties */ if (Rn[3].match(/!\\[CDATA/)) break;\n            if (!state[state.length - 1][1]) throw \"Unrecognized tag: \" + Rn[3] + \"|\" + state.join(\"|\");\n            if (state[state.length - 1][0] === /*'CustomDocumentProperties'*/ \"customdocumentproperties\") {\n                if (Rn[0].slice(-2) === \"/>\") break;\n                else if (Rn[1] === \"/\") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));\n                else {\n                    cp = Rn;\n                    pidx = Rn.index + Rn[0].length;\n                }\n                break;\n            }\n            if (opts.WTF) throw \"Unrecognized tag: \" + Rn[3] + \"|\" + state.join(\"|\");\n    }\n    var out = {} /*:any*/ ;\n    if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;\n    out.SheetNames = sheetnames;\n    out.Workbook = Workbook;\n    out.SSF = dup(table_fmt);\n    out.Props = Props;\n    out.Custprops = Custprops;\n    return out;\n}\nfunction parse_xlml(data /*:RawBytes|string*/ , opts) /*:Workbook*/ {\n    fix_read_opts(opts = opts || {});\n    switch(opts.type || \"base64\"){\n        case \"base64\":\n            return parse_xlml_xml(Base64_decode(data), opts);\n        case \"binary\":\n        case \"buffer\":\n        case \"file\":\n            return parse_xlml_xml(data, opts);\n        case \"array\":\n            return parse_xlml_xml(a2s(data), opts);\n    }\n/*:: throw new Error(\"unsupported type \" + opts.type); */ }\n/* TODO */ function write_props_xlml(wb /*:Workbook*/ , opts) /*:string*/ {\n    var o /*:Array<string>*/  = [];\n    /* DocumentProperties */ if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));\n    /* CustomDocumentProperties */ if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));\n    return o.join(\"\");\n}\n/* TODO */ function write_wb_xlml() /*:string*/ {\n    /* OfficeDocumentSettings */ /* ExcelWorkbook */ return \"\";\n}\n/* TODO */ function write_sty_xlml(wb, opts) /*:string*/ {\n    /* Styles */ var styles /*:Array<string>*/  = [\n        '<Style ss:ID=\"Default\" ss:Name=\"Normal\"><NumberFormat/></Style>'\n    ];\n    opts.cellXfs.forEach(function(xf, id) {\n        var payload /*:Array<string>*/  = [];\n        payload.push(writextag(\"NumberFormat\", null, {\n            \"ss:Format\": escapexml(table_fmt[xf.numFmtId])\n        }));\n        var o = /*::(*/ {\n            \"ss:ID\": \"s\" + (21 + id)\n        } /*:: :any)*/ ;\n        styles.push(writextag(\"Style\", payload.join(\"\"), o));\n    });\n    return writextag(\"Styles\", styles.join(\"\"));\n}\nfunction write_name_xlml(n) {\n    return writextag(\"NamedRange\", null, {\n        \"ss:Name\": n.Name,\n        \"ss:RefersTo\": \"=\" + a1_to_rc(n.Ref, {\n            r: 0,\n            c: 0\n        })\n    });\n}\nfunction write_names_xlml(wb /*::, opts*/ ) /*:string*/ {\n    if (!((wb || {}).Workbook || {}).Names) return \"\";\n    /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error(\"unreachable\"); */ var names /*:Array<any>*/  = wb.Workbook.Names;\n    var out /*:Array<string>*/  = [];\n    for(var i = 0; i < names.length; ++i){\n        var n = names[i];\n        if (n.Sheet != null) continue;\n        if (n.Name.match(/^_xlfn\\./)) continue;\n        out.push(write_name_xlml(n));\n    }\n    return writextag(\"Names\", out.join(\"\"));\n}\nfunction write_ws_xlml_names(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {\n    if (!ws) return \"\";\n    if (!((wb || {}).Workbook || {}).Names) return \"\";\n    /*:: if(!wb || !wb.Workbook || !wb.Workbook.Names) throw new Error(\"unreachable\"); */ var names /*:Array<any>*/  = wb.Workbook.Names;\n    var out /*:Array<string>*/  = [];\n    for(var i = 0; i < names.length; ++i){\n        var n = names[i];\n        if (n.Sheet != idx) continue;\n        /*switch(n.Name) {\n\t\t\tcase \"_\": continue;\n\t\t}*/ if (n.Name.match(/^_xlfn\\./)) continue;\n        out.push(write_name_xlml(n));\n    }\n    return out.join(\"\");\n}\n/* WorksheetOptions */ function write_ws_xlml_wsopts(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {\n    if (!ws) return \"\";\n    var o /*:Array<string>*/  = [];\n    /* NOTE: spec technically allows any order, but stick with implied order */ /* FitToPage */ /* DoNotDisplayColHeaders */ /* DoNotDisplayRowHeaders */ /* ViewableRange */ /* Selection */ /* GridlineColor */ /* Name */ /* ExcelWorksheetType */ /* IntlMacro */ /* Unsynced */ /* Selected */ /* CodeName */ if (ws[\"!margins\"]) {\n        o.push(\"<PageSetup>\");\n        if (ws[\"!margins\"].header) o.push(writextag(\"Header\", null, {\n            \"x:Margin\": ws[\"!margins\"].header\n        }));\n        if (ws[\"!margins\"].footer) o.push(writextag(\"Footer\", null, {\n            \"x:Margin\": ws[\"!margins\"].footer\n        }));\n        o.push(writextag(\"PageMargins\", null, {\n            \"x:Bottom\": ws[\"!margins\"].bottom || \"0.75\",\n            \"x:Left\": ws[\"!margins\"].left || \"0.7\",\n            \"x:Right\": ws[\"!margins\"].right || \"0.7\",\n            \"x:Top\": ws[\"!margins\"].top || \"0.75\"\n        }));\n        o.push(\"</PageSetup>\");\n    }\n    /* PageSetup */ /* DisplayPageBreak */ /* TransitionExpressionEvaluation */ /* TransitionFormulaEntry */ /* Print */ /* Zoom */ /* PageLayoutZoom */ /* PageBreakZoom */ /* ShowPageBreakZoom */ /* DefaultRowHeight */ /* DefaultColumnWidth */ /* StandardWidth */ if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {\n        /* Visible */ if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag(\"Visible\", wb.Workbook.Sheets[idx].Hidden == 1 ? \"SheetHidden\" : \"SheetVeryHidden\", {}));\n        else {\n            /* Selected */ for(var i = 0; i < idx; ++i)if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;\n            if (i == idx) o.push(\"<Selected/>\");\n        }\n    }\n    /* LeftColumnVisible */ if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL) o.push(\"<DisplayRightToLeft/>\");\n    /* GridlineColorIndex */ /* DisplayFormulas */ /* DoNotDisplayGridlines */ /* DoNotDisplayHeadings */ /* DoNotDisplayOutline */ /* ApplyAutomaticOutlineStyles */ /* NoSummaryRowsBelowDetail */ /* NoSummaryColumnsRightDetail */ /* DoNotDisplayZeros */ /* ActiveRow */ /* ActiveColumn */ /* FilterOn */ /* RangeSelection */ /* TopRowVisible */ /* TopRowBottomPane */ /* LeftColumnRightPane */ /* ActivePane */ /* SplitHorizontal */ /* SplitVertical */ /* FreezePanes */ /* FrozenNoSplit */ /* TabColorIndex */ /* Panes */ /* NOTE: Password not supported in XLML Format */ if (ws[\"!protect\"]) {\n        o.push(writetag(\"ProtectContents\", \"True\"));\n        if (ws[\"!protect\"].objects) o.push(writetag(\"ProtectObjects\", \"True\"));\n        if (ws[\"!protect\"].scenarios) o.push(writetag(\"ProtectScenarios\", \"True\"));\n        if (ws[\"!protect\"].selectLockedCells != null && !ws[\"!protect\"].selectLockedCells) o.push(writetag(\"EnableSelection\", \"NoSelection\"));\n        else if (ws[\"!protect\"].selectUnlockedCells != null && !ws[\"!protect\"].selectUnlockedCells) o.push(writetag(\"EnableSelection\", \"UnlockedCells\"));\n        [\n            [\n                \"formatCells\",\n                \"AllowFormatCells\"\n            ],\n            [\n                \"formatColumns\",\n                \"AllowSizeCols\"\n            ],\n            [\n                \"formatRows\",\n                \"AllowSizeRows\"\n            ],\n            [\n                \"insertColumns\",\n                \"AllowInsertCols\"\n            ],\n            [\n                \"insertRows\",\n                \"AllowInsertRows\"\n            ],\n            [\n                \"insertHyperlinks\",\n                \"AllowInsertHyperlinks\"\n            ],\n            [\n                \"deleteColumns\",\n                \"AllowDeleteCols\"\n            ],\n            [\n                \"deleteRows\",\n                \"AllowDeleteRows\"\n            ],\n            [\n                \"sort\",\n                \"AllowSort\"\n            ],\n            [\n                \"autoFilter\",\n                \"AllowFilter\"\n            ],\n            [\n                \"pivotTables\",\n                \"AllowUsePivotTables\"\n            ]\n        ].forEach(function(x) {\n            if (ws[\"!protect\"][x[0]]) o.push(\"<\" + x[1] + \"/>\");\n        });\n    }\n    if (o.length == 0) return \"\";\n    return writextag(\"WorksheetOptions\", o.join(\"\"), {\n        xmlns: XLMLNS.x\n    });\n}\nfunction write_ws_xlml_comment(comments /*:Array<any>*/ ) /*:string*/ {\n    return comments.map(function(c) {\n        // TODO: formatted text\n        var t = xlml_unfixstr(c.t || \"\");\n        var d = writextag(\"ss:Data\", t, {\n            \"xmlns\": \"http://www.w3.org/TR/REC-html40\"\n        });\n        return writextag(\"Comment\", d, {\n            \"ss:Author\": c.a\n        });\n    }).join(\"\");\n}\nfunction write_ws_xlml_cell(cell, ref /*:string*/ , ws, opts, idx /*:number*/ , wb, addr) /*:string*/ {\n    if (!cell || cell.v == undefined && cell.f == undefined) return \"\";\n    var attr = {};\n    if (cell.f) attr[\"ss:Formula\"] = \"=\" + escapexml(a1_to_rc(cell.f, addr));\n    if (cell.F && cell.F.slice(0, ref.length) == ref) {\n        var end = decode_cell(cell.F.slice(ref.length + 1));\n        attr[\"ss:ArrayRange\"] = \"RC:R\" + (end.r == addr.r ? \"\" : \"[\" + (end.r - addr.r) + \"]\") + \"C\" + (end.c == addr.c ? \"\" : \"[\" + (end.c - addr.c) + \"]\");\n    }\n    if (cell.l && cell.l.Target) {\n        attr[\"ss:HRef\"] = escapexml(cell.l.Target);\n        if (cell.l.Tooltip) attr[\"x:HRefScreenTip\"] = escapexml(cell.l.Tooltip);\n    }\n    if (ws[\"!merges\"]) {\n        var marr = ws[\"!merges\"];\n        for(var mi = 0; mi != marr.length; ++mi){\n            if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;\n            if (marr[mi].e.c > marr[mi].s.c) attr[\"ss:MergeAcross\"] = marr[mi].e.c - marr[mi].s.c;\n            if (marr[mi].e.r > marr[mi].s.r) attr[\"ss:MergeDown\"] = marr[mi].e.r - marr[mi].s.r;\n        }\n    }\n    var t = \"\", p = \"\";\n    switch(cell.t){\n        case \"z\":\n            if (!opts.sheetStubs) return \"\";\n            break;\n        case \"n\":\n            t = \"Number\";\n            p = String(cell.v);\n            break;\n        case \"b\":\n            t = \"Boolean\";\n            p = cell.v ? \"1\" : \"0\";\n            break;\n        case \"e\":\n            t = \"Error\";\n            p = BErr[cell.v];\n            break;\n        case \"d\":\n            t = \"DateTime\";\n            p = new Date(cell.v).toISOString();\n            if (cell.z == null) cell.z = cell.z || table_fmt[14];\n            break;\n        case \"s\":\n            t = \"String\";\n            p = escapexlml(cell.v || \"\");\n            break;\n    }\n    /* TODO: cell style */ var os = get_cell_style(opts.cellXfs, cell, opts);\n    attr[\"ss:StyleID\"] = \"s\" + (21 + os);\n    attr[\"ss:Index\"] = addr.c + 1;\n    var _v = cell.v != null ? p : \"\";\n    var m = cell.t == \"z\" ? \"\" : '<Data ss:Type=\"' + t + '\">' + _v + \"</Data>\";\n    if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c);\n    return writextag(\"Cell\", m, attr);\n}\nfunction write_ws_xlml_row(R /*:number*/ , row) /*:string*/ {\n    var o = '<Row ss:Index=\"' + (R + 1) + '\"';\n    if (row) {\n        if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);\n        if (row.hpx) o += ' ss:AutoFitHeight=\"0\" ss:Height=\"' + row.hpx + '\"';\n        if (row.hidden) o += ' ss:Hidden=\"1\"';\n    }\n    return o + \">\";\n}\n/* TODO */ function write_ws_xlml_table(ws /*:Worksheet*/ , opts, idx /*:number*/ , wb /*:Workbook*/ ) /*:string*/ {\n    if (!ws[\"!ref\"]) return \"\";\n    var range /*:Range*/  = safe_decode_range(ws[\"!ref\"]);\n    var marr /*:Array<Range>*/  = ws[\"!merges\"] || [], mi = 0;\n    var o /*:Array<string>*/  = [];\n    if (ws[\"!cols\"]) ws[\"!cols\"].forEach(function(n, i) {\n        process_col(n);\n        var w = !!n.width;\n        var p = col_obj_w(i, n);\n        var k /*:any*/  = {\n            \"ss:Index\": i + 1\n        };\n        if (w) k[\"ss:Width\"] = width2px(p.width);\n        if (n.hidden) k[\"ss:Hidden\"] = \"1\";\n        o.push(writextag(\"Column\", null, k));\n    });\n    var dense = Array.isArray(ws);\n    for(var R = range.s.r; R <= range.e.r; ++R){\n        var row = [\n            write_ws_xlml_row(R, (ws[\"!rows\"] || [])[R])\n        ];\n        for(var C = range.s.c; C <= range.e.c; ++C){\n            var skip = false;\n            for(mi = 0; mi != marr.length; ++mi){\n                if (marr[mi].s.c > C) continue;\n                if (marr[mi].s.r > R) continue;\n                if (marr[mi].e.c < C) continue;\n                if (marr[mi].e.r < R) continue;\n                if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;\n                break;\n            }\n            if (skip) continue;\n            var addr = {\n                r: R,\n                c: C\n            };\n            var ref = encode_cell(addr), cell = dense ? (ws[R] || [])[C] : ws[ref];\n            row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));\n        }\n        row.push(\"</Row>\");\n        if (row.length > 2) o.push(row.join(\"\"));\n    }\n    return o.join(\"\");\n}\nfunction write_ws_xlml(idx /*:number*/ , opts, wb /*:Workbook*/ ) /*:string*/ {\n    var o /*:Array<string>*/  = [];\n    var s = wb.SheetNames[idx];\n    var ws = wb.Sheets[s];\n    var t /*:string*/  = ws ? write_ws_xlml_names(ws, opts, idx, wb) : \"\";\n    if (t.length > 0) o.push(\"<Names>\" + t + \"</Names>\");\n    /* Table */ t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : \"\";\n    if (t.length > 0) o.push(\"<Table>\" + t + \"</Table>\");\n    /* WorksheetOptions */ o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));\n    return o.join(\"\");\n}\nfunction write_xlml(wb, opts) /*:string*/ {\n    if (!opts) opts = {};\n    if (!wb.SSF) wb.SSF = dup(table_fmt);\n    if (wb.SSF) {\n        make_ssf();\n        SSF_load_table(wb.SSF);\n        // $FlowIgnore\n        opts.revssf = evert_num(wb.SSF);\n        opts.revssf[wb.SSF[65535]] = 0;\n        opts.ssf = wb.SSF;\n        opts.cellXfs = [];\n        get_cell_style(opts.cellXfs, {}, {\n            revssf: {\n                \"General\": 0\n            }\n        });\n    }\n    var d /*:Array<string>*/  = [];\n    d.push(write_props_xlml(wb, opts));\n    d.push(write_wb_xlml(wb, opts));\n    d.push(\"\");\n    d.push(\"\");\n    for(var i = 0; i < wb.SheetNames.length; ++i)d.push(writextag(\"Worksheet\", write_ws_xlml(i, opts, wb), {\n        \"ss:Name\": escapexml(wb.SheetNames[i])\n    }));\n    d[2] = write_sty_xlml(wb, opts);\n    d[3] = write_names_xlml(wb, opts);\n    return XML_HEADER + writextag(\"Workbook\", d.join(\"\"), {\n        \"xmlns\": XLMLNS.ss,\n        \"xmlns:o\": XLMLNS.o,\n        \"xmlns:x\": XLMLNS.x,\n        \"xmlns:ss\": XLMLNS.ss,\n        \"xmlns:dt\": XLMLNS.dt,\n        \"xmlns:html\": XLMLNS.html\n    });\n}\n/* [MS-OLEDS] 2.3.8 CompObjStream */ function parse_compobj(obj /*:CFBEntry*/ ) {\n    var v = {};\n    var o = obj.content;\n    /*:: if(o == null) return; */ /* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */ o.l = 28;\n    v.AnsiUserType = o.read_shift(0, \"lpstr-ansi\");\n    v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);\n    if (o.length - o.l <= 4) return v;\n    var m /*:number*/  = o.read_shift(4);\n    if (m == 0 || m > 40) return v;\n    o.l -= 4;\n    v.Reserved1 = o.read_shift(0, \"lpstr-ansi\");\n    if (o.length - o.l <= 4) return v;\n    m = o.read_shift(4);\n    if (m !== 0x71b239f4) return v;\n    v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);\n    m = o.read_shift(4);\n    if (m == 0 || m > 40) return v;\n    o.l -= 4;\n    v.Reserved2 = o.read_shift(0, \"lpwstr\");\n}\n/*\n\tContinue logic for:\n\t- 2.4.58 Continue          0x003c\n\t- 2.4.59 ContinueBigName   0x043c\n\t- 2.4.60 ContinueFrt       0x0812\n\t- 2.4.61 ContinueFrt11     0x0875\n\t- 2.4.62 ContinueFrt12     0x087f\n*/ var CONTINUE_RT = [\n    0x003c,\n    0x043c,\n    0x0812,\n    0x0875,\n    0x087f\n];\nfunction slurp(RecordType, R, blob, length /*:number*/ , opts) /*:any*/ {\n    var l = length;\n    var bufs = [];\n    var d = blob.slice(blob.l, blob.l + l);\n    if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch(RecordType){\n        case 0x0009:\n        case 0x0209:\n        case 0x0409:\n        case 0x0809 /* BOF */ :\n        case 0x002f /* FilePass */ :\n        case 0x0195 /* FileLock */ :\n        case 0x00e1 /* InterfaceHdr */ :\n        case 0x0196 /* RRDInfo */ :\n        case 0x0138 /* RRDHead */ :\n        case 0x0194 /* UsrExcl */ :\n        case 0x000a /* EOF */ :\n            break;\n        case 0x0085 /* BoundSheet8 */ :\n            break;\n        default:\n            opts.enc.insitu(d);\n    }\n    bufs.push(d);\n    blob.l += l;\n    var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];\n    var start = 0;\n    while(next != null && CONTINUE_RT.indexOf(nextrt) > -1){\n        l = __readUInt16LE(blob, blob.l + 2);\n        start = blob.l + 4;\n        if (nextrt == 0x0812 /* ContinueFrt */ ) start += 4;\n        else if (nextrt == 0x0875 || nextrt == 0x087f) {\n            start += 12;\n        }\n        d = blob.slice(start, blob.l + 4 + l);\n        bufs.push(d);\n        blob.l += 4 + l;\n        next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];\n    }\n    var b = bconcat(bufs);\n    prep_blob(b, 0);\n    var ll = 0;\n    b.lens = [];\n    for(var j = 0; j < bufs.length; ++j){\n        b.lens.push(ll);\n        ll += bufs[j].length;\n    }\n    if (b.length < length) throw \"XLS Record 0x\" + RecordType.toString(16) + \" Truncated: \" + b.length + \" < \" + length;\n    return R.f(b, b.length, opts);\n}\nfunction safe_format_xf(p /*:any*/ , opts /*:ParseOpts*/ , date1904 /*:?boolean*/ ) {\n    if (p.t === \"z\") return;\n    if (!p.XF) return;\n    var fmtid = 0;\n    try {\n        fmtid = p.z || p.XF.numFmtId || 0;\n        if (opts.cellNF) p.z = table_fmt[fmtid];\n    } catch (e) {\n        if (opts.WTF) throw e;\n    }\n    if (!opts || opts.cellText !== false) try {\n        if (p.t === \"e\") {\n            p.w = p.w || BErr[p.v];\n        } else if (fmtid === 0 || fmtid == \"General\") {\n            if (p.t === \"n\") {\n                if ((p.v | 0) === p.v) p.w = p.v.toString(10);\n                else p.w = SSF_general_num(p.v);\n            } else p.w = SSF_general(p.v);\n        } else p.w = SSF_format(fmtid, p.v, {\n            date1904: !!date1904,\n            dateNF: opts && opts.dateNF\n        });\n    } catch (e) {\n        if (opts.WTF) throw e;\n    }\n    if (opts.cellDates && fmtid && p.t == \"n\" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {\n        var _d = SSF_parse_date_code(p.v);\n        if (_d) {\n            p.t = \"d\";\n            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);\n        }\n    }\n}\nfunction make_cell(val, ixfe, t) /*:Cell*/ {\n    return {\n        v: val,\n        ixfe: ixfe,\n        t: t\n    } /*:any*/ ;\n}\n// 2.3.2\nfunction parse_workbook(blob, options /*:ParseOpts*/ ) /*:Workbook*/ {\n    var wb = {\n        opts: {}\n    } /*:any*/ ;\n    var Sheets = {};\n    if (DENSE != null && options.dense == null) options.dense = DENSE;\n    var out /*:Worksheet*/  = options.dense ? [] : {};\n    var Directory = {};\n    var range /*:Range*/  = {} /*:any*/ ;\n    var last_formula = null;\n    var sst /*:SST*/  = [];\n    var cur_sheet = \"\";\n    var Preamble = {};\n    var lastcell, last_cell = \"\", cc /*:Cell*/ , cmnt, rngC, rngR;\n    var sharedf = {};\n    var arrayf /*:Array<[Range, string]>*/  = [];\n    var temp_val /*:Cell*/ ;\n    var country;\n    var XFs = []; /* XF records */ \n    var palette /*:Array<[number, number, number]>*/  = [];\n    var Workbook /*:WBWBProps*/  = {\n        Sheets: [],\n        WBProps: {\n            date1904: false\n        },\n        Views: [\n            {}\n        ]\n    } /*:any*/ , wsprops = {};\n    var get_rgb = function getrgb(icv /*:number*/ ) /*:[number, number, number]*/ {\n        if (icv < 8) return XLSIcv[icv];\n        if (icv < 64) return palette[icv - 8] || XLSIcv[icv];\n        return XLSIcv[icv];\n    };\n    var process_cell_style = function pcs(cell, line /*:any*/ , options) {\n        var xfd = line.XF.data;\n        if (!xfd || !xfd.patternType || !options || !options.cellStyles) return;\n        line.s = {} /*:any*/ ;\n        line.s.patternType = xfd.patternType;\n        var t;\n        if (t = rgb2Hex(get_rgb(xfd.icvFore))) {\n            line.s.fgColor = {\n                rgb: t\n            };\n        }\n        if (t = rgb2Hex(get_rgb(xfd.icvBack))) {\n            line.s.bgColor = {\n                rgb: t\n            };\n        }\n    };\n    var addcell = function addcell(cell /*:any*/ , line /*:any*/ , options /*:any*/ ) {\n        if (file_depth > 1) return;\n        if (options.sheetRows && cell.r >= options.sheetRows) return;\n        if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);\n        delete line.ixfe;\n        delete line.XF;\n        lastcell = cell;\n        last_cell = encode_cell(cell);\n        if (!range || !range.s || !range.e) range = {\n            s: {\n                r: 0,\n                c: 0\n            },\n            e: {\n                r: 0,\n                c: 0\n            }\n        };\n        if (cell.r < range.s.r) range.s.r = cell.r;\n        if (cell.c < range.s.c) range.s.c = cell.c;\n        if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;\n        if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;\n        if (options.cellFormula && line.f) {\n            for(var afi = 0; afi < arrayf.length; ++afi){\n                if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;\n                if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;\n                line.F = encode_range(arrayf[afi][0]);\n                if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;\n                if (line.f) line.f = \"\" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);\n                break;\n            }\n        }\n        {\n            if (options.dense) {\n                if (!out[cell.r]) out[cell.r] = [];\n                out[cell.r][cell.c] = line;\n            } else out[last_cell] = line;\n        }\n    };\n    var opts = {\n        enc: false,\n        sbcch: 0,\n        snames: [],\n        sharedf: sharedf,\n        arrayf: arrayf,\n        rrtabid: [],\n        lastuser: \"\",\n        biff: 8,\n        codepage: 0,\n        winlocked: 0,\n        cellStyles: !!options && !!options.cellStyles,\n        WTF: !!options && !!options.wtf\n    } /*:any*/ ;\n    if (options.password) opts.password = options.password;\n    var themes;\n    var merges /*:Array<Range>*/  = [];\n    var objects = [];\n    var colinfo /*:Array<ColInfo>*/  = [], rowinfo /*:Array<RowInfo>*/  = [];\n    var seencol = false;\n    var supbooks = []; // 1-indexed, will hold extern names\n    supbooks.SheetNames = opts.snames;\n    supbooks.sharedf = opts.sharedf;\n    supbooks.arrayf = opts.arrayf;\n    supbooks.names = [];\n    supbooks.XTI = [];\n    var last_RT = 0;\n    var file_depth = 0; /* TODO: make a real stack */ \n    var BIFF2Fmt = 0, BIFF2FmtTable /*:Array<string>*/  = [];\n    var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */ \n    var last_lbl /*:?DefinedName*/ ;\n    /* explicit override for some broken writers */ opts.codepage = 1200;\n    set_cp(1200);\n    var seen_codepage = false;\n    while(blob.l < blob.length - 1){\n        var s = blob.l;\n        var RecordType = blob.read_shift(2);\n        if (RecordType === 0 && last_RT === 0x000a /* EOF */ ) break;\n        var length = blob.l === blob.length ? 0 : blob.read_shift(2);\n        var R = XLSRecordEnum[RecordType];\n        //console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);\n        //if(!R) console.log(blob.slice(blob.l, blob.l + length));\n        if (R && R.f) {\n            if (options.bookSheets) {\n                if (last_RT === 0x0085 /* BoundSheet8 */  && RecordType !== 0x0085 /* R.n !== 'BoundSheet8' */ ) break;\n            }\n            last_RT = RecordType;\n            if (R.r === 2 || R.r == 12) {\n                var rt = blob.read_shift(2);\n                length -= 2;\n                if (!opts.enc && rt !== RecordType && ((rt & 0xFF) << 8 | rt >> 8) !== RecordType) throw new Error(\"rt mismatch: \" + rt + \"!=\" + RecordType);\n                if (R.r == 12) {\n                    blob.l += 10;\n                    length -= 10;\n                } // skip FRT\n            }\n            //console.error(R,blob.l,length,blob.length);\n            var val /*:any*/  = {} /*:any*/ ;\n            if (RecordType === 0x000a /* EOF */ ) val = /*::(*/ R.f(blob, length, opts) /*:: :any)*/ ;\n            else val = /*::(*/ slurp(RecordType, R, blob, length, opts) /*:: :any)*/ ;\n            /*:: val = (val:any); */ if (file_depth == 0 && [\n                0x0009,\n                0x0209,\n                0x0409,\n                0x0809\n            ].indexOf(last_RT) === -1 /* 'BOF' */ ) continue;\n            switch(RecordType){\n                case 0x0022 /* Date1904 */ :\n                    /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ wb.opts.Date1904 = Workbook.WBProps.date1904 = val;\n                    break;\n                case 0x0086 /* WriteProtect */ :\n                    wb.opts.WriteProtect = true;\n                    break;\n                case 0x002f /* FilePass */ :\n                    if (!opts.enc) blob.l = 0;\n                    opts.enc = val;\n                    if (!options.password) throw new Error(\"File is password-protected\");\n                    if (val.valid == null) throw new Error(\"Encryption scheme unsupported\");\n                    if (!val.valid) throw new Error(\"Password is incorrect\");\n                    break;\n                case 0x005c /* WriteAccess */ :\n                    opts.lastuser = val;\n                    break;\n                case 0x0042 /* CodePage */ :\n                    var cpval = Number(val);\n                    /* overrides based on test cases */ switch(cpval){\n                        case 0x5212:\n                            cpval = 1200;\n                            break;\n                        case 0x8000:\n                            cpval = 10000;\n                            break;\n                        case 0x8001:\n                            cpval = 1252;\n                            break;\n                    }\n                    set_cp(opts.codepage = cpval);\n                    seen_codepage = true;\n                    break;\n                case 0x013d /* RRTabId */ :\n                    opts.rrtabid = val;\n                    break;\n                case 0x0019 /* WinProtect */ :\n                    opts.winlocked = val;\n                    break;\n                case 0x01b7 /* RefreshAll */ :\n                    wb.opts[\"RefreshAll\"] = val;\n                    break;\n                case 0x000c /* CalcCount */ :\n                    wb.opts[\"CalcCount\"] = val;\n                    break;\n                case 0x0010 /* CalcDelta */ :\n                    wb.opts[\"CalcDelta\"] = val;\n                    break;\n                case 0x0011 /* CalcIter */ :\n                    wb.opts[\"CalcIter\"] = val;\n                    break;\n                case 0x000d /* CalcMode */ :\n                    wb.opts[\"CalcMode\"] = val;\n                    break;\n                case 0x000e /* CalcPrecision */ :\n                    wb.opts[\"CalcPrecision\"] = val;\n                    break;\n                case 0x005f /* CalcSaveRecalc */ :\n                    wb.opts[\"CalcSaveRecalc\"] = val;\n                    break;\n                case 0x000f /* CalcRefMode */ :\n                    opts.CalcRefMode = val;\n                    break; // TODO: implement R1C1\n                case 0x08a3 /* ForceFullCalculation */ :\n                    wb.opts.FullCalc = val;\n                    break;\n                case 0x0081 /* WsBool */ :\n                    if (val.fDialog) out[\"!type\"] = \"dialog\";\n                    if (!val.fBelow) (out[\"!outline\"] || (out[\"!outline\"] = {})).above = true;\n                    if (!val.fRight) (out[\"!outline\"] || (out[\"!outline\"] = {})).left = true;\n                    break; // TODO\n                case 0x00e0 /* XF */ :\n                    XFs.push(val);\n                    break;\n                case 0x01ae /* SupBook */ :\n                    supbooks.push([\n                        val\n                    ]);\n                    supbooks[supbooks.length - 1].XTI = [];\n                    break;\n                case 0x0023:\n                case 0x0223 /* ExternName */ :\n                    supbooks[supbooks.length - 1].push(val);\n                    break;\n                case 0x0018:\n                case 0x0218 /* Lbl */ :\n                    last_lbl = {\n                        Name: val.Name,\n                        Ref: stringify_formula(val.rgce, range, null, supbooks, opts)\n                    } /*:DefinedName*/ ;\n                    if (val.itab > 0) last_lbl.Sheet = val.itab - 1;\n                    supbooks.names.push(last_lbl);\n                    if (!supbooks[0]) {\n                        supbooks[0] = [];\n                        supbooks[0].XTI = [];\n                    }\n                    supbooks[supbooks.length - 1].push(val);\n                    if (val.Name == \"_xlnm._FilterDatabase\" && val.itab > 0) {\n                        if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == \"PtgArea3d\") FilterDatabases[val.itab - 1] = {\n                            ref: encode_range(val.rgce[0][0][1][2])\n                        };\n                    }\n                    break;\n                case 0x0016 /* ExternCount */ :\n                    opts.ExternCount = val;\n                    break;\n                case 0x0017 /* ExternSheet */ :\n                    if (supbooks.length == 0) {\n                        supbooks[0] = [];\n                        supbooks[0].XTI = [];\n                    }\n                    supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);\n                    supbooks.XTI = supbooks.XTI.concat(val);\n                    break;\n                case 0x0894 /* NameCmt */ :\n                    /* TODO: search for correct name */ if (opts.biff < 8) break;\n                    if (last_lbl != null) last_lbl.Comment = val[1];\n                    break;\n                case 0x0012 /* Protect */ :\n                    out[\"!protect\"] = val;\n                    break; /* for sheet or book */ \n                case 0x0013 /* Password */ :\n                    if (val !== 0 && opts.WTF) console.error(\"Password verifier: \" + val);\n                    break;\n                case 0x0085 /* BoundSheet8 */ :\n                    {\n                        Directory[val.pos] = val;\n                        opts.snames.push(val.name);\n                    }\n                    break;\n                case 0x000a /* EOF */ :\n                    {\n                        if (--file_depth) break;\n                        if (range.e) {\n                            if (range.e.r > 0 && range.e.c > 0) {\n                                range.e.r--;\n                                range.e.c--;\n                                out[\"!ref\"] = encode_range(range);\n                                if (options.sheetRows && options.sheetRows <= range.e.r) {\n                                    var tmpri = range.e.r;\n                                    range.e.r = options.sheetRows - 1;\n                                    out[\"!fullref\"] = out[\"!ref\"];\n                                    out[\"!ref\"] = encode_range(range);\n                                    range.e.r = tmpri;\n                                }\n                                range.e.r++;\n                                range.e.c++;\n                            }\n                            if (merges.length > 0) out[\"!merges\"] = merges;\n                            if (objects.length > 0) out[\"!objects\"] = objects;\n                            if (colinfo.length > 0) out[\"!cols\"] = colinfo;\n                            if (rowinfo.length > 0) out[\"!rows\"] = rowinfo;\n                            Workbook.Sheets.push(wsprops);\n                        }\n                        if (cur_sheet === \"\") Preamble = out;\n                        else Sheets[cur_sheet] = out;\n                        out = options.dense ? [] : {};\n                    }\n                    break;\n                case 0x0009:\n                case 0x0209:\n                case 0x0409:\n                case 0x0809 /* BOF */ :\n                    {\n                        if (opts.biff === 8) opts.biff = ({\n                            /*::[*/ 0x0009: 2,\n                            /*::[*/ 0x0209: 3,\n                            /*::[*/ 0x0409: 4\n                        })[RecordType] || ({\n                            /*::[*/ 0x0200: 2,\n                            /*::[*/ 0x0300: 3,\n                            /*::[*/ 0x0400: 4,\n                            /*::[*/ 0x0500: 5,\n                            /*::[*/ 0x0600: 8,\n                            /*::[*/ 0x0002: 2,\n                            /*::[*/ 0x0007: 2\n                        })[val.BIFFVer] || 8;\n                        opts.biffguess = val.BIFFVer == 0;\n                        if (val.BIFFVer == 0 && val.dt == 0x1000) {\n                            opts.biff = 5;\n                            seen_codepage = true;\n                            set_cp(opts.codepage = 28591);\n                        }\n                        if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;\n                        if (file_depth++) break;\n                        out = options.dense ? [] : {};\n                        if (opts.biff < 8 && !seen_codepage) {\n                            seen_codepage = true;\n                            set_cp(opts.codepage = options.codepage || 1252);\n                        }\n                        if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {\n                            if (cur_sheet === \"\") cur_sheet = \"Sheet1\";\n                            range = {\n                                s: {\n                                    r: 0,\n                                    c: 0\n                                },\n                                e: {\n                                    r: 0,\n                                    c: 0\n                                }\n                            };\n                            /* fake BoundSheet8 */ var fakebs8 = {\n                                pos: blob.l - length,\n                                name: cur_sheet\n                            };\n                            Directory[fakebs8.pos] = fakebs8;\n                            opts.snames.push(cur_sheet);\n                        } else cur_sheet = (Directory[s] || {\n                            name: \"\"\n                        }).name;\n                        if (val.dt == 0x20) out[\"!type\"] = \"chart\";\n                        if (val.dt == 0x40) out[\"!type\"] = \"macro\";\n                        merges = [];\n                        objects = [];\n                        opts.arrayf = arrayf = [];\n                        colinfo = [];\n                        rowinfo = [];\n                        seencol = false;\n                        wsprops = {\n                            Hidden: (Directory[s] || {\n                                hs: 0\n                            }).hs,\n                            name: cur_sheet\n                        };\n                    }\n                    break;\n                case 0x0203 /* Number */ :\n                case 0x0003 /* BIFF2NUM */ :\n                case 0x0002 /* BIFF2INT */ :\n                    {\n                        if (out[\"!type\"] == \"chart\") {\n                            if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({\n                                c: val.c,\n                                r: val.r\n                            })]) ++val.c;\n                        }\n                        temp_val = {\n                            ixfe: val.ixfe,\n                            XF: XFs[val.ixfe] || {},\n                            v: val.val,\n                            t: \"n\"\n                        } /*:any*/ ;\n                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                        safe_format_xf(temp_val, options, wb.opts.Date1904);\n                        addcell({\n                            c: val.c,\n                            r: val.r\n                        }, temp_val, options);\n                    }\n                    break;\n                case 0x0005:\n                case 0x0205 /* BoolErr */ :\n                    {\n                        temp_val = {\n                            ixfe: val.ixfe,\n                            XF: XFs[val.ixfe],\n                            v: val.val,\n                            t: val.t\n                        } /*:any*/ ;\n                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                        safe_format_xf(temp_val, options, wb.opts.Date1904);\n                        addcell({\n                            c: val.c,\n                            r: val.r\n                        }, temp_val, options);\n                    }\n                    break;\n                case 0x027e /* RK */ :\n                    {\n                        temp_val = {\n                            ixfe: val.ixfe,\n                            XF: XFs[val.ixfe],\n                            v: val.rknum,\n                            t: \"n\"\n                        } /*:any*/ ;\n                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                        safe_format_xf(temp_val, options, wb.opts.Date1904);\n                        addcell({\n                            c: val.c,\n                            r: val.r\n                        }, temp_val, options);\n                    }\n                    break;\n                case 0x00bd /* MulRk */ :\n                    {\n                        for(var j = val.c; j <= val.C; ++j){\n                            var ixfe = val.rkrec[j - val.c][0];\n                            temp_val = {\n                                ixfe: ixfe,\n                                XF: XFs[ixfe],\n                                v: val.rkrec[j - val.c][1],\n                                t: \"n\"\n                            } /*:any*/ ;\n                            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                            safe_format_xf(temp_val, options, wb.opts.Date1904);\n                            addcell({\n                                c: j,\n                                r: val.r\n                            }, temp_val, options);\n                        }\n                    }\n                    break;\n                case 0x0006:\n                case 0x0206:\n                case 0x0406 /* Formula */ :\n                    {\n                        if (val.val == \"String\") {\n                            last_formula = val;\n                            break;\n                        }\n                        temp_val = make_cell(val.val, val.cell.ixfe, val.tt);\n                        temp_val.XF = XFs[temp_val.ixfe];\n                        if (options.cellFormula) {\n                            var _f = val.formula;\n                            if (_f && _f[0] && _f[0][0] && _f[0][0][0] == \"PtgExp\") {\n                                var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];\n                                var _fe = encode_cell({\n                                    r: _fr,\n                                    c: _fc\n                                });\n                                if (sharedf[_fe]) temp_val.f = \"\" + stringify_formula(val.formula, range, val.cell, supbooks, opts);\n                                else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;\n                            } else temp_val.f = \"\" + stringify_formula(val.formula, range, val.cell, supbooks, opts);\n                        }\n                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                        safe_format_xf(temp_val, options, wb.opts.Date1904);\n                        addcell(val.cell, temp_val, options);\n                        last_formula = val;\n                    }\n                    break;\n                case 0x0007:\n                case 0x0207 /* String */ :\n                    {\n                        if (last_formula) {\n                            last_formula.val = val;\n                            temp_val = make_cell(val, last_formula.cell.ixfe, \"s\");\n                            temp_val.XF = XFs[temp_val.ixfe];\n                            if (options.cellFormula) {\n                                temp_val.f = \"\" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);\n                            }\n                            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                            safe_format_xf(temp_val, options, wb.opts.Date1904);\n                            addcell(last_formula.cell, temp_val, options);\n                            last_formula = null;\n                        } else throw new Error(\"String record expects Formula\");\n                    }\n                    break;\n                case 0x0021:\n                case 0x0221 /* Array */ :\n                    {\n                        arrayf.push(val);\n                        var _arraystart = encode_cell(val[0].s);\n                        cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];\n                        if (options.cellFormula && cc) {\n                            if (!last_formula) break; /* technically unreachable */ \n                            if (!_arraystart || !cc) break;\n                            cc.f = \"\" + stringify_formula(val[1], range, val[0], supbooks, opts);\n                            cc.F = encode_range(val[0]);\n                        }\n                    }\n                    break;\n                case 0x04bc /* ShrFmla */ :\n                    {\n                        if (!options.cellFormula) break;\n                        if (last_cell) {\n                            /* TODO: capture range */ if (!last_formula) break; /* technically unreachable */ \n                            sharedf[encode_cell(last_formula.cell)] = val[0];\n                            cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];\n                            (cc || {}).f = \"\" + stringify_formula(val[0], range, lastcell, supbooks, opts);\n                        }\n                    }\n                    break;\n                case 0x00fd /* LabelSst */ :\n                    temp_val = make_cell(sst[val.isst].t, val.ixfe, \"s\");\n                    if (sst[val.isst].h) temp_val.h = sst[val.isst].h;\n                    temp_val.XF = XFs[temp_val.ixfe];\n                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                    safe_format_xf(temp_val, options, wb.opts.Date1904);\n                    addcell({\n                        c: val.c,\n                        r: val.r\n                    }, temp_val, options);\n                    break;\n                case 0x0201 /* Blank */ :\n                    if (options.sheetStubs) {\n                        temp_val = {\n                            ixfe: val.ixfe,\n                            XF: XFs[val.ixfe],\n                            t: \"z\"\n                        } /*:any*/ ;\n                        if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                        safe_format_xf(temp_val, options, wb.opts.Date1904);\n                        addcell({\n                            c: val.c,\n                            r: val.r\n                        }, temp_val, options);\n                    }\n                    break;\n                case 0x00be /* MulBlank */ :\n                    if (options.sheetStubs) {\n                        for(var _j = val.c; _j <= val.C; ++_j){\n                            var _ixfe = val.ixfe[_j - val.c];\n                            temp_val = {\n                                ixfe: _ixfe,\n                                XF: XFs[_ixfe],\n                                t: \"z\"\n                            } /*:any*/ ;\n                            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                            safe_format_xf(temp_val, options, wb.opts.Date1904);\n                            addcell({\n                                c: _j,\n                                r: val.r\n                            }, temp_val, options);\n                        }\n                    }\n                    break;\n                case 0x00d6 /* RString */ :\n                case 0x0204 /* Label */ :\n                case 0x0004 /* BIFF2STR */ :\n                    temp_val = make_cell(val.val, val.ixfe, \"s\");\n                    temp_val.XF = XFs[temp_val.ixfe];\n                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 0x3F];\n                    safe_format_xf(temp_val, options, wb.opts.Date1904);\n                    addcell({\n                        c: val.c,\n                        r: val.r\n                    }, temp_val, options);\n                    break;\n                case 0x0000:\n                case 0x0200 /* Dimensions */ :\n                    {\n                        if (file_depth === 1) range = val; /* TODO: stack */ \n                    }\n                    break;\n                case 0x00fc /* SST */ :\n                    {\n                        sst = val;\n                    }\n                    break;\n                case 0x041e /* Format */ :\n                    {\n                        if (opts.biff == 4) {\n                            BIFF2FmtTable[BIFF2Fmt++] = val[1];\n                            for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)if (table_fmt[b4idx] == val[1]) break;\n                            if (b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);\n                        } else SSF_load(val[1], val[0]);\n                    }\n                    break;\n                case 0x001e /* BIFF2FORMAT */ :\n                    {\n                        BIFF2FmtTable[BIFF2Fmt++] = val;\n                        for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)if (table_fmt[b2idx] == val) break;\n                        if (b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);\n                    }\n                    break;\n                case 0x00e5 /* MergeCells */ :\n                    merges = merges.concat(val);\n                    break;\n                case 0x005d /* Obj */ :\n                    objects[val.cmo[0]] = opts.lastobj = val;\n                    break;\n                case 0x01b6 /* TxO */ :\n                    opts.lastobj.TxO = val;\n                    break;\n                case 0x007f /* ImData */ :\n                    opts.lastobj.ImData = val;\n                    break;\n                case 0x01b8 /* HLink */ :\n                    {\n                        for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC){\n                            cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({\n                                c: rngC,\n                                r: rngR\n                            })];\n                            if (cc) cc.l = val[1];\n                        }\n                    }\n                    break;\n                case 0x0800 /* HLinkTooltip */ :\n                    {\n                        for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC){\n                            cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({\n                                c: rngC,\n                                r: rngR\n                            })];\n                            if (cc && cc.l) cc.l.Tooltip = val[1];\n                        }\n                    }\n                    break;\n                case 0x001c /* Note */ :\n                    {\n                        if (opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */ \n                        cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];\n                        var noteobj = objects[val[2]];\n                        if (!cc) {\n                            if (options.dense) {\n                                if (!out[val[0].r]) out[val[0].r] = [];\n                                cc = out[val[0].r][val[0].c] = {\n                                    t: \"z\"\n                                } /*:any*/ ;\n                            } else {\n                                cc = out[encode_cell(val[0])] = {\n                                    t: \"z\"\n                                } /*:any*/ ;\n                            }\n                            range.e.r = Math.max(range.e.r, val[0].r);\n                            range.s.r = Math.min(range.s.r, val[0].r);\n                            range.e.c = Math.max(range.e.c, val[0].c);\n                            range.s.c = Math.min(range.s.c, val[0].c);\n                        }\n                        if (!cc.c) cc.c = [];\n                        cmnt = {\n                            a: val[1],\n                            t: noteobj.TxO.t\n                        };\n                        cc.c.push(cmnt);\n                    }\n                    break;\n                case 0x087d /* XFExt */ :\n                    update_xfext(XFs[val.ixfe], val.ext);\n                    break;\n                case 0x007d /* ColInfo */ :\n                    {\n                        if (!opts.cellStyles) break;\n                        while(val.e >= val.s){\n                            colinfo[val.e--] = {\n                                width: val.w / 256,\n                                level: val.level || 0,\n                                hidden: !!(val.flags & 1)\n                            };\n                            if (!seencol) {\n                                seencol = true;\n                                find_mdw_colw(val.w / 256);\n                            }\n                            process_col(colinfo[val.e + 1]);\n                        }\n                    }\n                    break;\n                case 0x0208 /* Row */ :\n                    {\n                        var rowobj = {};\n                        if (val.level != null) {\n                            rowinfo[val.r] = rowobj;\n                            rowobj.level = val.level;\n                        }\n                        if (val.hidden) {\n                            rowinfo[val.r] = rowobj;\n                            rowobj.hidden = true;\n                        }\n                        if (val.hpt) {\n                            rowinfo[val.r] = rowobj;\n                            rowobj.hpt = val.hpt;\n                            rowobj.hpx = pt2px(val.hpt);\n                        }\n                    }\n                    break;\n                case 0x0026 /* LeftMargin */ :\n                case 0x0027 /* RightMargin */ :\n                case 0x0028 /* TopMargin */ :\n                case 0x0029 /* BottomMargin */ :\n                    if (!out[\"!margins\"]) default_margins(out[\"!margins\"] = {});\n                    out[\"!margins\"][({\n                        0x26: \"left\",\n                        0x27: \"right\",\n                        0x28: \"top\",\n                        0x29: \"bottom\"\n                    })[RecordType]] = val;\n                    break;\n                case 0x00a1 /* Setup */ :\n                    if (!out[\"!margins\"]) default_margins(out[\"!margins\"] = {});\n                    out[\"!margins\"].header = val.header;\n                    out[\"!margins\"].footer = val.footer;\n                    break;\n                case 0x023e /* Window2 */ :\n                    // $FlowIgnore\n                    if (val.RTL) Workbook.Views[0].RTL = true;\n                    break;\n                case 0x0092 /* Palette */ :\n                    palette = val;\n                    break;\n                case 0x0896 /* Theme */ :\n                    themes = val;\n                    break;\n                case 0x008c /* Country */ :\n                    country = val;\n                    break;\n                case 0x01ba /* CodeName */ :\n                    {\n                        /*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */ if (!cur_sheet) Workbook.WBProps.CodeName = val || \"ThisWorkbook\";\n                        else wsprops.CodeName = val || wsprops.name;\n                    }\n                    break;\n            }\n        } else {\n            if (!R) console.error(\"Missing Info for XLS Record 0x\" + RecordType.toString(16));\n            blob.l += length;\n        }\n    }\n    wb.SheetNames = keys(Directory).sort(function(a, b) {\n        return Number(a) - Number(b);\n    }).map(function(x) {\n        return Directory[x].name;\n    });\n    if (!options.bookSheets) wb.Sheets = Sheets;\n    if (!wb.SheetNames.length && Preamble[\"!ref\"]) {\n        wb.SheetNames.push(\"Sheet1\");\n        /*jshint -W069 */ if (wb.Sheets) wb.Sheets[\"Sheet1\"] = Preamble;\n    /*jshint +W069 */ } else wb.Preamble = Preamble;\n    if (wb.Sheets) FilterDatabases.forEach(function(r, i) {\n        wb.Sheets[wb.SheetNames[i]][\"!autofilter\"] = r;\n    });\n    wb.Strings = sst;\n    wb.SSF = dup(table_fmt);\n    if (opts.enc) wb.Encryption = opts.enc;\n    if (themes) wb.Themes = themes;\n    wb.Metadata = {};\n    if (country !== undefined) wb.Metadata.Country = country;\n    if (supbooks.names.length > 0) Workbook.Names = supbooks.names;\n    wb.Workbook = Workbook;\n    return wb;\n}\n/* TODO: split props*/ var PSCLSID = {\n    SI: \"e0859ff2f94f6810ab9108002b27b3d9\",\n    DSI: \"02d5cdd59c2e1b10939708002b2cf9ae\",\n    UDI: \"05d5cdd59c2e1b10939708002b2cf9ae\"\n};\nfunction parse_xls_props(cfb /*:CFBContainer*/ , props, o) {\n    /* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */ var DSI = CFB.find(cfb, \"/!DocumentSummaryInformation\");\n    if (DSI && DSI.size > 0) try {\n        var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);\n        for(var d in DocSummary)props[d] = DocSummary[d];\n    } catch (e) {\n        if (o.WTF) throw e; /* empty */ \n    }\n    /* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/ var SI = CFB.find(cfb, \"/!SummaryInformation\");\n    if (SI && SI.size > 0) try {\n        var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);\n        for(var s in Summary)if (props[s] == null) props[s] = Summary[s];\n    } catch (e) {\n        if (o.WTF) throw e; /* empty */ \n    }\n    if (props.HeadingPairs && props.TitlesOfParts) {\n        load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);\n        delete props.HeadingPairs;\n        delete props.TitlesOfParts;\n    }\n}\nfunction write_xls_props(wb /*:Workbook*/ , cfb /*:CFBContainer*/ ) {\n    var DSEntries = [], SEntries = [], CEntries = [];\n    var i = 0, Keys;\n    var DocSummaryRE /*:{[key:string]:string}*/  = evert_key(DocSummaryPIDDSI, \"n\");\n    var SummaryRE /*:{[key:string]:string}*/  = evert_key(SummaryPIDSI, \"n\");\n    if (wb.Props) {\n        Keys = keys(wb.Props);\n        // $FlowIgnore\n        for(i = 0; i < Keys.length; ++i)(Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([\n            Keys[i],\n            wb.Props[Keys[i]]\n        ]);\n    }\n    if (wb.Custprops) {\n        Keys = keys(wb.Custprops);\n        // $FlowIgnore\n        for(i = 0; i < Keys.length; ++i)if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([\n            Keys[i],\n            wb.Custprops[Keys[i]]\n        ]);\n    }\n    var CEntries2 = [];\n    for(i = 0; i < CEntries.length; ++i){\n        if (XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1) continue;\n        if (CEntries[i][1] == null) continue;\n        CEntries2.push(CEntries[i]);\n    }\n    if (SEntries.length) CFB.utils.cfb_add(cfb, \"/\\x05SummaryInformation\", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));\n    if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, \"/\\x05DocumentSummaryInformation\", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));\n}\nfunction parse_xlscfb(cfb /*:any*/ , options /*:?ParseOpts*/ ) /*:Workbook*/ {\n    if (!options) options = {};\n    fix_read_opts(options);\n    reset_cp();\n    if (options.codepage) set_ansi(options.codepage);\n    var CompObj /*:?CFBEntry*/ , WB /*:?any*/ ;\n    if (cfb.FullPaths) {\n        if (CFB.find(cfb, \"/encryption\")) throw new Error(\"File is password-protected\");\n        CompObj = CFB.find(cfb, \"!CompObj\");\n        WB = CFB.find(cfb, \"/Workbook\") || CFB.find(cfb, \"/Book\");\n    } else {\n        switch(options.type){\n            case \"base64\":\n                cfb = s2a(Base64_decode(cfb));\n                break;\n            case \"binary\":\n                cfb = s2a(cfb);\n                break;\n            case \"buffer\":\n                break;\n            case \"array\":\n                if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);\n                break;\n        }\n        prep_blob(cfb, 0);\n        WB = {\n            content: cfb\n        } /*:any*/ ;\n    }\n    var /*::CompObjP, */ WorkbookP /*:: :Workbook = XLSX.utils.book_new(); */ ;\n    var _data /*:?any*/ ;\n    if (CompObj) /*::CompObjP = */ parse_compobj(CompObj);\n    if (options.bookProps && !options.bookSheets) WorkbookP = {} /*:any*/ ;\n    else /*:: if(cfb instanceof CFBContainer) */ {\n        var T = has_buf ? \"buffer\" : \"array\";\n        if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);\n        else if ((_data = CFB.find(cfb, \"PerfectOffice_MAIN\")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));\n        else if ((_data = CFB.find(cfb, \"NativeContent_MAIN\")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));\n        else if ((_data = CFB.find(cfb, \"MN0\")) && _data.content) throw new Error(\"Unsupported Works 4 for Mac file\");\n        else throw new Error(\"Cannot find Workbook stream\");\n        if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, \"/_VBA_PROJECT_CUR/VBA/dir\")) WorkbookP.vbaraw = make_vba_xls(cfb);\n    }\n    var props = {};\n    if (cfb.FullPaths) parse_xls_props(/*::((*/ cfb /*:: :any):CFBContainer)*/ , props, options);\n    WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */ \n    if (options.bookFiles) WorkbookP.cfb = cfb;\n    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */ return WorkbookP;\n}\nfunction write_xlscfb(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:CFBContainer*/ {\n    var o = opts || {};\n    var cfb = CFB.utils.cfb_new({\n        root: \"R\"\n    });\n    var wbpath = \"/Workbook\";\n    switch(o.bookType || \"xls\"){\n        case \"xls\":\n            o.bookType = \"biff8\";\n        /* falls through */ case \"xla\":\n            if (!o.bookType) o.bookType = \"xla\";\n        /* falls through */ case \"biff8\":\n            wbpath = \"/Workbook\";\n            o.biff = 8;\n            break;\n        case \"biff5\":\n            wbpath = \"/Book\";\n            o.biff = 5;\n            break;\n        default:\n            throw new Error(\"invalid type \" + o.bookType + \" for XLS CFB\");\n    }\n    CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));\n    if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);\n    // TODO: SI, DSI, CO\n    if (o.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, {\n        type: typeof wb.vbaraw == \"string\" ? \"binary\" : \"buffer\"\n    }));\n    return cfb;\n}\n/* [MS-XLSB] 2.3 Record Enumeration */ var XLSBRecordEnum = {\n    /*::[*/ 0x0000: {\n        f: parse_BrtRowHdr\n    },\n    /*::[*/ 0x0001: {\n        f: parse_BrtCellBlank\n    },\n    /*::[*/ 0x0002: {\n        f: parse_BrtCellRk\n    },\n    /*::[*/ 0x0003: {\n        f: parse_BrtCellError\n    },\n    /*::[*/ 0x0004: {\n        f: parse_BrtCellBool\n    },\n    /*::[*/ 0x0005: {\n        f: parse_BrtCellReal\n    },\n    /*::[*/ 0x0006: {\n        f: parse_BrtCellSt\n    },\n    /*::[*/ 0x0007: {\n        f: parse_BrtCellIsst\n    },\n    /*::[*/ 0x0008: {\n        f: parse_BrtFmlaString\n    },\n    /*::[*/ 0x0009: {\n        f: parse_BrtFmlaNum\n    },\n    /*::[*/ 0x000A: {\n        f: parse_BrtFmlaBool\n    },\n    /*::[*/ 0x000B: {\n        f: parse_BrtFmlaError\n    },\n    /*::[*/ 0x000C: {\n        f: parse_BrtShortBlank\n    },\n    /*::[*/ 0x000D: {\n        f: parse_BrtShortRk\n    },\n    /*::[*/ 0x000E: {\n        f: parse_BrtShortError\n    },\n    /*::[*/ 0x000F: {\n        f: parse_BrtShortBool\n    },\n    /*::[*/ 0x0010: {\n        f: parse_BrtShortReal\n    },\n    /*::[*/ 0x0011: {\n        f: parse_BrtShortSt\n    },\n    /*::[*/ 0x0012: {\n        f: parse_BrtShortIsst\n    },\n    /*::[*/ 0x0013: {\n        f: parse_RichStr\n    },\n    /*::[*/ 0x0014: {},\n    /*::[*/ 0x0015: {},\n    /*::[*/ 0x0016: {},\n    /*::[*/ 0x0017: {},\n    /*::[*/ 0x0018: {},\n    /*::[*/ 0x0019: {},\n    /*::[*/ 0x001A: {},\n    /*::[*/ 0x001B: {},\n    /*::[*/ 0x001C: {},\n    /*::[*/ 0x001D: {},\n    /*::[*/ 0x001E: {},\n    /*::[*/ 0x001F: {},\n    /*::[*/ 0x0020: {},\n    /*::[*/ 0x0021: {},\n    /*::[*/ 0x0022: {},\n    /*::[*/ 0x0023: {\n        T: 1\n    },\n    /*::[*/ 0x0024: {\n        T: -1\n    },\n    /*::[*/ 0x0025: {\n        T: 1\n    },\n    /*::[*/ 0x0026: {\n        T: -1\n    },\n    /*::[*/ 0x0027: {\n        f: parse_BrtName\n    },\n    /*::[*/ 0x0028: {},\n    /*::[*/ 0x002A: {},\n    /*::[*/ 0x002B: {\n        f: parse_BrtFont\n    },\n    /*::[*/ 0x002C: {\n        f: parse_BrtFmt\n    },\n    /*::[*/ 0x002D: {\n        f: parse_BrtFill\n    },\n    /*::[*/ 0x002E: {\n        f: parse_BrtBorder\n    },\n    /*::[*/ 0x002F: {\n        f: parse_BrtXF\n    },\n    /*::[*/ 0x0030: {},\n    /*::[*/ 0x0031: {\n        f: parse_Int32LE\n    },\n    /*::[*/ 0x0032: {},\n    /*::[*/ 0x0033: {\n        f: parse_BrtMdb\n    },\n    /*::[*/ 0x0034: {\n        T: 1\n    },\n    /*::[*/ 0x0035: {\n        T: -1\n    },\n    /*::[*/ 0x0036: {\n        T: 1\n    },\n    /*::[*/ 0x0037: {\n        T: -1\n    },\n    /*::[*/ 0x0038: {\n        T: 1\n    },\n    /*::[*/ 0x0039: {\n        T: -1\n    },\n    /*::[*/ 0x003A: {},\n    /*::[*/ 0x003B: {},\n    /*::[*/ 0x003C: {\n        f: parse_ColInfo\n    },\n    /*::[*/ 0x003E: {\n        f: parse_BrtCellRString\n    },\n    /*::[*/ 0x003F: {\n        f: parse_BrtCalcChainItem$\n    },\n    /*::[*/ 0x0040: {\n        f: parse_BrtDVal\n    },\n    /*::[*/ 0x0041: {},\n    /*::[*/ 0x0042: {},\n    /*::[*/ 0x0043: {},\n    /*::[*/ 0x0044: {},\n    /*::[*/ 0x0045: {},\n    /*::[*/ 0x0046: {},\n    /*::[*/ 0x0080: {},\n    /*::[*/ 0x0081: {\n        T: 1\n    },\n    /*::[*/ 0x0082: {\n        T: -1\n    },\n    /*::[*/ 0x0083: {\n        T: 1,\n        f: parsenoop,\n        p: 0\n    },\n    /*::[*/ 0x0084: {\n        T: -1\n    },\n    /*::[*/ 0x0085: {\n        T: 1\n    },\n    /*::[*/ 0x0086: {\n        T: -1\n    },\n    /*::[*/ 0x0087: {\n        T: 1\n    },\n    /*::[*/ 0x0088: {\n        T: -1\n    },\n    /*::[*/ 0x0089: {\n        T: 1,\n        f: parse_BrtBeginWsView\n    },\n    /*::[*/ 0x008A: {\n        T: -1\n    },\n    /*::[*/ 0x008B: {\n        T: 1\n    },\n    /*::[*/ 0x008C: {\n        T: -1\n    },\n    /*::[*/ 0x008D: {\n        T: 1\n    },\n    /*::[*/ 0x008E: {\n        T: -1\n    },\n    /*::[*/ 0x008F: {\n        T: 1\n    },\n    /*::[*/ 0x0090: {\n        T: -1\n    },\n    /*::[*/ 0x0091: {\n        T: 1\n    },\n    /*::[*/ 0x0092: {\n        T: -1\n    },\n    /*::[*/ 0x0093: {\n        f: parse_BrtWsProp\n    },\n    /*::[*/ 0x0094: {\n        f: parse_BrtWsDim,\n        p: 16\n    },\n    /*::[*/ 0x0097: {\n        f: parse_BrtPane\n    },\n    /*::[*/ 0x0098: {},\n    /*::[*/ 0x0099: {\n        f: parse_BrtWbProp\n    },\n    /*::[*/ 0x009A: {},\n    /*::[*/ 0x009B: {},\n    /*::[*/ 0x009C: {\n        f: parse_BrtBundleSh\n    },\n    /*::[*/ 0x009D: {},\n    /*::[*/ 0x009E: {},\n    /*::[*/ 0x009F: {\n        T: 1,\n        f: parse_BrtBeginSst\n    },\n    /*::[*/ 0x00A0: {\n        T: -1\n    },\n    /*::[*/ 0x00A1: {\n        T: 1,\n        f: parse_UncheckedRfX\n    },\n    /*::[*/ 0x00A2: {\n        T: -1\n    },\n    /*::[*/ 0x00A3: {\n        T: 1\n    },\n    /*::[*/ 0x00A4: {\n        T: -1\n    },\n    /*::[*/ 0x00A5: {\n        T: 1\n    },\n    /*::[*/ 0x00A6: {\n        T: -1\n    },\n    /*::[*/ 0x00A7: {},\n    /*::[*/ 0x00A8: {},\n    /*::[*/ 0x00A9: {},\n    /*::[*/ 0x00AA: {},\n    /*::[*/ 0x00AB: {},\n    /*::[*/ 0x00AC: {\n        T: 1\n    },\n    /*::[*/ 0x00AD: {\n        T: -1\n    },\n    /*::[*/ 0x00AE: {},\n    /*::[*/ 0x00AF: {},\n    /*::[*/ 0x00B0: {\n        f: parse_BrtMergeCell\n    },\n    /*::[*/ 0x00B1: {\n        T: 1\n    },\n    /*::[*/ 0x00B2: {\n        T: -1\n    },\n    /*::[*/ 0x00B3: {\n        T: 1\n    },\n    /*::[*/ 0x00B4: {\n        T: -1\n    },\n    /*::[*/ 0x00B5: {\n        T: 1\n    },\n    /*::[*/ 0x00B6: {\n        T: -1\n    },\n    /*::[*/ 0x00B7: {\n        T: 1\n    },\n    /*::[*/ 0x00B8: {\n        T: -1\n    },\n    /*::[*/ 0x00B9: {\n        T: 1\n    },\n    /*::[*/ 0x00BA: {\n        T: -1\n    },\n    /*::[*/ 0x00BB: {\n        T: 1\n    },\n    /*::[*/ 0x00BC: {\n        T: -1\n    },\n    /*::[*/ 0x00BD: {\n        T: 1\n    },\n    /*::[*/ 0x00BE: {\n        T: -1\n    },\n    /*::[*/ 0x00BF: {\n        T: 1\n    },\n    /*::[*/ 0x00C0: {\n        T: -1\n    },\n    /*::[*/ 0x00C1: {\n        T: 1\n    },\n    /*::[*/ 0x00C2: {\n        T: -1\n    },\n    /*::[*/ 0x00C3: {\n        T: 1\n    },\n    /*::[*/ 0x00C4: {\n        T: -1\n    },\n    /*::[*/ 0x00C5: {\n        T: 1\n    },\n    /*::[*/ 0x00C6: {\n        T: -1\n    },\n    /*::[*/ 0x00C7: {\n        T: 1\n    },\n    /*::[*/ 0x00C8: {\n        T: -1\n    },\n    /*::[*/ 0x00C9: {\n        T: 1\n    },\n    /*::[*/ 0x00CA: {\n        T: -1\n    },\n    /*::[*/ 0x00CB: {\n        T: 1\n    },\n    /*::[*/ 0x00CC: {\n        T: -1\n    },\n    /*::[*/ 0x00CD: {\n        T: 1\n    },\n    /*::[*/ 0x00CE: {\n        T: -1\n    },\n    /*::[*/ 0x00CF: {\n        T: 1\n    },\n    /*::[*/ 0x00D0: {\n        T: -1\n    },\n    /*::[*/ 0x00D1: {\n        T: 1\n    },\n    /*::[*/ 0x00D2: {\n        T: -1\n    },\n    /*::[*/ 0x00D3: {\n        T: 1\n    },\n    /*::[*/ 0x00D4: {\n        T: -1\n    },\n    /*::[*/ 0x00D5: {\n        T: 1\n    },\n    /*::[*/ 0x00D6: {\n        T: -1\n    },\n    /*::[*/ 0x00D7: {\n        T: 1\n    },\n    /*::[*/ 0x00D8: {\n        T: -1\n    },\n    /*::[*/ 0x00D9: {\n        T: 1\n    },\n    /*::[*/ 0x00DA: {\n        T: -1\n    },\n    /*::[*/ 0x00DB: {\n        T: 1\n    },\n    /*::[*/ 0x00DC: {\n        T: -1\n    },\n    /*::[*/ 0x00DD: {\n        T: 1\n    },\n    /*::[*/ 0x00DE: {\n        T: -1\n    },\n    /*::[*/ 0x00DF: {\n        T: 1\n    },\n    /*::[*/ 0x00E0: {\n        T: -1\n    },\n    /*::[*/ 0x00E1: {\n        T: 1\n    },\n    /*::[*/ 0x00E2: {\n        T: -1\n    },\n    /*::[*/ 0x00E3: {\n        T: 1\n    },\n    /*::[*/ 0x00E4: {\n        T: -1\n    },\n    /*::[*/ 0x00E5: {\n        T: 1\n    },\n    /*::[*/ 0x00E6: {\n        T: -1\n    },\n    /*::[*/ 0x00E7: {\n        T: 1\n    },\n    /*::[*/ 0x00E8: {\n        T: -1\n    },\n    /*::[*/ 0x00E9: {\n        T: 1\n    },\n    /*::[*/ 0x00EA: {\n        T: -1\n    },\n    /*::[*/ 0x00EB: {\n        T: 1\n    },\n    /*::[*/ 0x00EC: {\n        T: -1\n    },\n    /*::[*/ 0x00ED: {\n        T: 1\n    },\n    /*::[*/ 0x00EE: {\n        T: -1\n    },\n    /*::[*/ 0x00EF: {\n        T: 1\n    },\n    /*::[*/ 0x00F0: {\n        T: -1\n    },\n    /*::[*/ 0x00F1: {\n        T: 1\n    },\n    /*::[*/ 0x00F2: {\n        T: -1\n    },\n    /*::[*/ 0x00F3: {\n        T: 1\n    },\n    /*::[*/ 0x00F4: {\n        T: -1\n    },\n    /*::[*/ 0x00F5: {\n        T: 1\n    },\n    /*::[*/ 0x00F6: {\n        T: -1\n    },\n    /*::[*/ 0x00F7: {\n        T: 1\n    },\n    /*::[*/ 0x00F8: {\n        T: -1\n    },\n    /*::[*/ 0x00F9: {\n        T: 1\n    },\n    /*::[*/ 0x00FA: {\n        T: -1\n    },\n    /*::[*/ 0x00FB: {\n        T: 1\n    },\n    /*::[*/ 0x00FC: {\n        T: -1\n    },\n    /*::[*/ 0x00FD: {\n        T: 1\n    },\n    /*::[*/ 0x00FE: {\n        T: -1\n    },\n    /*::[*/ 0x00FF: {\n        T: 1\n    },\n    /*::[*/ 0x0100: {\n        T: -1\n    },\n    /*::[*/ 0x0101: {\n        T: 1\n    },\n    /*::[*/ 0x0102: {\n        T: -1\n    },\n    /*::[*/ 0x0103: {\n        T: 1\n    },\n    /*::[*/ 0x0104: {\n        T: -1\n    },\n    /*::[*/ 0x0105: {\n        T: 1\n    },\n    /*::[*/ 0x0106: {\n        T: -1\n    },\n    /*::[*/ 0x0107: {\n        T: 1\n    },\n    /*::[*/ 0x0108: {\n        T: -1\n    },\n    /*::[*/ 0x0109: {\n        T: 1\n    },\n    /*::[*/ 0x010A: {\n        T: -1\n    },\n    /*::[*/ 0x010B: {\n        T: 1\n    },\n    /*::[*/ 0x010C: {\n        T: -1\n    },\n    /*::[*/ 0x010D: {\n        T: 1\n    },\n    /*::[*/ 0x010E: {\n        T: -1\n    },\n    /*::[*/ 0x010F: {\n        T: 1\n    },\n    /*::[*/ 0x0110: {\n        T: -1\n    },\n    /*::[*/ 0x0111: {\n        T: 1\n    },\n    /*::[*/ 0x0112: {\n        T: -1\n    },\n    /*::[*/ 0x0113: {\n        T: 1\n    },\n    /*::[*/ 0x0114: {\n        T: -1\n    },\n    /*::[*/ 0x0115: {},\n    /*::[*/ 0x0116: {\n        T: 1\n    },\n    /*::[*/ 0x0117: {\n        T: -1\n    },\n    /*::[*/ 0x0118: {\n        T: 1\n    },\n    /*::[*/ 0x0119: {\n        T: -1\n    },\n    /*::[*/ 0x011A: {\n        T: 1\n    },\n    /*::[*/ 0x011B: {\n        T: 1\n    },\n    /*::[*/ 0x011C: {\n        T: -1\n    },\n    /*::[*/ 0x011D: {\n        T: 1\n    },\n    /*::[*/ 0x011E: {\n        T: -1\n    },\n    /*::[*/ 0x011F: {\n        T: 1\n    },\n    /*::[*/ 0x0120: {\n        T: -1\n    },\n    /*::[*/ 0x0121: {\n        T: 1\n    },\n    /*::[*/ 0x0122: {\n        T: -1\n    },\n    /*::[*/ 0x0123: {\n        T: 1\n    },\n    /*::[*/ 0x0124: {\n        T: -1\n    },\n    /*::[*/ 0x0125: {\n        T: 1\n    },\n    /*::[*/ 0x0126: {\n        T: -1\n    },\n    /*::[*/ 0x0127: {\n        T: 1\n    },\n    /*::[*/ 0x0128: {\n        T: -1\n    },\n    /*::[*/ 0x0129: {\n        T: 1\n    },\n    /*::[*/ 0x012A: {\n        T: -1\n    },\n    /*::[*/ 0x012B: {\n        T: 1\n    },\n    /*::[*/ 0x012C: {\n        T: -1\n    },\n    /*::[*/ 0x012D: {\n        T: 1\n    },\n    /*::[*/ 0x012E: {\n        T: -1\n    },\n    /*::[*/ 0x012F: {\n        T: 1\n    },\n    /*::[*/ 0x0130: {\n        T: -1\n    },\n    /*::[*/ 0x0131: {\n        T: 1\n    },\n    /*::[*/ 0x0132: {\n        T: -1\n    },\n    /*::[*/ 0x0133: {\n        T: 1\n    },\n    /*::[*/ 0x0134: {\n        T: -1\n    },\n    /*::[*/ 0x0135: {\n        T: 1\n    },\n    /*::[*/ 0x0136: {\n        T: -1\n    },\n    /*::[*/ 0x0137: {\n        T: 1\n    },\n    /*::[*/ 0x0138: {\n        T: -1\n    },\n    /*::[*/ 0x0139: {\n        T: -1\n    },\n    /*::[*/ 0x013A: {\n        T: 1\n    },\n    /*::[*/ 0x013B: {\n        T: -1\n    },\n    /*::[*/ 0x013C: {\n        T: 1\n    },\n    /*::[*/ 0x013D: {\n        T: -1\n    },\n    /*::[*/ 0x013E: {\n        T: 1\n    },\n    /*::[*/ 0x013F: {\n        T: -1\n    },\n    /*::[*/ 0x0140: {\n        T: 1\n    },\n    /*::[*/ 0x0141: {\n        T: -1\n    },\n    /*::[*/ 0x0142: {\n        T: 1\n    },\n    /*::[*/ 0x0143: {\n        T: -1\n    },\n    /*::[*/ 0x0144: {\n        T: 1\n    },\n    /*::[*/ 0x0145: {\n        T: -1\n    },\n    /*::[*/ 0x0146: {\n        T: 1\n    },\n    /*::[*/ 0x0147: {\n        T: -1\n    },\n    /*::[*/ 0x0148: {\n        T: 1\n    },\n    /*::[*/ 0x0149: {\n        T: -1\n    },\n    /*::[*/ 0x014A: {\n        T: 1\n    },\n    /*::[*/ 0x014B: {\n        T: -1\n    },\n    /*::[*/ 0x014C: {\n        T: 1\n    },\n    /*::[*/ 0x014D: {\n        T: -1\n    },\n    /*::[*/ 0x014E: {\n        T: 1\n    },\n    /*::[*/ 0x014F: {\n        f: parse_BrtMdtinfo\n    },\n    /*::[*/ 0x0150: {\n        T: -1\n    },\n    /*::[*/ 0x0151: {\n        f: parse_BrtBeginEsmdb,\n        T: 1\n    },\n    /*::[*/ 0x0152: {\n        T: -1\n    },\n    /*::[*/ 0x0153: {\n        T: 1\n    },\n    /*::[*/ 0x0154: {\n        T: -1\n    },\n    /*::[*/ 0x0155: {\n        T: 1\n    },\n    /*::[*/ 0x0156: {\n        T: -1\n    },\n    /*::[*/ 0x0157: {\n        T: 1\n    },\n    /*::[*/ 0x0158: {\n        T: -1\n    },\n    /*::[*/ 0x0159: {\n        T: 1\n    },\n    /*::[*/ 0x015A: {\n        T: -1\n    },\n    /*::[*/ 0x015B: {\n        T: 1\n    },\n    /*::[*/ 0x015C: {\n        T: -1\n    },\n    /*::[*/ 0x015D: {\n        T: 1\n    },\n    /*::[*/ 0x015E: {\n        T: -1\n    },\n    /*::[*/ 0x015F: {},\n    /*::[*/ 0x0160: {},\n    /*::[*/ 0x0161: {\n        T: 1\n    },\n    /*::[*/ 0x0162: {\n        T: -1\n    },\n    /*::[*/ 0x0163: {\n        f: parse_RelID\n    },\n    /*::[*/ 0x0165: {},\n    /*::[*/ 0x0166: {},\n    /*::[*/ 0x0167: {},\n    /*::[*/ 0x0168: {\n        T: 1\n    },\n    /*::[*/ 0x0169: {},\n    /*::[*/ 0x016A: {\n        f: parse_ExternSheet\n    },\n    /*::[*/ 0x016B: {},\n    /*::[*/ 0x016C: {},\n    /*::[*/ 0x016E: {},\n    /*::[*/ 0x016F: {},\n    /*::[*/ 0x0170: {},\n    /*::[*/ 0x0171: {},\n    /*::[*/ 0x0172: {},\n    /*::[*/ 0x0173: {},\n    /*::[*/ 0x0174: {\n        T: 1\n    },\n    /*::[*/ 0x0175: {\n        T: -1\n    },\n    /*::[*/ 0x0176: {\n        T: 1\n    },\n    /*::[*/ 0x0177: {\n        T: -1\n    },\n    /*::[*/ 0x0178: {\n        T: 1\n    },\n    /*::[*/ 0x0179: {\n        T: -1\n    },\n    /*::[*/ 0x017A: {\n        T: 1\n    },\n    /*::[*/ 0x017B: {\n        T: -1\n    },\n    /*::[*/ 0x017C: {\n        T: 1\n    },\n    /*::[*/ 0x017D: {\n        T: -1\n    },\n    /*::[*/ 0x017E: {\n        T: 1\n    },\n    /*::[*/ 0x017F: {\n        T: -1\n    },\n    /*::[*/ 0x0180: {\n        T: 1\n    },\n    /*::[*/ 0x0181: {\n        T: -1\n    },\n    /*::[*/ 0x0182: {\n        T: 1\n    },\n    /*::[*/ 0x0183: {\n        T: -1\n    },\n    /*::[*/ 0x0184: {\n        T: 1\n    },\n    /*::[*/ 0x0185: {\n        T: -1\n    },\n    /*::[*/ 0x0186: {\n        T: 1\n    },\n    /*::[*/ 0x0187: {\n        T: -1\n    },\n    /*::[*/ 0x0188: {\n        T: 1\n    },\n    /*::[*/ 0x0189: {\n        T: -1\n    },\n    /*::[*/ 0x018A: {\n        T: 1\n    },\n    /*::[*/ 0x018B: {\n        T: -1\n    },\n    /*::[*/ 0x018C: {},\n    /*::[*/ 0x018D: {},\n    /*::[*/ 0x018E: {},\n    /*::[*/ 0x018F: {},\n    /*::[*/ 0x0190: {},\n    /*::[*/ 0x0191: {\n        T: 1\n    },\n    /*::[*/ 0x0193: {},\n    /*::[*/ 0x0194: {},\n    /*::[*/ 0x0195: {},\n    /*::[*/ 0x0196: {},\n    /*::[*/ 0x0197: {},\n    /*::[*/ 0x0198: {},\n    /*::[*/ 0x0199: {},\n    /*::[*/ 0x019A: {},\n    /*::[*/ 0x019B: {},\n    /*::[*/ 0x019C: {},\n    /*::[*/ 0x019D: {},\n    /*::[*/ 0x019E: {},\n    /*::[*/ 0x019F: {},\n    /*::[*/ 0x01A0: {},\n    /*::[*/ 0x01A1: {},\n    /*::[*/ 0x01A2: {},\n    /*::[*/ 0x01A3: {},\n    /*::[*/ 0x01A4: {},\n    /*::[*/ 0x01A5: {},\n    /*::[*/ 0x01A6: {\n        T: 1\n    },\n    /*::[*/ 0x01A7: {\n        T: 1\n    },\n    /*::[*/ 0x01A8: {\n        T: -1\n    },\n    /*::[*/ 0x01A9: {\n        T: -1\n    },\n    /*::[*/ 0x01AA: {\n        f: parse_BrtArrFmla\n    },\n    /*::[*/ 0x01AB: {\n        f: parse_BrtShrFmla\n    },\n    /*::[*/ 0x01AC: {},\n    /*::[*/ 0x01AD: {\n        T: 1\n    },\n    /*::[*/ 0x01AE: {\n        T: -1\n    },\n    /*::[*/ 0x01AF: {\n        T: 1\n    },\n    /*::[*/ 0x01B0: {\n        T: -1\n    },\n    /*::[*/ 0x01B1: {\n        T: 1\n    },\n    /*::[*/ 0x01B2: {\n        T: -1\n    },\n    /*::[*/ 0x01B3: {\n        T: 1\n    },\n    /*::[*/ 0x01B4: {\n        T: -1\n    },\n    /*::[*/ 0x01B5: {\n        T: 1\n    },\n    /*::[*/ 0x01B6: {\n        T: -1\n    },\n    /*::[*/ 0x01B7: {\n        T: 1\n    },\n    /*::[*/ 0x01B8: {\n        T: -1\n    },\n    /*::[*/ 0x01B9: {\n        T: 1\n    },\n    /*::[*/ 0x01BA: {\n        T: -1\n    },\n    /*::[*/ 0x01BB: {\n        T: 1\n    },\n    /*::[*/ 0x01BC: {\n        T: -1\n    },\n    /*::[*/ 0x01BD: {\n        T: 1\n    },\n    /*::[*/ 0x01BE: {\n        T: -1\n    },\n    /*::[*/ 0x01BF: {\n        T: 1\n    },\n    /*::[*/ 0x01C0: {\n        T: -1\n    },\n    /*::[*/ 0x01C1: {\n        T: 1\n    },\n    /*::[*/ 0x01C2: {\n        T: -1\n    },\n    /*::[*/ 0x01C3: {\n        T: 1\n    },\n    /*::[*/ 0x01C4: {\n        T: -1\n    },\n    /*::[*/ 0x01C5: {\n        T: 1\n    },\n    /*::[*/ 0x01C6: {\n        T: -1\n    },\n    /*::[*/ 0x01C7: {\n        T: 1\n    },\n    /*::[*/ 0x01C8: {\n        T: -1\n    },\n    /*::[*/ 0x01C9: {\n        T: 1\n    },\n    /*::[*/ 0x01CA: {\n        T: -1\n    },\n    /*::[*/ 0x01CB: {\n        T: 1\n    },\n    /*::[*/ 0x01CC: {\n        T: -1\n    },\n    /*::[*/ 0x01CD: {\n        T: 1\n    },\n    /*::[*/ 0x01CE: {\n        T: -1\n    },\n    /*::[*/ 0x01CF: {\n        T: 1\n    },\n    /*::[*/ 0x01D0: {\n        T: -1\n    },\n    /*::[*/ 0x01D1: {\n        T: 1\n    },\n    /*::[*/ 0x01D2: {\n        T: -1\n    },\n    /*::[*/ 0x01D3: {\n        T: 1\n    },\n    /*::[*/ 0x01D4: {\n        T: -1\n    },\n    /*::[*/ 0x01D5: {\n        T: 1\n    },\n    /*::[*/ 0x01D6: {\n        T: -1\n    },\n    /*::[*/ 0x01D7: {},\n    /*::[*/ 0x01D8: {},\n    /*::[*/ 0x01D9: {\n        T: 1\n    },\n    /*::[*/ 0x01DA: {\n        T: -1\n    },\n    /*::[*/ 0x01DB: {},\n    /*::[*/ 0x01DC: {\n        f: parse_BrtMargins\n    },\n    /*::[*/ 0x01DD: {},\n    /*::[*/ 0x01DE: {},\n    /*::[*/ 0x01DF: {\n        T: 1\n    },\n    /*::[*/ 0x01E0: {\n        T: -1\n    },\n    /*::[*/ 0x01E1: {\n        T: 1\n    },\n    /*::[*/ 0x01E2: {\n        T: -1\n    },\n    /*::[*/ 0x01E3: {\n        T: 1\n    },\n    /*::[*/ 0x01E4: {\n        T: -1\n    },\n    /*::[*/ 0x01E5: {\n        f: parse_BrtWsFmtInfo\n    },\n    /*::[*/ 0x01E6: {\n        T: 1\n    },\n    /*::[*/ 0x01E7: {\n        T: -1\n    },\n    /*::[*/ 0x01E8: {\n        T: 1\n    },\n    /*::[*/ 0x01E9: {\n        T: -1\n    },\n    /*::[*/ 0x01EA: {\n        T: 1\n    },\n    /*::[*/ 0x01EB: {\n        T: -1\n    },\n    /*::[*/ 0x01EC: {\n        T: 1\n    },\n    /*::[*/ 0x01ED: {\n        T: -1\n    },\n    /*::[*/ 0x01EE: {\n        f: parse_BrtHLink\n    },\n    /*::[*/ 0x01EF: {\n        T: 1\n    },\n    /*::[*/ 0x01F0: {\n        T: -1\n    },\n    /*::[*/ 0x01F1: {\n        T: 1\n    },\n    /*::[*/ 0x01F2: {\n        T: -1\n    },\n    /*::[*/ 0x01F3: {},\n    /*::[*/ 0x01F4: {\n        T: 1\n    },\n    /*::[*/ 0x01F5: {\n        T: -1\n    },\n    /*::[*/ 0x01F6: {\n        T: 1\n    },\n    /*::[*/ 0x01F7: {\n        T: -1\n    },\n    /*::[*/ 0x01F8: {},\n    /*::[*/ 0x01F9: {\n        T: 1\n    },\n    /*::[*/ 0x01FA: {\n        T: -1\n    },\n    /*::[*/ 0x01FB: {},\n    /*::[*/ 0x01FC: {\n        T: 1\n    },\n    /*::[*/ 0x01FD: {\n        T: -1\n    },\n    /*::[*/ 0x01FE: {\n        T: 1\n    },\n    /*::[*/ 0x01FF: {\n        T: -1\n    },\n    /*::[*/ 0x0200: {},\n    /*::[*/ 0x0201: {},\n    /*::[*/ 0x0202: {\n        T: 1\n    },\n    /*::[*/ 0x0203: {\n        T: -1\n    },\n    /*::[*/ 0x0204: {\n        T: 1\n    },\n    /*::[*/ 0x0205: {\n        T: -1\n    },\n    /*::[*/ 0x0206: {\n        T: 1\n    },\n    /*::[*/ 0x0207: {\n        T: -1\n    },\n    /*::[*/ 0x0208: {\n        T: 1\n    },\n    /*::[*/ 0x0209: {\n        T: -1\n    },\n    /*::[*/ 0x020A: {},\n    /*::[*/ 0x020B: {},\n    /*::[*/ 0x020C: {},\n    /*::[*/ 0x020D: {},\n    /*::[*/ 0x020E: {},\n    /*::[*/ 0x020F: {},\n    /*::[*/ 0x0210: {\n        T: 1\n    },\n    /*::[*/ 0x0211: {\n        T: -1\n    },\n    /*::[*/ 0x0212: {\n        T: 1\n    },\n    /*::[*/ 0x0213: {\n        T: -1\n    },\n    /*::[*/ 0x0214: {\n        T: 1\n    },\n    /*::[*/ 0x0215: {\n        T: -1\n    },\n    /*::[*/ 0x0216: {},\n    /*::[*/ 0x0217: {},\n    /*::[*/ 0x0218: {},\n    /*::[*/ 0x0219: {},\n    /*::[*/ 0x021A: {\n        T: 1\n    },\n    /*::[*/ 0x021B: {\n        T: -1\n    },\n    /*::[*/ 0x021C: {\n        T: 1\n    },\n    /*::[*/ 0x021D: {\n        T: -1\n    },\n    /*::[*/ 0x021E: {\n        T: 1\n    },\n    /*::[*/ 0x0224: {},\n    /*::[*/ 0x0225: {},\n    /*::[*/ 0x0226: {\n        f: parse_RelID\n    },\n    /*::[*/ 0x0227: {},\n    /*::[*/ 0x0228: {},\n    /*::[*/ 0x0229: {},\n    /*::[*/ 0x022A: {\n        T: 1\n    },\n    /*::[*/ 0x022B: {\n        T: -1\n    },\n    /*::[*/ 0x022C: {\n        T: 1\n    },\n    /*::[*/ 0x022D: {\n        T: -1\n    },\n    /*::[*/ 0x022E: {\n        T: 1\n    },\n    /*::[*/ 0x022F: {\n        T: -1\n    },\n    /*::[*/ 0x0230: {\n        T: 1\n    },\n    /*::[*/ 0x0231: {\n        T: -1\n    },\n    /*::[*/ 0x0232: {},\n    /*::[*/ 0x0234: {},\n    /*::[*/ 0x0235: {\n        T: 1\n    },\n    /*::[*/ 0x0236: {\n        T: -1\n    },\n    /*::[*/ 0x0239: {\n        T: 1\n    },\n    /*::[*/ 0x023A: {\n        T: -1\n    },\n    /*::[*/ 0x023C: {},\n    /*::[*/ 0x023D: {\n        T: 1\n    },\n    /*::[*/ 0x023E: {\n        T: -1\n    },\n    /*::[*/ 0x0241: {},\n    /*::[*/ 0x0242: {},\n    /*::[*/ 0x0243: {},\n    /*::[*/ 0x0244: {},\n    /*::[*/ 0x0245: {},\n    /*::[*/ 0x0246: {},\n    /*::[*/ 0x0247: {},\n    /*::[*/ 0x0248: {},\n    /*::[*/ 0x0249: {},\n    /*::[*/ 0x024A: {},\n    /*::[*/ 0x024B: {},\n    /*::[*/ 0x024C: {\n        T: -1\n    },\n    /*::[*/ 0x024D: {},\n    /*::[*/ 0x024E: {\n        T: 1\n    },\n    /*::[*/ 0x024F: {\n        T: -1\n    },\n    /*::[*/ 0x0250: {\n        T: 1\n    },\n    /*::[*/ 0x0251: {\n        T: -1\n    },\n    /*::[*/ 0x0252: {\n        T: 1\n    },\n    /*::[*/ 0x0253: {\n        T: -1\n    },\n    /*::[*/ 0x0254: {},\n    /*::[*/ 0x0255: {\n        T: 1\n    },\n    /*::[*/ 0x0256: {\n        T: -1\n    },\n    /*::[*/ 0x0257: {\n        T: 1\n    },\n    /*::[*/ 0x0258: {\n        T: -1\n    },\n    /*::[*/ 0x0259: {\n        T: 1\n    },\n    /*::[*/ 0x025A: {\n        T: -1\n    },\n    /*::[*/ 0x025B: {\n        T: 1\n    },\n    /*::[*/ 0x025C: {\n        T: -1\n    },\n    /*::[*/ 0x025D: {\n        T: 1\n    },\n    /*::[*/ 0x025E: {\n        T: -1\n    },\n    /*::[*/ 0x025F: {},\n    /*::[*/ 0x0260: {\n        T: 1\n    },\n    /*::[*/ 0x0261: {\n        T: -1\n    },\n    /*::[*/ 0x0262: {},\n    /*::[*/ 0x0263: {\n        T: 1\n    },\n    /*::[*/ 0x0264: {\n        T: -1\n    },\n    /*::[*/ 0x0265: {\n        T: 1\n    },\n    /*::[*/ 0x0266: {\n        T: -1\n    },\n    /*::[*/ 0x0267: {\n        T: 1\n    },\n    /*::[*/ 0x0268: {\n        T: -1\n    },\n    /*::[*/ 0x0269: {\n        T: 1\n    },\n    /*::[*/ 0x026A: {\n        T: -1\n    },\n    /*::[*/ 0x026B: {\n        T: 1\n    },\n    /*::[*/ 0x026C: {\n        T: -1\n    },\n    /*::[*/ 0x0271: {},\n    /*::[*/ 0x0272: {\n        T: 1\n    },\n    /*::[*/ 0x0273: {\n        T: -1\n    },\n    /*::[*/ 0x0274: {\n        T: 1\n    },\n    /*::[*/ 0x0275: {\n        T: -1\n    },\n    /*::[*/ 0x0276: {\n        T: 1\n    },\n    /*::[*/ 0x0277: {\n        T: -1\n    },\n    /*::[*/ 0x0278: {\n        f: parse_BrtCommentAuthor\n    },\n    /*::[*/ 0x0279: {\n        T: 1\n    },\n    /*::[*/ 0x027A: {\n        T: -1\n    },\n    /*::[*/ 0x027B: {\n        T: 1,\n        f: parse_BrtBeginComment\n    },\n    /*::[*/ 0x027C: {\n        T: -1\n    },\n    /*::[*/ 0x027D: {\n        f: parse_BrtCommentText\n    },\n    /*::[*/ 0x027E: {\n        T: 1\n    },\n    /*::[*/ 0x027F: {},\n    /*::[*/ 0x0280: {\n        T: -1\n    },\n    /*::[*/ 0x0281: {\n        T: 1\n    },\n    /*::[*/ 0x0282: {\n        T: -1\n    },\n    /*::[*/ 0x0283: {\n        T: 1\n    },\n    /*::[*/ 0x0284: {},\n    /*::[*/ 0x0285: {\n        T: -1\n    },\n    /*::[*/ 0x0286: {\n        T: 1\n    },\n    /*::[*/ 0x0288: {\n        T: 1\n    },\n    /*::[*/ 0x0289: {},\n    /*::[*/ 0x028A: {\n        T: -1\n    },\n    /*::[*/ 0x028B: {\n        f: parse_BrtCsProp\n    },\n    /*::[*/ 0x028C: {},\n    /*::[*/ 0x028D: {\n        T: 1\n    },\n    /*::[*/ 0x028E: {\n        T: -1\n    },\n    /*::[*/ 0x028F: {\n        T: 1\n    },\n    /*::[*/ 0x0290: {\n        T: -1\n    },\n    /*::[*/ 0x0291: {\n        T: 1\n    },\n    /*::[*/ 0x0292: {\n        T: -1\n    },\n    /*::[*/ 0x0293: {},\n    /*::[*/ 0x0294: {\n        T: 1\n    },\n    /*::[*/ 0x0295: {},\n    /*::[*/ 0x0296: {\n        T: -1\n    },\n    /*::[*/ 0x0297: {},\n    /*::[*/ 0x0298: {\n        T: 1\n    },\n    /*::[*/ 0x0299: {},\n    /*::[*/ 0x029A: {\n        T: -1\n    },\n    /*::[*/ 0x029B: {},\n    /*::[*/ 0x029C: {},\n    /*::[*/ 0x029D: {},\n    /*::[*/ 0x029F: {\n        T: 1\n    },\n    /*::[*/ 0x02A0: {\n        T: -1\n    },\n    /*::[*/ 0x02A1: {\n        T: 1\n    },\n    /*::[*/ 0x02A2: {\n        T: -1\n    },\n    /*::[*/ 0x02A3: {},\n    /*::[*/ 0x02A4: {},\n    /*::[*/ 0x02A5: {},\n    /*::[*/ 0x02A6: {},\n    /*::[*/ 0x02A7: {},\n    /*::[*/ 0x02A8: {},\n    /*::[*/ 0x02A9: {},\n    /*::[*/ 0x0400: {},\n    /*::[*/ 0x0401: {},\n    /*::[*/ 0x0402: {\n        T: 1\n    },\n    /*::[*/ 0x0403: {\n        T: -1\n    },\n    /*::[*/ 0x0404: {\n        T: 1\n    },\n    /*::[*/ 0x0405: {\n        T: -1\n    },\n    /*::[*/ 0x0406: {},\n    /*::[*/ 0x0407: {\n        T: 1\n    },\n    /*::[*/ 0x0408: {\n        T: -1\n    },\n    /*::[*/ 0x0409: {\n        T: 1\n    },\n    /*::[*/ 0x040A: {\n        T: -1\n    },\n    /*::[*/ 0x040B: {},\n    /*::[*/ 0x040C: {},\n    /*::[*/ 0x040D: {},\n    /*::[*/ 0x040E: {\n        T: 1\n    },\n    /*::[*/ 0x040F: {\n        T: -1\n    },\n    /*::[*/ 0x0410: {},\n    /*::[*/ 0x0411: {\n        T: 1\n    },\n    /*::[*/ 0x0412: {\n        T: -1\n    },\n    /*::[*/ 0x0413: {},\n    /*::[*/ 0x0414: {},\n    /*::[*/ 0x0415: {},\n    /*::[*/ 0x0416: {\n        T: 1\n    },\n    /*::[*/ 0x0417: {\n        T: -1\n    },\n    /*::[*/ 0x0418: {\n        T: 1\n    },\n    /*::[*/ 0x0419: {\n        T: -1\n    },\n    /*::[*/ 0x041A: {},\n    /*::[*/ 0x041B: {\n        T: 1\n    },\n    /*::[*/ 0x041C: {\n        T: 1\n    },\n    /*::[*/ 0x041D: {\n        f: parse_BrtDVal14\n    },\n    /*::[*/ 0x041E: {\n        T: 1\n    },\n    /*::[*/ 0x041F: {},\n    /*::[*/ 0x0420: {\n        T: 1\n    },\n    /*::[*/ 0x0421: {\n        T: -1\n    },\n    /*::[*/ 0x0422: {\n        T: 1\n    },\n    /*::[*/ 0x0423: {\n        T: -1\n    },\n    /*::[*/ 0x0425: {},\n    /*::[*/ 0x0426: {\n        T: 1\n    },\n    /*::[*/ 0x0427: {\n        T: -1\n    },\n    /*::[*/ 0x0428: {\n        T: 1\n    },\n    /*::[*/ 0x0429: {\n        T: -1\n    },\n    /*::[*/ 0x042A: {\n        T: 1\n    },\n    /*::[*/ 0x042B: {\n        T: -1\n    },\n    /*::[*/ 0x042C: {\n        T: 1\n    },\n    /*::[*/ 0x042D: {\n        T: -1\n    },\n    /*::[*/ 0x042E: {\n        T: 1\n    },\n    /*::[*/ 0x042F: {\n        T: -1\n    },\n    /*::[*/ 0x0430: {\n        T: 1\n    },\n    /*::[*/ 0x0431: {\n        T: -1\n    },\n    /*::[*/ 0x0433: {\n        T: 1\n    },\n    /*::[*/ 0x0434: {\n        T: -1\n    },\n    /*::[*/ 0x0435: {\n        T: 1\n    },\n    /*::[*/ 0x0436: {\n        T: -1\n    },\n    /*::[*/ 0x0437: {\n        T: 1\n    },\n    /*::[*/ 0x0438: {\n        T: -1\n    },\n    /*::[*/ 0x0439: {\n        T: 1\n    },\n    /*::[*/ 0x043A: {\n        T: -1\n    },\n    /*::[*/ 0x043B: {\n        T: 1\n    },\n    /*::[*/ 0x043C: {\n        T: -1\n    },\n    /*::[*/ 0x043D: {},\n    /*::[*/ 0x043E: {\n        T: 1\n    },\n    /*::[*/ 0x043F: {\n        T: -1\n    },\n    /*::[*/ 0x0440: {\n        T: 1\n    },\n    /*::[*/ 0x0441: {\n        T: -1\n    },\n    /*::[*/ 0x0442: {\n        T: 1\n    },\n    /*::[*/ 0x0443: {\n        T: -1\n    },\n    /*::[*/ 0x0444: {\n        T: 1\n    },\n    /*::[*/ 0x0445: {\n        T: -1\n    },\n    /*::[*/ 0x0446: {\n        T: 1\n    },\n    /*::[*/ 0x0447: {\n        T: -1\n    },\n    /*::[*/ 0x0448: {},\n    /*::[*/ 0x0449: {\n        T: 1\n    },\n    /*::[*/ 0x044A: {},\n    /*::[*/ 0x044B: {\n        T: -1\n    },\n    /*::[*/ 0x044C: {\n        T: 1\n    },\n    /*::[*/ 0x044D: {\n        T: -1\n    },\n    /*::[*/ 0x044E: {},\n    /*::[*/ 0x044F: {},\n    /*::[*/ 0x0450: {},\n    /*::[*/ 0x0451: {},\n    /*::[*/ 0x0457: {},\n    /*::[*/ 0x0458: {},\n    /*::[*/ 0x0459: {\n        T: 1\n    },\n    /*::[*/ 0x045A: {\n        T: -1\n    },\n    /*::[*/ 0x045B: {\n        T: 1\n    },\n    /*::[*/ 0x045C: {\n        T: -1\n    },\n    /*::[*/ 0x045D: {},\n    /*::[*/ 0x045E: {\n        T: 1\n    },\n    /*::[*/ 0x045F: {\n        T: -1\n    },\n    /*::[*/ 0x0460: {\n        T: 1\n    },\n    /*::[*/ 0x0461: {\n        T: -1\n    },\n    /*::[*/ 0x0462: {\n        T: 1\n    },\n    /*::[*/ 0x0463: {\n        T: -1\n    },\n    /*::[*/ 0x0464: {\n        T: 1\n    },\n    /*::[*/ 0x0465: {\n        T: -1\n    },\n    /*::[*/ 0x0466: {},\n    /*::[*/ 0x0468: {\n        T: 1\n    },\n    /*::[*/ 0x0469: {\n        T: -1\n    },\n    /*::[*/ 0x046A: {},\n    /*::[*/ 0x046B: {\n        T: 1\n    },\n    /*::[*/ 0x046C: {\n        T: -1\n    },\n    /*::[*/ 0x046D: {\n        T: 1\n    },\n    /*::[*/ 0x046E: {\n        T: -1\n    },\n    /*::[*/ 0x046F: {\n        T: 1\n    },\n    /*::[*/ 0x0470: {\n        T: -1\n    },\n    /*::[*/ 0x0471: {\n        T: 1\n    },\n    /*::[*/ 0x0472: {\n        T: -1\n    },\n    /*::[*/ 0x0473: {\n        T: 1\n    },\n    /*::[*/ 0x0474: {\n        T: -1\n    },\n    /*::[*/ 0x0475: {},\n    /*::[*/ 0x0476: {\n        T: 1\n    },\n    /*::[*/ 0x0477: {\n        T: -1\n    },\n    /*::[*/ 0x0478: {\n        T: 1\n    },\n    /*::[*/ 0x0479: {\n        T: -1\n    },\n    /*::[*/ 0x047A: {},\n    /*::[*/ 0x047B: {\n        T: 1\n    },\n    /*::[*/ 0x047C: {\n        T: -1\n    },\n    /*::[*/ 0x047D: {\n        T: 1\n    },\n    /*::[*/ 0x047E: {\n        T: -1\n    },\n    /*::[*/ 0x0480: {\n        T: 1\n    },\n    /*::[*/ 0x0481: {\n        T: -1\n    },\n    /*::[*/ 0x0482: {\n        T: -1\n    },\n    /*::[*/ 0x0483: {\n        T: -1\n    },\n    /*::[*/ 0x0484: {\n        T: -1\n    },\n    /*::[*/ 0x0485: {\n        T: 1\n    },\n    /*::[*/ 0x0486: {\n        T: -1\n    },\n    /*::[*/ 0x0487: {\n        T: 1\n    },\n    /*::[*/ 0x0488: {\n        T: -1\n    },\n    /*::[*/ 0x0489: {\n        T: 1\n    },\n    /*::[*/ 0x048A: {\n        T: -1\n    },\n    /*::[*/ 0x048B: {\n        T: 1\n    },\n    /*::[*/ 0x048C: {\n        T: -1\n    },\n    /*::[*/ 0x048D: {\n        T: 1\n    },\n    /*::[*/ 0x048E: {\n        T: -1\n    },\n    /*::[*/ 0x048F: {\n        T: 1\n    },\n    /*::[*/ 0x0490: {\n        T: -1\n    },\n    /*::[*/ 0x0491: {\n        T: 1\n    },\n    /*::[*/ 0x0492: {\n        T: -1\n    },\n    /*::[*/ 0x0493: {},\n    /*::[*/ 0x0494: {\n        T: 1\n    },\n    /*::[*/ 0x0495: {\n        T: -1\n    },\n    /*::[*/ 0x0499: {},\n    /*::[*/ 0x049A: {\n        T: 1\n    },\n    /*::[*/ 0x049C: {},\n    /*::[*/ 0x049D: {},\n    /*::[*/ 0x049E: {},\n    /*::[*/ 0x0800: {\n        T: 1\n    },\n    /*::[*/ 0x0801: {\n        T: -1\n    },\n    /*::[*/ 0x0802: {},\n    /*::[*/ 0x0803: {\n        T: 1\n    },\n    /*::[*/ 0x0804: {\n        T: -1\n    },\n    /*::[*/ 0x0805: {},\n    /*::[*/ 0x0806: {},\n    /*::[*/ 0x0807: {\n        T: 1\n    },\n    /*::[*/ 0x0808: {\n        T: -1\n    },\n    /*::[*/ 0x0809: {\n        T: 1\n    },\n    /*::[*/ 0x080A: {\n        T: -1\n    },\n    /*::[*/ 0x080C: {},\n    /*::[*/ 0x0813: {},\n    /*::[*/ 0x0814: {\n        T: 1\n    },\n    /*::[*/ 0x0815: {\n        T: -1\n    },\n    /*::[*/ 0x0816: {},\n    /*::[*/ 0x0817: {},\n    /*::[*/ 0x0818: {\n        T: 1\n    },\n    /*::[*/ 0x0819: {\n        T: -1\n    },\n    /*::[*/ 0x081B: {},\n    /*::[*/ 0x081C: {},\n    /*::[*/ 0x081D: {\n        T: 1\n    },\n    /*::[*/ 0x081E: {\n        T: -1\n    },\n    /*::[*/ 0x081F: {},\n    /*::[*/ 0x0820: {\n        T: 1\n    },\n    /*::[*/ 0x0821: {\n        T: -1\n    },\n    /*::[*/ 0x0822: {},\n    /*::[*/ 0x0823: {\n        T: 1\n    },\n    /*::[*/ 0x0824: {\n        T: -1\n    },\n    /*::[*/ 0x0825: {\n        T: 1\n    },\n    /*::[*/ 0x0826: {\n        T: -1\n    },\n    /*::[*/ 0x0827: {\n        T: 1\n    },\n    /*::[*/ 0x0828: {\n        T: -1\n    },\n    /*::[*/ 0x0829: {\n        T: 1\n    },\n    /*::[*/ 0x082A: {\n        T: -1\n    },\n    /*::[*/ 0x082B: {},\n    /*::[*/ 0x082C: {},\n    /*::[*/ 0x082D: {\n        T: 1\n    },\n    /*::[*/ 0x082E: {\n        T: -1\n    },\n    /*::[*/ 0x082F: {},\n    /*::[*/ 0x0830: {\n        T: 1\n    },\n    /*::[*/ 0x0831: {\n        T: -1\n    },\n    /*::[*/ 0x0832: {\n        T: 1\n    },\n    /*::[*/ 0x0833: {\n        T: -1\n    },\n    /*::[*/ 0x0834: {\n        T: 1\n    },\n    /*::[*/ 0x0835: {\n        T: -1\n    },\n    /*::[*/ 0x0836: {},\n    /*::[*/ 0x0837: {\n        T: 1\n    },\n    /*::[*/ 0x0838: {\n        T: -1\n    },\n    /*::[*/ 0x0839: {},\n    /*::[*/ 0x083A: {\n        T: 1\n    },\n    /*::[*/ 0x083B: {\n        T: -1\n    },\n    /*::[*/ 0x083C: {},\n    /*::[*/ 0x083D: {\n        T: 1\n    },\n    /*::[*/ 0x083E: {\n        T: -1\n    },\n    /*::[*/ 0x083F: {\n        T: 1\n    },\n    /*::[*/ 0x0840: {\n        T: -1\n    },\n    /*::[*/ 0x0841: {\n        T: 1\n    },\n    /*::[*/ 0x0842: {\n        T: -1\n    },\n    /*::[*/ 0x0843: {},\n    /*::[*/ 0x0844: {},\n    /*::[*/ 0x0845: {},\n    /*::[*/ 0x0846: {\n        T: 1\n    },\n    /*::[*/ 0x0847: {\n        T: -1\n    },\n    /*::[*/ 0x0848: {},\n    /*::[*/ 0x0849: {\n        T: 1\n    },\n    /*::[*/ 0x084A: {\n        T: -1\n    },\n    /*::[*/ 0x084B: {\n        T: 1\n    },\n    /*::[*/ 0x084C: {\n        T: -1\n    },\n    /*::[*/ 0x084D: {},\n    /*::[*/ 0x084E: {\n        T: 1\n    },\n    /*::[*/ 0x084F: {\n        T: -1\n    },\n    /*::[*/ 0x0850: {},\n    /*::[*/ 0x0851: {\n        T: 1\n    },\n    /*::[*/ 0x0852: {\n        T: -1\n    },\n    /*::[*/ 0x0853: {\n        T: 1\n    },\n    /*::[*/ 0x0854: {\n        T: -1\n    },\n    /*::[*/ 0x0855: {\n        T: 1\n    },\n    /*::[*/ 0x0856: {},\n    /*::[*/ 0x0857: {},\n    /*::[*/ 0x0858: {},\n    /*::[*/ 0x0859: {\n        T: 1\n    },\n    /*::[*/ 0x085A: {\n        T: -1\n    },\n    /*::[*/ 0x085B: {\n        T: 1\n    },\n    /*::[*/ 0x085C: {\n        T: -1\n    },\n    /*::[*/ 0x085D: {},\n    /*::[*/ 0x0C00: {},\n    /*::[*/ 0x0C01: {},\n    /*::[*/ 0x1000: {\n        T: 1\n    },\n    /*::[*/ 0x1001: {\n        T: -1\n    },\n    /*::[*/ 0x138A: {\n        T: 1\n    },\n    /*::[*/ 0x138B: {\n        T: -1\n    },\n    /*::[*/ 0x13D9: {\n        T: 1\n    },\n    /*::[*/ 0x13DA: {\n        T: -1\n    },\n    /*::[*/ 0x13DB: {},\n    /*::[*/ 0x13DC: {\n        T: 1\n    },\n    /*::[*/ 0x13DD: {\n        T: -1\n    },\n    /*::[*/ 0x13DE: {\n        T: 1\n    },\n    /*::[*/ 0x13DF: {\n        T: -1\n    },\n    /*::[*/ 0x13E0: {},\n    /*::[*/ 0x13E1: {},\n    /*::[*/ 0x13E2: {},\n    /*::[*/ 0x13E4: {\n        T: 1\n    },\n    /*::[*/ 0x13E5: {\n        T: -1\n    },\n    /*::[*/ 0x13E6: {},\n    /*::[*/ 0x13E7: {\n        T: 1\n    },\n    /*::[*/ 0x13E8: {\n        T: -1\n    },\n    /*::[*/ 0x13E9: {},\n    /*::[*/ 0x13EB: {},\n    /*::[*/ 0xFFFF: {\n        n: \"\"\n    }\n};\n/* [MS-XLS] 2.3 Record Enumeration (and other sources) */ var XLSRecordEnum = {\n    /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */ /*::[*/ 0x0006: {\n        f: parse_Formula\n    },\n    /*::[*/ 0x000a: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x000c: {\n        f: parseuint16\n    },\n    /*::[*/ 0x000d: {\n        f: parseuint16\n    },\n    /*::[*/ 0x000e: {\n        f: parsebool\n    },\n    /*::[*/ 0x000f: {\n        f: parsebool\n    },\n    /*::[*/ 0x0010: {\n        f: parse_Xnum\n    },\n    /*::[*/ 0x0011: {\n        f: parsebool\n    },\n    /*::[*/ 0x0012: {\n        f: parsebool\n    },\n    /*::[*/ 0x0013: {\n        f: parseuint16\n    },\n    /*::[*/ 0x0014: {\n        f: parse_XLHeaderFooter\n    },\n    /*::[*/ 0x0015: {\n        f: parse_XLHeaderFooter\n    },\n    /*::[*/ 0x0017: {\n        f: parse_ExternSheet\n    },\n    /*::[*/ 0x0018: {\n        f: parse_Lbl\n    },\n    /*::[*/ 0x0019: {\n        f: parsebool\n    },\n    /*::[*/ 0x001a: {},\n    /*::[*/ 0x001b: {},\n    /*::[*/ 0x001c: {\n        f: parse_Note\n    },\n    /*::[*/ 0x001d: {},\n    /*::[*/ 0x0022: {\n        f: parsebool\n    },\n    /*::[*/ 0x0023: {\n        f: parse_ExternName\n    },\n    /*::[*/ 0x0026: {\n        f: parse_Xnum\n    },\n    /*::[*/ 0x0027: {\n        f: parse_Xnum\n    },\n    /*::[*/ 0x0028: {\n        f: parse_Xnum\n    },\n    /*::[*/ 0x0029: {\n        f: parse_Xnum\n    },\n    /*::[*/ 0x002a: {\n        f: parsebool\n    },\n    /*::[*/ 0x002b: {\n        f: parsebool\n    },\n    /*::[*/ 0x002f: {\n        f: parse_FilePass\n    },\n    /*::[*/ 0x0031: {\n        f: parse_Font\n    },\n    /*::[*/ 0x0033: {\n        f: parseuint16\n    },\n    /*::[*/ 0x003c: {},\n    /*::[*/ 0x003d: {\n        f: parse_Window1\n    },\n    /*::[*/ 0x0040: {\n        f: parsebool\n    },\n    /*::[*/ 0x0041: {\n        f: parse_Pane\n    },\n    /*::[*/ 0x0042: {\n        f: parseuint16\n    },\n    /*::[*/ 0x004d: {},\n    /*::[*/ 0x0050: {},\n    /*::[*/ 0x0051: {},\n    /*::[*/ 0x0052: {},\n    /*::[*/ 0x0055: {\n        f: parseuint16\n    },\n    /*::[*/ 0x0059: {},\n    /*::[*/ 0x005a: {},\n    /*::[*/ 0x005b: {},\n    /*::[*/ 0x005c: {\n        f: parse_WriteAccess\n    },\n    /*::[*/ 0x005d: {\n        f: parse_Obj\n    },\n    /*::[*/ 0x005e: {},\n    /*::[*/ 0x005f: {\n        f: parsebool\n    },\n    /*::[*/ 0x0060: {},\n    /*::[*/ 0x0061: {},\n    /*::[*/ 0x0063: {\n        f: parsebool\n    },\n    /*::[*/ 0x007d: {\n        f: parse_ColInfo\n    },\n    /*::[*/ 0x0080: {\n        f: parse_Guts\n    },\n    /*::[*/ 0x0081: {\n        f: parse_WsBool\n    },\n    /*::[*/ 0x0082: {\n        f: parseuint16\n    },\n    /*::[*/ 0x0083: {\n        f: parsebool\n    },\n    /*::[*/ 0x0084: {\n        f: parsebool\n    },\n    /*::[*/ 0x0085: {\n        f: parse_BoundSheet8\n    },\n    /*::[*/ 0x0086: {},\n    /*::[*/ 0x008c: {\n        f: parse_Country\n    },\n    /*::[*/ 0x008d: {\n        f: parseuint16\n    },\n    /*::[*/ 0x0090: {},\n    /*::[*/ 0x0092: {\n        f: parse_Palette\n    },\n    /*::[*/ 0x0097: {},\n    /*::[*/ 0x0098: {},\n    /*::[*/ 0x0099: {},\n    /*::[*/ 0x009a: {},\n    /*::[*/ 0x009b: {},\n    /*::[*/ 0x009c: {\n        f: parseuint16\n    },\n    /*::[*/ 0x009d: {},\n    /*::[*/ 0x009e: {},\n    /*::[*/ 0x00a0: {\n        f: parse_Scl\n    },\n    /*::[*/ 0x00a1: {\n        f: parse_Setup\n    },\n    /*::[*/ 0x00ae: {},\n    /*::[*/ 0x00af: {},\n    /*::[*/ 0x00b0: {},\n    /*::[*/ 0x00b1: {},\n    /*::[*/ 0x00b2: {},\n    /*::[*/ 0x00b4: {},\n    /*::[*/ 0x00b5: {},\n    /*::[*/ 0x00b6: {},\n    /*::[*/ 0x00b8: {},\n    /*::[*/ 0x00b9: {},\n    /*::[*/ 0x00bd: {\n        f: parse_MulRk\n    },\n    /*::[*/ 0x00be: {\n        f: parse_MulBlank\n    },\n    /*::[*/ 0x00c1: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x00c5: {},\n    /*::[*/ 0x00c6: {},\n    /*::[*/ 0x00c7: {},\n    /*::[*/ 0x00c8: {},\n    /*::[*/ 0x00c9: {},\n    /*::[*/ 0x00ca: {\n        f: parsebool\n    },\n    /*::[*/ 0x00cb: {},\n    /*::[*/ 0x00cc: {},\n    /*::[*/ 0x00cd: {},\n    /*::[*/ 0x00ce: {},\n    /*::[*/ 0x00cf: {},\n    /*::[*/ 0x00d0: {},\n    /*::[*/ 0x00d1: {},\n    /*::[*/ 0x00d2: {},\n    /*::[*/ 0x00d3: {},\n    /*::[*/ 0x00d5: {},\n    /*::[*/ 0x00d7: {},\n    /*::[*/ 0x00d8: {},\n    /*::[*/ 0x00d9: {},\n    /*::[*/ 0x00da: {\n        f: parseuint16\n    },\n    /*::[*/ 0x00dc: {},\n    /*::[*/ 0x00dd: {\n        f: parsebool\n    },\n    /*::[*/ 0x00de: {},\n    /*::[*/ 0x00e0: {\n        f: parse_XF\n    },\n    /*::[*/ 0x00e1: {\n        f: parse_InterfaceHdr\n    },\n    /*::[*/ 0x00e2: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x00e3: {},\n    /*::[*/ 0x00e5: {\n        f: parse_MergeCells\n    },\n    /*::[*/ 0x00e9: {},\n    /*::[*/ 0x00eb: {},\n    /*::[*/ 0x00ec: {},\n    /*::[*/ 0x00ed: {},\n    /*::[*/ 0x00ef: {},\n    /*::[*/ 0x00f0: {},\n    /*::[*/ 0x00f1: {},\n    /*::[*/ 0x00f2: {},\n    /*::[*/ 0x00f4: {},\n    /*::[*/ 0x00f5: {},\n    /*::[*/ 0x00f6: {},\n    /*::[*/ 0x00f7: {},\n    /*::[*/ 0x00f8: {},\n    /*::[*/ 0x00f9: {},\n    /*::[*/ 0x00fb: {},\n    /*::[*/ 0x00fc: {\n        f: parse_SST\n    },\n    /*::[*/ 0x00fd: {\n        f: parse_LabelSst\n    },\n    /*::[*/ 0x00ff: {\n        f: parse_ExtSST\n    },\n    /*::[*/ 0x0100: {},\n    /*::[*/ 0x0103: {},\n    /*::[*/ 0x0122: {},\n    /*::[*/ 0x0137: {},\n    /*::[*/ 0x0138: {},\n    /*::[*/ 0x013b: {},\n    /*::[*/ 0x013d: {\n        f: parseuint16a\n    },\n    /*::[*/ 0x013e: {},\n    /*::[*/ 0x013f: {},\n    /*::[*/ 0x0140: {},\n    /*::[*/ 0x014a: {},\n    /*::[*/ 0x014b: {},\n    /*::[*/ 0x014d: {},\n    /*::[*/ 0x014e: {},\n    /*::[*/ 0x014f: {},\n    /*::[*/ 0x0150: {},\n    /*::[*/ 0x0151: {},\n    /*::[*/ 0x0152: {},\n    /*::[*/ 0x0153: {},\n    /*::[*/ 0x0154: {},\n    /*::[*/ 0x015f: {},\n    /*::[*/ 0x0160: {\n        f: parsebool\n    },\n    /*::[*/ 0x0161: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x0191: {},\n    /*::[*/ 0x0192: {},\n    /*::[*/ 0x0193: {},\n    /*::[*/ 0x0194: {},\n    /*::[*/ 0x0195: {},\n    /*::[*/ 0x0196: {},\n    /*::[*/ 0x0197: {},\n    /*::[*/ 0x0198: {},\n    /*::[*/ 0x01a9: {},\n    /*::[*/ 0x01aa: {},\n    /*::[*/ 0x01ab: {},\n    /*::[*/ 0x01ac: {},\n    /*::[*/ 0x01ad: {},\n    /*::[*/ 0x01ae: {\n        f: parse_SupBook\n    },\n    /*::[*/ 0x01af: {\n        f: parsebool\n    },\n    /*::[*/ 0x01b0: {},\n    /*::[*/ 0x01b1: {},\n    /*::[*/ 0x01b2: {},\n    /*::[*/ 0x01b5: {},\n    /*::[*/ 0x01b6: {\n        f: parse_TxO\n    },\n    /*::[*/ 0x01b7: {\n        f: parsebool\n    },\n    /*::[*/ 0x01b8: {\n        f: parse_HLink\n    },\n    /*::[*/ 0x01b9: {},\n    /*::[*/ 0x01ba: {\n        f: parse_XLUnicodeString\n    },\n    /*::[*/ 0x01bb: {},\n    /*::[*/ 0x01bc: {\n        f: parseuint16\n    },\n    /*::[*/ 0x01bd: {},\n    /*::[*/ 0x01be: {},\n    /*::[*/ 0x01c0: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x01c1: {\n        f: parse_RecalcId,\n        r: 2\n    },\n    /*::[*/ 0x01c2: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x0200: {\n        f: parse_Dimensions\n    },\n    /*::[*/ 0x0201: {\n        f: parse_Blank\n    },\n    /*::[*/ 0x0203: {\n        f: parse_Number\n    },\n    /*::[*/ 0x0204: {\n        f: parse_Label\n    },\n    /*::[*/ 0x0205: {\n        f: parse_BoolErr\n    },\n    /*::[*/ 0x0207: {\n        f: parse_String\n    },\n    /*::[*/ 0x0208: {\n        f: parse_Row\n    },\n    /*::[*/ 0x020b: {},\n    /*::[*/ 0x0221: {\n        f: parse_Array\n    },\n    /*::[*/ 0x0225: {\n        f: parse_DefaultRowHeight\n    },\n    /*::[*/ 0x0236: {},\n    /*::[*/ 0x023e: {\n        f: parse_Window2\n    },\n    /*::[*/ 0x027e: {\n        f: parse_RK\n    },\n    /*::[*/ 0x0293: {},\n    /*::[*/ 0x0418: {},\n    /*::[*/ 0x041e: {\n        f: parse_Format\n    },\n    /*::[*/ 0x043c: {},\n    /*::[*/ 0x04bc: {\n        f: parse_ShrFmla\n    },\n    /*::[*/ 0x0800: {\n        f: parse_HLinkTooltip\n    },\n    /*::[*/ 0x0801: {},\n    /*::[*/ 0x0802: {},\n    /*::[*/ 0x0803: {},\n    /*::[*/ 0x0804: {},\n    /*::[*/ 0x0805: {},\n    /*::[*/ 0x0806: {},\n    /*::[*/ 0x0807: {},\n    /*::[*/ 0x0808: {},\n    /*::[*/ 0x0809: {\n        f: parse_BOF\n    },\n    /*::[*/ 0x080a: {},\n    /*::[*/ 0x080b: {},\n    /*::[*/ 0x080c: {},\n    /*::[*/ 0x080d: {},\n    /*::[*/ 0x080e: {},\n    /*::[*/ 0x080f: {},\n    /*::[*/ 0x0810: {},\n    /*::[*/ 0x0812: {},\n    /*::[*/ 0x0813: {},\n    /*::[*/ 0x0850: {},\n    /*::[*/ 0x0851: {},\n    /*::[*/ 0x0852: {},\n    /*::[*/ 0x0853: {},\n    /*::[*/ 0x0854: {},\n    /*::[*/ 0x0855: {},\n    /*::[*/ 0x0856: {},\n    /*::[*/ 0x0857: {},\n    /*::[*/ 0x0858: {},\n    /*::[*/ 0x0859: {},\n    /*::[*/ 0x085a: {},\n    /*::[*/ 0x0862: {},\n    /*::[*/ 0x0863: {\n        r: 12\n    },\n    /*::[*/ 0x0864: {},\n    /*::[*/ 0x0865: {},\n    /*::[*/ 0x0866: {},\n    /*::[*/ 0x0867: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x0868: {},\n    /*::[*/ 0x086a: {},\n    /*::[*/ 0x086b: {},\n    /*::[*/ 0x086c: {},\n    /*::[*/ 0x0871: {},\n    /*::[*/ 0x0872: {},\n    /*::[*/ 0x0874: {},\n    /*::[*/ 0x0875: {},\n    /*::[*/ 0x0876: {},\n    /*::[*/ 0x0877: {},\n    /*::[*/ 0x0878: {},\n    /*::[*/ 0x0879: {},\n    /*::[*/ 0x087a: {},\n    /*::[*/ 0x087b: {},\n    /*::[*/ 0x087c: {\n        f: parse_XFCRC,\n        r: 12\n    },\n    /*::[*/ 0x087d: {\n        f: parse_XFExt,\n        r: 12\n    },\n    /*::[*/ 0x087e: {},\n    /*::[*/ 0x087f: {},\n    /*::[*/ 0x0884: {},\n    /*::[*/ 0x0885: {},\n    /*::[*/ 0x0886: {},\n    /*::[*/ 0x0887: {},\n    /*::[*/ 0x0888: {},\n    /*::[*/ 0x0889: {},\n    /*::[*/ 0x088a: {},\n    /*::[*/ 0x088b: {},\n    /*::[*/ 0x088c: {\n        f: parsebool,\n        r: 12\n    },\n    /*::[*/ 0x088d: {},\n    /*::[*/ 0x088e: {\n        r: 12\n    },\n    /*::[*/ 0x088f: {},\n    /*::[*/ 0x0890: {},\n    /*::[*/ 0x0892: {},\n    /*::[*/ 0x0893: {},\n    /*::[*/ 0x0894: {\n        f: parse_NameCmt,\n        r: 12\n    },\n    /*::[*/ 0x0895: {},\n    /*::[*/ 0x0896: {\n        f: parse_Theme,\n        r: 12\n    },\n    /*::[*/ 0x0897: {},\n    /*::[*/ 0x0898: {},\n    /*::[*/ 0x0899: {},\n    /*::[*/ 0x089a: {\n        f: parse_MTRSettings,\n        r: 12\n    },\n    /*::[*/ 0x089b: {\n        f: parsenoop2\n    },\n    /*::[*/ 0x089c: {},\n    /*::[*/ 0x089d: {},\n    /*::[*/ 0x089e: {},\n    /*::[*/ 0x089f: {},\n    /*::[*/ 0x08a3: {\n        f: parse_ForceFullCalculation\n    },\n    /*::[*/ 0x08a4: {},\n    /*::[*/ 0x08a5: {},\n    /*::[*/ 0x08a6: {},\n    /*::[*/ 0x08a7: {},\n    /*::[*/ 0x1001: {},\n    /*::[*/ 0x1002: {},\n    /*::[*/ 0x1003: {},\n    /*::[*/ 0x1006: {},\n    /*::[*/ 0x1007: {},\n    /*::[*/ 0x1009: {},\n    /*::[*/ 0x100a: {},\n    /*::[*/ 0x100b: {},\n    /*::[*/ 0x100c: {},\n    /*::[*/ 0x100d: {},\n    /*::[*/ 0x1014: {},\n    /*::[*/ 0x1015: {},\n    /*::[*/ 0x1016: {},\n    /*::[*/ 0x1017: {},\n    /*::[*/ 0x1018: {},\n    /*::[*/ 0x1019: {},\n    /*::[*/ 0x101a: {},\n    /*::[*/ 0x101b: {},\n    /*::[*/ 0x101c: {},\n    /*::[*/ 0x101d: {},\n    /*::[*/ 0x101e: {},\n    /*::[*/ 0x101f: {},\n    /*::[*/ 0x1020: {},\n    /*::[*/ 0x1021: {},\n    /*::[*/ 0x1022: {},\n    /*::[*/ 0x1024: {},\n    /*::[*/ 0x1025: {},\n    /*::[*/ 0x1026: {\n        f: parseuint16\n    },\n    /*::[*/ 0x1027: {},\n    /*::[*/ 0x1032: {},\n    /*::[*/ 0x1033: {},\n    /*::[*/ 0x1034: {},\n    /*::[*/ 0x1035: {},\n    /*::[*/ 0x103a: {},\n    /*::[*/ 0x103c: {},\n    /*::[*/ 0x103d: {},\n    /*::[*/ 0x103e: {},\n    /*::[*/ 0x103f: {},\n    /*::[*/ 0x1040: {},\n    /*::[*/ 0x1041: {},\n    /*::[*/ 0x1043: {},\n    /*::[*/ 0x1044: {\n        f: parse_ShtProps\n    },\n    /*::[*/ 0x1045: {},\n    /*::[*/ 0x1046: {},\n    /*::[*/ 0x1048: {},\n    /*::[*/ 0x104a: {},\n    /*::[*/ 0x104b: {},\n    /*::[*/ 0x104e: {},\n    /*::[*/ 0x104f: {},\n    /*::[*/ 0x1050: {},\n    /*::[*/ 0x1051: {},\n    /*::[*/ 0x105b: {},\n    /*::[*/ 0x105c: {\n        f: parse_ClrtClient\n    },\n    /*::[*/ 0x105d: {},\n    /*::[*/ 0x105f: {},\n    /*::[*/ 0x1060: {},\n    /*::[*/ 0x1061: {},\n    /*::[*/ 0x1062: {},\n    /*::[*/ 0x1063: {},\n    /*::[*/ 0x1064: {},\n    /*::[*/ 0x1065: {},\n    /*::[*/ 0x1066: {},\n    /*::[*/ 0x1067: {},\n    /*::[*/ 0x1068: {},\n    /*::[*/ 0x0000: {\n        f: parse_Dimensions\n    },\n    /*::[*/ 0x0001: {},\n    /*::[*/ 0x0002: {\n        f: parse_BIFF2INT\n    },\n    /*::[*/ 0x0003: {\n        f: parse_BIFF2NUM\n    },\n    /*::[*/ 0x0004: {\n        f: parse_BIFF2STR\n    },\n    /*::[*/ 0x0005: {\n        f: parse_BoolErr\n    },\n    /*::[*/ 0x0007: {\n        f: parse_BIFF2STRING\n    },\n    /*::[*/ 0x0008: {},\n    /*::[*/ 0x0009: {\n        f: parse_BOF\n    },\n    /*::[*/ 0x000b: {},\n    /*::[*/ 0x0016: {\n        f: parseuint16\n    },\n    /*::[*/ 0x001e: {\n        f: parse_BIFF2Format\n    },\n    /*::[*/ 0x001f: {},\n    /* 16-bit cnt of BIFF2FORMAT records */ /*::[*/ 0x0020: {},\n    /*::[*/ 0x0021: {\n        f: parse_Array\n    },\n    /*::[*/ 0x0024: {},\n    /*::[*/ 0x0025: {\n        f: parse_DefaultRowHeight\n    },\n    // 0x2c ??\n    // 0x2d ??\n    // 0x2e ??\n    // 0x30 FONTCOUNT: number of fonts\n    /*::[*/ 0x0032: {\n        f: parse_BIFF2FONTXTRA\n    },\n    // 0x35: INFOOPTS\n    // 0x36: TABLE (BIFF2 only)\n    // 0x37: TABLE2 (BIFF2 only)\n    // 0x38: WNDESK\n    // 0x39 ??\n    // 0x3a: BEGINPREF\n    // 0x3b: ENDPREF\n    /*::[*/ 0x003e: {},\n    // 0x3f ??\n    // 0x46: SHOWSCROLL\n    // 0x47: SHOWFORMULA\n    // 0x48: STATUSBAR\n    // 0x49: SHORTMENUS\n    // 0x4A:\n    // 0x4B:\n    // 0x4C:\n    // 0x4E:\n    // 0x4F:\n    // 0x58: TOOLBAR (BIFF3)\n    /* - - - */ /*::[*/ 0x0034: {},\n    /*::[*/ 0x0043: {},\n    /*::[*/ 0x0044: {\n        f: parseuint16\n    },\n    /*::[*/ 0x0045: {},\n    /*::[*/ 0x0056: {},\n    /* 16-bit cnt, similar to BIFF2 */ /*::[*/ 0x007e: {},\n    /* Not necessarily same as 0x027e */ /*::[*/ 0x007f: {\n        f: parse_ImData\n    },\n    /*::[*/ 0x0087: {},\n    /*::[*/ 0x0088: {},\n    /*::[*/ 0x0089: {},\n    // 0x8A\n    // 0x8B LH: alternate menu key flag (BIFF3/4)\n    // 0x8E\n    // 0x8F\n    /*::[*/ 0x0091: {},\n    // 0x93 STYLE\n    /*::[*/ 0x0094: {},\n    /*::[*/ 0x0095: {},\n    /*::[*/ 0x0096: {},\n    // 0xA2 FNPROTO: function prototypes (BIFF4)\n    // 0xA3\n    // 0xA8\n    /*::[*/ 0x00a9: {},\n    /*::[*/ 0x00ab: {},\n    /*::[*/ 0x00bc: {},\n    /* Not necessarily same as 0x04bc */ /*::[*/ 0x00bf: {},\n    /*::[*/ 0x00c0: {},\n    /*::[*/ 0x00c2: {},\n    /*::[*/ 0x00c3: {},\n    /*::[*/ 0x00d6: {\n        f: parse_RString\n    },\n    /*::[*/ 0x00df: {},\n    /*::[*/ 0x00ea: {},\n    /*::[*/ 0x0162: {},\n    /*::[*/ 0x01a5: {},\n    /*::[*/ 0x0206: {\n        f: parse_Formula\n    },\n    /*::[*/ 0x0209: {\n        f: parse_BOF\n    },\n    /*::[*/ 0x0218: {\n        f: parse_Lbl\n    },\n    /*::[*/ 0x0223: {\n        f: parse_ExternName\n    },\n    /*::[*/ 0x0231: {},\n    /*::[*/ 0x0243: {},\n    /*::[*/ 0x0406: {\n        f: parse_Formula\n    },\n    /*::[*/ 0x0409: {\n        f: parse_BOF\n    },\n    /*::[*/ 0x0443: {},\n    /*::[*/ 0x086d: {},\n    /*::[*/ 0x0873: {},\n    /*::[*/ 0x0881: {},\n    /*::[*/ 0x08c0: {},\n    /*::[*/ 0x08c1: {},\n    /*::[*/ 0x08c2: {},\n    /*::[*/ 0x08c3: {},\n    /*::[*/ 0x08c4: {},\n    /*::[*/ 0x08c5: {},\n    /*::[*/ 0x08c6: {},\n    /*::[*/ 0x08c7: {},\n    /*::[*/ 0x08c8: {},\n    /*::[*/ 0x08c9: {},\n    /*::[*/ 0x08ca: {},\n    /*::[*/ 0x08cb: {},\n    /*::[*/ 0x08d6: {\n        r: 12\n    },\n    /*::[*/ 0x7262: {}\n};\nfunction write_biff_rec(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) /*:void*/ {\n    var t /*:number*/  = type;\n    if (isNaN(t)) return;\n    var len = length || (payload || []).length || 0;\n    var o = ba.next(4);\n    o.write_shift(2, t);\n    o.write_shift(2, len);\n    if (/*:: len != null &&*/ len > 0 && is_buf(payload)) ba.push(payload);\n}\nfunction write_biff_continue(ba /*:BufArray*/ , type /*:number*/ , payload, length /*:?number*/ ) /*:void*/ {\n    var len = length || (payload || []).length || 0;\n    if (len <= 8224) return write_biff_rec(ba, type, payload, len);\n    var t = type;\n    if (isNaN(t)) return;\n    var parts = payload.parts || [], sidx = 0;\n    var i = 0, w = 0;\n    while(w + (parts[sidx] || 8224) <= 8224){\n        w += parts[sidx] || 8224;\n        sidx++;\n    }\n    var o = ba.next(4);\n    o.write_shift(2, t);\n    o.write_shift(2, w);\n    ba.push(payload.slice(i, i + w));\n    i += w;\n    while(i < len){\n        o = ba.next(4);\n        o.write_shift(2, 0x3c); // TODO: figure out correct continue type\n        w = 0;\n        while(w + (parts[sidx] || 8224) <= 8224){\n            w += parts[sidx] || 8224;\n            sidx++;\n        }\n        o.write_shift(2, w);\n        ba.push(payload.slice(i, i + w));\n        i += w;\n    }\n}\nfunction write_BIFF2Cell(out, r /*:number*/ , c /*:number*/ ) {\n    if (!out) out = new_buf(7);\n    out.write_shift(2, r);\n    out.write_shift(2, c);\n    out.write_shift(2, 0);\n    out.write_shift(1, 0);\n    return out;\n}\nfunction write_BIFF2BERR(r /*:number*/ , c /*:number*/ , val, t /*:?string*/ ) {\n    var out = new_buf(9);\n    write_BIFF2Cell(out, r, c);\n    write_Bes(val, t || \"b\", out);\n    return out;\n}\n/* TODO: codepage, large strings */ function write_BIFF2LABEL(r /*:number*/ , c /*:number*/ , val) {\n    var out = new_buf(8 + 2 * val.length);\n    write_BIFF2Cell(out, r, c);\n    out.write_shift(1, val.length);\n    out.write_shift(val.length, val, \"sbcs\");\n    return out.l < out.length ? out.slice(0, out.l) : out;\n}\nfunction write_ws_biff2_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/  /*::, opts*/ ) {\n    if (cell.v != null) switch(cell.t){\n        case \"d\":\n        case \"n\":\n            var v = cell.t == \"d\" ? datenum(parseDate(cell.v)) : cell.v;\n            if (v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));\n            else write_biff_rec(ba, 0x0003, write_BIFF2NUM(R, C, v));\n            return;\n        case \"b\":\n        case \"e\":\n            write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t));\n            return;\n        /* TODO: codepage, sst */ case \"s\":\n        case \"str\":\n            write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, (cell.v || \"\").slice(0, 255)));\n            return;\n    }\n    write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));\n}\nfunction write_ws_biff2(ba /*:BufArray*/ , ws /*:Worksheet*/ , idx /*:number*/ , opts /*::, wb:Workbook*/ ) {\n    var dense = Array.isArray(ws);\n    var range = safe_decode_range(ws[\"!ref\"] || \"A1\"), ref /*:string*/ , rr = \"\", cols /*:Array<string>*/  = [];\n    if (range.e.c > 0xFF || range.e.r > 0x3FFF) {\n        if (opts.WTF) throw new Error(\"Range \" + (ws[\"!ref\"] || \"A1\") + \" exceeds format limit A1:IV16384\");\n        range.e.c = Math.min(range.e.c, 0xFF);\n        range.e.r = Math.min(range.e.c, 0x3FFF);\n        ref = encode_range(range);\n    }\n    for(var R = range.s.r; R <= range.e.r; ++R){\n        rr = encode_row(R);\n        for(var C = range.s.c; C <= range.e.c; ++C){\n            if (R === range.s.r) cols[C] = encode_col(C);\n            ref = cols[C] + rr;\n            var cell = dense ? (ws[R] || [])[C] : ws[ref];\n            if (!cell) continue;\n            /* write cell */ write_ws_biff2_cell(ba, cell, R, C, opts);\n        }\n    }\n}\n/* Based on test files */ function write_biff2_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {\n    var o = opts || {};\n    if (DENSE != null && o.dense == null) o.dense = DENSE;\n    var ba = buf_array();\n    var idx = 0;\n    for(var i = 0; i < wb.SheetNames.length; ++i)if (wb.SheetNames[i] == o.sheet) idx = i;\n    if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error(\"Sheet not found: \" + o.sheet);\n    write_biff_rec(ba, o.biff == 4 ? 0x0409 : o.biff == 3 ? 0x0209 : 0x0009, write_BOF(wb, 0x10, o));\n    /* ... */ write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);\n    /* ... */ write_biff_rec(ba, 0x000A);\n    return ba.end();\n}\nfunction write_FONTS_biff8(ba, data, opts) {\n    write_biff_rec(ba, 0x0031 /* Font */ , write_Font({\n        sz: 12,\n        color: {\n            theme: 1\n        },\n        name: \"Arial\",\n        family: 2,\n        scheme: \"minor\"\n    }, opts));\n}\nfunction write_FMTS_biff8(ba, NF /*:?SSFTable*/ , opts) {\n    if (!NF) return;\n    [\n        [\n            5,\n            8\n        ],\n        [\n            23,\n            26\n        ],\n        [\n            41,\n            44\n        ],\n        [\n            /*63*/ 50,\n            /*66],[164,*/ 392\n        ]\n    ].forEach(function(r) {\n        /*:: if(!NF) return; */ for(var i = r[0]; i <= r[1]; ++i)if (NF[i] != null) write_biff_rec(ba, 0x041E /* Format */ , write_Format(i, NF[i], opts));\n    });\n}\nfunction write_FEAT(ba, ws) {\n    /* [MS-XLS] 2.4.112 */ var o = new_buf(19);\n    o.write_shift(4, 0x867);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    o.write_shift(2, 3);\n    o.write_shift(1, 1);\n    o.write_shift(4, 0);\n    write_biff_rec(ba, 0x0867 /* FeatHdr */ , o);\n    /* [MS-XLS] 2.4.111 */ o = new_buf(39);\n    o.write_shift(4, 0x868);\n    o.write_shift(4, 0);\n    o.write_shift(4, 0);\n    o.write_shift(2, 3);\n    o.write_shift(1, 0);\n    o.write_shift(4, 0);\n    o.write_shift(2, 1);\n    o.write_shift(4, 4);\n    o.write_shift(2, 0);\n    write_Ref8U(safe_decode_range(ws[\"!ref\"] || \"A1\"), o);\n    o.write_shift(4, 4);\n    write_biff_rec(ba, 0x0868 /* Feat */ , o);\n}\nfunction write_CELLXFS_biff8(ba, opts) {\n    for(var i = 0; i < 16; ++i)write_biff_rec(ba, 0x00e0 /* XF */ , write_XF({\n        numFmtId: 0,\n        style: true\n    }, 0, opts));\n    opts.cellXfs.forEach(function(c) {\n        write_biff_rec(ba, 0x00e0 /* XF */ , write_XF(c, 0, opts));\n    });\n}\nfunction write_ws_biff8_hlinks(ba /*:BufArray*/ , ws) {\n    for(var R = 0; R < ws[\"!links\"].length; ++R){\n        var HL = ws[\"!links\"][R];\n        write_biff_rec(ba, 0x01b8 /* HLink */ , write_HLink(HL));\n        if (HL[1].Tooltip) write_biff_rec(ba, 0x0800 /* HLinkTooltip */ , write_HLinkTooltip(HL));\n    }\n    delete ws[\"!links\"];\n}\nfunction write_ws_cols_biff8(ba, cols) {\n    if (!cols) return;\n    var cnt = 0;\n    cols.forEach(function(col, idx) {\n        if (++cnt <= 256 && col) {\n            write_biff_rec(ba, 0x007d /* ColInfo */ , write_ColInfo(col_obj_w(idx, col), idx));\n        }\n    });\n}\nfunction write_ws_biff8_cell(ba /*:BufArray*/ , cell /*:Cell*/ , R /*:number*/ , C /*:number*/ , opts) {\n    var os = 16 + get_cell_style(opts.cellXfs, cell, opts);\n    if (cell.v == null && !cell.bf) {\n        write_biff_rec(ba, 0x0201 /* Blank */ , write_XLSCell(R, C, os));\n        return;\n    }\n    if (cell.bf) write_biff_rec(ba, 0x0006 /* Formula */ , write_Formula(cell, R, C, opts, os));\n    else switch(cell.t){\n        case \"d\":\n        case \"n\":\n            var v = cell.t == \"d\" ? datenum(parseDate(cell.v)) : cell.v;\n            /* TODO: emit RK as appropriate */ write_biff_rec(ba, 0x0203 /* Number */ , write_Number(R, C, v, os, opts));\n            break;\n        case \"b\":\n        case \"e\":\n            write_biff_rec(ba, 0x0205 /* BoolErr */ , write_BoolErr(R, C, cell.v, os, opts, cell.t));\n            break;\n        /* TODO: codepage, sst */ case \"s\":\n        case \"str\":\n            if (opts.bookSST) {\n                var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);\n                write_biff_rec(ba, 0x00fd /* LabelSst */ , write_LabelSst(R, C, isst, os, opts));\n            } else write_biff_rec(ba, 0x0204 /* Label */ , write_Label(R, C, (cell.v || \"\").slice(0, 255), os, opts));\n            break;\n        default:\n            write_biff_rec(ba, 0x0201 /* Blank */ , write_XLSCell(R, C, os));\n    }\n}\n/* [MS-XLS] 2.1.7.20.5 */ function write_ws_biff8(idx /*:number*/ , opts, wb /*:Workbook*/ ) {\n    var ba = buf_array();\n    var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};\n    var _WB /*:WBWBProps*/  = (wb || {}).Workbook || {} /*:any*/ ;\n    var _sheet /*:WBWSProp*/  = (_WB.Sheets || [])[idx] || {} /*:any*/ ;\n    var dense = Array.isArray(ws);\n    var b8 = opts.biff == 8;\n    var ref /*:string*/ , rr = \"\", cols /*:Array<string>*/  = [];\n    var range = safe_decode_range(ws[\"!ref\"] || \"A1\");\n    var MAX_ROWS = b8 ? 65536 : 16384;\n    if (range.e.c > 0xFF || range.e.r >= MAX_ROWS) {\n        if (opts.WTF) throw new Error(\"Range \" + (ws[\"!ref\"] || \"A1\") + \" exceeds format limit A1:IV16384\");\n        range.e.c = Math.min(range.e.c, 0xFF);\n        range.e.r = Math.min(range.e.c, MAX_ROWS - 1);\n    }\n    write_biff_rec(ba, 0x0809, write_BOF(wb, 0x10, opts));\n    /* [Uncalced] Index */ write_biff_rec(ba, 0x000d /* CalcMode */ , writeuint16(1));\n    write_biff_rec(ba, 0x000c /* CalcCount */ , writeuint16(100));\n    write_biff_rec(ba, 0x000f /* CalcRefMode */ , writebool(true));\n    write_biff_rec(ba, 0x0011 /* CalcIter */ , writebool(false));\n    write_biff_rec(ba, 0x0010 /* CalcDelta */ , write_Xnum(0.001));\n    write_biff_rec(ba, 0x005f /* CalcSaveRecalc */ , writebool(true));\n    write_biff_rec(ba, 0x002a /* PrintRowCol */ , writebool(false));\n    write_biff_rec(ba, 0x002b /* PrintGrid */ , writebool(false));\n    write_biff_rec(ba, 0x0082 /* GridSet */ , writeuint16(1));\n    write_biff_rec(ba, 0x0080 /* Guts */ , write_Guts([\n        0,\n        0\n    ]));\n    /* DefaultRowHeight WsBool [Sync] [LPr] [HorizontalPageBreaks] [VerticalPageBreaks] */ /* Header (string) */ /* Footer (string) */ write_biff_rec(ba, 0x0083 /* HCenter */ , writebool(false));\n    write_biff_rec(ba, 0x0084 /* VCenter */ , writebool(false));\n    /* ... */ if (b8) write_ws_cols_biff8(ba, ws[\"!cols\"]);\n    /* ... */ write_biff_rec(ba, 0x200, write_Dimensions(range, opts));\n    /* ... */ if (b8) ws[\"!links\"] = [];\n    for(var R = range.s.r; R <= range.e.r; ++R){\n        rr = encode_row(R);\n        for(var C = range.s.c; C <= range.e.c; ++C){\n            if (R === range.s.r) cols[C] = encode_col(C);\n            ref = cols[C] + rr;\n            var cell = dense ? (ws[R] || [])[C] : ws[ref];\n            if (!cell) continue;\n            /* write cell */ write_ws_biff8_cell(ba, cell, R, C, opts);\n            if (b8 && cell.l) ws[\"!links\"].push([\n                ref,\n                cell.l\n            ]);\n        }\n    }\n    var cname /*:string*/  = _sheet.CodeName || _sheet.name || s;\n    /* ... */ if (b8) write_biff_rec(ba, 0x023e /* Window2 */ , write_Window2((_WB.Views || [])[0]));\n    /* ... */ if (b8 && (ws[\"!merges\"] || []).length) write_biff_rec(ba, 0x00e5 /* MergeCells */ , write_MergeCells(ws[\"!merges\"]));\n    /* [LRng] *QUERYTABLE [PHONETICINFO] CONDFMTS */ if (b8) write_ws_biff8_hlinks(ba, ws);\n    /* [DVAL] */ write_biff_rec(ba, 0x01ba /* CodeName */ , write_XLUnicodeString(cname, opts));\n    /* *WebPub *CellWatch [SheetExt] */ if (b8) write_FEAT(ba, ws);\n    /* *FEAT11 *RECORD12 */ write_biff_rec(ba, 0x000a /* EOF */ );\n    return ba.end();\n}\n/* [MS-XLS] 2.1.7.20.3 */ function write_biff8_global(wb /*:Workbook*/ , bufs, opts /*:WriteOpts*/ ) {\n    var A = buf_array();\n    var _WB /*:WBWBProps*/  = (wb || {}).Workbook || {} /*:any*/ ;\n    var _sheets /*:Array<WBWSProp>*/  = _WB.Sheets || [];\n    var _wb /*:WBProps*/  = /*::((*/ _WB.WBProps || {} /*:: ):any)*/ ;\n    var b8 = opts.biff == 8, b5 = opts.biff == 5;\n    write_biff_rec(A, 0x0809, write_BOF(wb, 0x05, opts));\n    if (opts.bookType == \"xla\") write_biff_rec(A, 0x0087 /* Addin */ );\n    write_biff_rec(A, 0x00e1 /* InterfaceHdr */ , b8 ? writeuint16(0x04b0) : null);\n    write_biff_rec(A, 0x00c1 /* Mms */ , writezeroes(2));\n    if (b5) write_biff_rec(A, 0x00bf /* ToolbarHdr */ );\n    if (b5) write_biff_rec(A, 0x00c0 /* ToolbarEnd */ );\n    write_biff_rec(A, 0x00e2 /* InterfaceEnd */ );\n    write_biff_rec(A, 0x005c /* WriteAccess */ , write_WriteAccess(\"SheetJS\", opts));\n    /* [FileSharing] */ write_biff_rec(A, 0x0042 /* CodePage */ , writeuint16(b8 ? 0x04b0 : 0x04E4));\n    /* *2047 Lel */ if (b8) write_biff_rec(A, 0x0161 /* DSF */ , writeuint16(0));\n    if (b8) write_biff_rec(A, 0x01c0 /* Excel9File */ );\n    write_biff_rec(A, 0x013d /* RRTabId */ , write_RRTabId(wb.SheetNames.length));\n    if (b8 && wb.vbaraw) write_biff_rec(A, 0x00d3 /* ObProj */ );\n    /* [ObNoMacros] */ if (b8 && wb.vbaraw) {\n        var cname /*:string*/  = _wb.CodeName || \"ThisWorkbook\";\n        write_biff_rec(A, 0x01ba /* CodeName */ , write_XLUnicodeString(cname, opts));\n    }\n    write_biff_rec(A, 0x009c /* BuiltInFnGroupCount */ , writeuint16(0x11));\n    /* *FnGroupName *FnGrp12 */ /* *Lbl */ /* [OleObjectSize] */ write_biff_rec(A, 0x0019 /* WinProtect */ , writebool(false));\n    write_biff_rec(A, 0x0012 /* Protect */ , writebool(false));\n    write_biff_rec(A, 0x0013 /* Password */ , writeuint16(0));\n    if (b8) write_biff_rec(A, 0x01af /* Prot4Rev */ , writebool(false));\n    if (b8) write_biff_rec(A, 0x01bc /* Prot4RevPass */ , writeuint16(0));\n    write_biff_rec(A, 0x003d /* Window1 */ , write_Window1(opts));\n    write_biff_rec(A, 0x0040 /* Backup */ , writebool(false));\n    write_biff_rec(A, 0x008d /* HideObj */ , writeuint16(0));\n    write_biff_rec(A, 0x0022 /* Date1904 */ , writebool(safe1904(wb) == \"true\"));\n    write_biff_rec(A, 0x000e /* CalcPrecision */ , writebool(true));\n    if (b8) write_biff_rec(A, 0x01b7 /* RefreshAll */ , writebool(false));\n    write_biff_rec(A, 0x00DA /* BookBool */ , writeuint16(0));\n    /* ... */ write_FONTS_biff8(A, wb, opts);\n    write_FMTS_biff8(A, wb.SSF, opts);\n    write_CELLXFS_biff8(A, opts);\n    /* ... */ if (b8) write_biff_rec(A, 0x0160 /* UsesELFs */ , writebool(false));\n    var a = A.end();\n    var C = buf_array();\n    /* METADATA [MTRSettings] [ForceFullCalculation] */ if (b8) write_biff_rec(C, 0x008C, write_Country());\n    /* *SUPBOOK *LBL *RTD [RecalcId] *HFPicture *MSODRAWINGGROUP */ /* BIFF8: [SST *Continue] ExtSST */ if (b8 && opts.Strings) write_biff_continue(C, 0x00FC, write_SST(opts.Strings, opts));\n    /* *WebPub [WOpt] [CrErr] [BookExt] *FeatHdr *DConn [THEME] [CompressPictures] [Compat12] [GUIDTypeLib] */ write_biff_rec(C, 0x000A /* EOF */ );\n    var c = C.end();\n    var B = buf_array();\n    var blen = 0, j = 0;\n    for(j = 0; j < wb.SheetNames.length; ++j)blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;\n    var start = a.length + blen + c.length;\n    for(j = 0; j < wb.SheetNames.length; ++j){\n        var _sheet /*:WBWSProp*/  = _sheets[j] || {} /*:any*/ ;\n        write_biff_rec(B, 0x0085 /* BoundSheet8 */ , write_BoundSheet8({\n            pos: start,\n            hs: _sheet.Hidden || 0,\n            dt: 0,\n            name: wb.SheetNames[j]\n        }, opts));\n        start += bufs[j].length;\n    }\n    /* 1*BoundSheet8 */ var b = B.end();\n    if (blen != b.length) throw new Error(\"BS8 \" + blen + \" != \" + b.length);\n    var out = [];\n    if (a.length) out.push(a);\n    if (b.length) out.push(b);\n    if (c.length) out.push(c);\n    return bconcat(out);\n}\n/* [MS-XLS] 2.1.7.20 Workbook Stream */ function write_biff8_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {\n    var o = opts || {};\n    var bufs = [];\n    if (wb && !wb.SSF) {\n        wb.SSF = dup(table_fmt);\n    }\n    if (wb && wb.SSF) {\n        make_ssf();\n        SSF_load_table(wb.SSF);\n        // $FlowIgnore\n        o.revssf = evert_num(wb.SSF);\n        o.revssf[wb.SSF[65535]] = 0;\n        o.ssf = wb.SSF;\n    }\n    o.Strings = /*::((*/ [] /*:: :any):SST)*/ ;\n    o.Strings.Count = 0;\n    o.Strings.Unique = 0;\n    fix_write_opts(o);\n    o.cellXfs = [];\n    get_cell_style(o.cellXfs, {}, {\n        revssf: {\n            \"General\": 0\n        }\n    });\n    if (!wb.Props) wb.Props = {};\n    for(var i = 0; i < wb.SheetNames.length; ++i)bufs[bufs.length] = write_ws_biff8(i, o, wb);\n    bufs.unshift(write_biff8_global(wb, bufs, o));\n    return bconcat(bufs);\n}\nfunction write_biff_buf(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) {\n    for(var i = 0; i <= wb.SheetNames.length; ++i){\n        var ws = wb.Sheets[wb.SheetNames[i]];\n        if (!ws || !ws[\"!ref\"]) continue;\n        var range = decode_range(ws[\"!ref\"]);\n        if (range.e.c > 255) {\n            if (typeof console != \"undefined\" && console.error) console.error(\"Worksheet '\" + wb.SheetNames[i] + \"' extends beyond column IV (255).  Data may be lost.\");\n        }\n    }\n    var o = opts || {};\n    switch(o.biff || 2){\n        case 8:\n        case 5:\n            return write_biff8_buf(wb, opts);\n        case 4:\n        case 3:\n        case 2:\n            return write_biff2_buf(wb, opts);\n    }\n    throw new Error(\"invalid type \" + o.bookType + \" for BIFF\");\n}\n/* note: browser DOM element cannot see mso- style attrs, must parse */ function html_to_sheet(str /*:string*/ , _opts) /*:Workbook*/ {\n    var opts = _opts || {};\n    if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n    var ws /*:Worksheet*/  = opts.dense ? [] : {} /*:any*/ ;\n    str = str.replace(/<!--.*?-->/g, \"\");\n    var mtch /*:any*/  = str.match(/<table/i);\n    if (!mtch) throw new Error(\"Invalid HTML: could not find <table>\");\n    var mtch2 /*:any*/  = str.match(/<\\/table/i);\n    var i /*:number*/  = mtch.index, j /*:number*/  = mtch2 && mtch2.index || str.length;\n    var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, \"<tr>\");\n    var R = -1, C = 0, RS = 0, CS = 0;\n    var range /*:Range*/  = {\n        s: {\n            r: 10000000,\n            c: 10000000\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    var merges /*:Array<Range>*/  = [];\n    for(i = 0; i < rows.length; ++i){\n        var row = rows[i].trim();\n        var hd = row.slice(0, 3).toLowerCase();\n        if (hd == \"<tr\") {\n            ++R;\n            if (opts.sheetRows && opts.sheetRows <= R) {\n                --R;\n                break;\n            }\n            C = 0;\n            continue;\n        }\n        if (hd != \"<td\" && hd != \"<th\") continue;\n        var cells = row.split(/<\\/t[dh]>/i);\n        for(j = 0; j < cells.length; ++j){\n            var cell = cells[j].trim();\n            if (!cell.match(/<t[dh]/i)) continue;\n            var m = cell, cc = 0;\n            /* TODO: parse styles etc */ while(m.charAt(0) == \"<\" && (cc = m.indexOf(\">\")) > -1)m = m.slice(cc + 1);\n            for(var midx = 0; midx < merges.length; ++midx){\n                var _merge /*:Range*/  = merges[midx];\n                if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {\n                    C = _merge.e.c + 1;\n                    midx = -1;\n                }\n            }\n            var tag = parsexmltag(cell.slice(0, cell.indexOf(\">\")));\n            CS = tag.colspan ? +tag.colspan : 1;\n            if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({\n                s: {\n                    r: R,\n                    c: C\n                },\n                e: {\n                    r: R + (RS || 1) - 1,\n                    c: C + CS - 1\n                }\n            });\n            var _t /*:string*/  = tag.t || tag[\"data-t\"] || \"\";\n            /* TODO: generate stub cells */ if (!m.length) {\n                C += CS;\n                continue;\n            }\n            m = htmldecode(m);\n            if (range.s.r > R) range.s.r = R;\n            if (range.e.r < R) range.e.r = R;\n            if (range.s.c > C) range.s.c = C;\n            if (range.e.c < C) range.e.c = C;\n            if (!m.length) {\n                C += CS;\n                continue;\n            }\n            var o /*:Cell*/  = {\n                t: \"s\",\n                v: m\n            };\n            if (opts.raw || !m.trim().length || _t == \"s\") {} else if (m === \"TRUE\") o = {\n                t: \"b\",\n                v: true\n            };\n            else if (m === \"FALSE\") o = {\n                t: \"b\",\n                v: false\n            };\n            else if (!isNaN(fuzzynum(m))) o = {\n                t: \"n\",\n                v: fuzzynum(m)\n            };\n            else if (!isNaN(fuzzydate(m).getDate())) {\n                o = {\n                    t: \"d\",\n                    v: parseDate(m)\n                } /*:any*/ ;\n                if (!opts.cellDates) o = {\n                    t: \"n\",\n                    v: datenum(o.v)\n                } /*:any*/ ;\n                o.z = opts.dateNF || table_fmt[14];\n            }\n            if (opts.dense) {\n                if (!ws[R]) ws[R] = [];\n                ws[R][C] = o;\n            } else ws[encode_cell({\n                r: R,\n                c: C\n            })] = o;\n            C += CS;\n        }\n    }\n    ws[\"!ref\"] = encode_range(range);\n    if (merges.length) ws[\"!merges\"] = merges;\n    return ws;\n}\nfunction make_html_row(ws /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , o /*:Sheet2HTMLOpts*/ ) /*:string*/ {\n    var M /*:Array<Range>*/  = ws[\"!merges\"] || [];\n    var oo /*:Array<string>*/  = [];\n    for(var C = r.s.c; C <= r.e.c; ++C){\n        var RS = 0, CS = 0;\n        for(var j = 0; j < M.length; ++j){\n            if (M[j].s.r > R || M[j].s.c > C) continue;\n            if (M[j].e.r < R || M[j].e.c < C) continue;\n            if (M[j].s.r < R || M[j].s.c < C) {\n                RS = -1;\n                break;\n            }\n            RS = M[j].e.r - M[j].s.r + 1;\n            CS = M[j].e.c - M[j].s.c + 1;\n            break;\n        }\n        if (RS < 0) continue;\n        var coord = encode_cell({\n            r: R,\n            c: C\n        });\n        var cell = o.dense ? (ws[R] || [])[C] : ws[coord];\n        /* TODO: html entities */ var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || \"\")) || \"\";\n        var sp = {} /*:any*/ ;\n        if (RS > 1) sp.rowspan = RS;\n        if (CS > 1) sp.colspan = CS;\n        if (o.editable) w = '<span contenteditable=\"true\">' + w + \"</span>\";\n        else if (cell) {\n            sp[\"data-t\"] = cell && cell.t || \"z\";\n            if (cell.v != null) sp[\"data-v\"] = cell.v;\n            if (cell.z != null) sp[\"data-z\"] = cell.z;\n            if (cell.l && (cell.l.Target || \"#\").charAt(0) != \"#\") w = '<a href=\"' + cell.l.Target + '\">' + w + \"</a>\";\n        }\n        sp.id = (o.id || \"sjs\") + \"-\" + coord;\n        oo.push(writextag(\"td\", w, sp));\n    }\n    var preamble = \"<tr>\";\n    return preamble + oo.join(\"\") + \"</tr>\";\n}\nvar HTML_BEGIN = '<html><head><meta charset=\"utf-8\"/><title>SheetJS Table Export</title></head><body>';\nvar HTML_END = \"</body></html>\";\nfunction html_to_workbook(str /*:string*/ , opts) /*:Workbook*/ {\n    var mtch = str.match(/<table[\\s\\S]*?>[\\s\\S]*?<\\/table>/gi);\n    if (!mtch || mtch.length == 0) throw new Error(\"Invalid HTML: could not find <table>\");\n    if (mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);\n    var wb = book_new();\n    mtch.forEach(function(s, idx) {\n        book_append_sheet(wb, html_to_sheet(s, opts), \"Sheet\" + (idx + 1));\n    });\n    return wb;\n}\nfunction make_html_preamble(ws /*:Worksheet*/ , R /*:Range*/ , o /*:Sheet2HTMLOpts*/ ) /*:string*/ {\n    var out /*:Array<string>*/  = [];\n    return out.join(\"\") + \"<table\" + (o && o.id ? ' id=\"' + o.id + '\"' : \"\") + \">\";\n}\nfunction sheet_to_html(ws /*:Worksheet*/ , opts /*:?Sheet2HTMLOpts*/  /*, wb:?Workbook*/ ) /*:string*/ {\n    var o = opts || {};\n    var header = o.header != null ? o.header : HTML_BEGIN;\n    var footer = o.footer != null ? o.footer : HTML_END;\n    var out /*:Array<string>*/  = [\n        header\n    ];\n    var r = decode_range(ws[\"!ref\"]);\n    o.dense = Array.isArray(ws);\n    out.push(make_html_preamble(ws, r, o));\n    for(var R = r.s.r; R <= r.e.r; ++R)out.push(make_html_row(ws, r, R, o));\n    out.push(\"</table>\" + footer);\n    return out.join(\"\");\n}\nfunction sheet_add_dom(ws /*:Worksheet*/ , table /*:HTMLElement*/ , _opts /*:?any*/ ) /*:Worksheet*/ {\n    var opts = _opts || {};\n    if (DENSE != null) opts.dense = DENSE;\n    var or_R = 0, or_C = 0;\n    if (opts.origin != null) {\n        if (typeof opts.origin == \"number\") or_R = opts.origin;\n        else {\n            var _origin /*:CellAddress*/  = typeof opts.origin == \"string\" ? decode_cell(opts.origin) : opts.origin;\n            or_R = _origin.r;\n            or_C = _origin.c;\n        }\n    }\n    var rows /*:HTMLCollection<HTMLTableRowElement>*/  = table.getElementsByTagName(\"tr\");\n    var sheetRows = Math.min(opts.sheetRows || 10000000, rows.length);\n    var range /*:Range*/  = {\n        s: {\n            r: 0,\n            c: 0\n        },\n        e: {\n            r: or_R,\n            c: or_C\n        }\n    };\n    if (ws[\"!ref\"]) {\n        var _range /*:Range*/  = decode_range(ws[\"!ref\"]);\n        range.s.r = Math.min(range.s.r, _range.s.r);\n        range.s.c = Math.min(range.s.c, _range.s.c);\n        range.e.r = Math.max(range.e.r, _range.e.r);\n        range.e.c = Math.max(range.e.c, _range.e.c);\n        if (or_R == -1) range.e.r = or_R = _range.e.r + 1;\n    }\n    var merges /*:Array<Range>*/  = [], midx = 0;\n    var rowinfo /*:Array<RowInfo>*/  = ws[\"!rows\"] || (ws[\"!rows\"] = []);\n    var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;\n    if (!ws[\"!cols\"]) ws[\"!cols\"] = [];\n    for(; _R < rows.length && R < sheetRows; ++_R){\n        var row /*:HTMLTableRowElement*/  = rows[_R];\n        if (is_dom_element_hidden(row)) {\n            if (opts.display) continue;\n            rowinfo[R] = {\n                hidden: true\n            };\n        }\n        var elts /*:HTMLCollection<HTMLTableCellElement>*/  = row.children /*:any*/ ;\n        for(_C = C = 0; _C < elts.length; ++_C){\n            var elt /*:HTMLTableCellElement*/  = elts[_C];\n            if (opts.display && is_dom_element_hidden(elt)) continue;\n            var v /*:?string*/  = elt.hasAttribute(\"data-v\") ? elt.getAttribute(\"data-v\") : elt.hasAttribute(\"v\") ? elt.getAttribute(\"v\") : htmldecode(elt.innerHTML);\n            var z /*:?string*/  = elt.getAttribute(\"data-z\") || elt.getAttribute(\"z\");\n            for(midx = 0; midx < merges.length; ++midx){\n                var m /*:Range*/  = merges[midx];\n                if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {\n                    C = m.e.c + 1 - or_C;\n                    midx = -1;\n                }\n            }\n            /* TODO: figure out how to extract nonstandard mso- style */ CS = +elt.getAttribute(\"colspan\") || 1;\n            if ((RS = +elt.getAttribute(\"rowspan\") || 1) > 1 || CS > 1) merges.push({\n                s: {\n                    r: R + or_R,\n                    c: C + or_C\n                },\n                e: {\n                    r: R + or_R + (RS || 1) - 1,\n                    c: C + or_C + (CS || 1) - 1\n                }\n            });\n            var o /*:Cell*/  = {\n                t: \"s\",\n                v: v\n            };\n            var _t /*:string*/  = elt.getAttribute(\"data-t\") || elt.getAttribute(\"t\") || \"\";\n            if (v != null) {\n                if (v.length == 0) o.t = _t || \"z\";\n                else if (opts.raw || v.trim().length == 0 || _t == \"s\") {} else if (v === \"TRUE\") o = {\n                    t: \"b\",\n                    v: true\n                };\n                else if (v === \"FALSE\") o = {\n                    t: \"b\",\n                    v: false\n                };\n                else if (!isNaN(fuzzynum(v))) o = {\n                    t: \"n\",\n                    v: fuzzynum(v)\n                };\n                else if (!isNaN(fuzzydate(v).getDate())) {\n                    o = {\n                        t: \"d\",\n                        v: parseDate(v)\n                    } /*:any*/ ;\n                    if (!opts.cellDates) o = {\n                        t: \"n\",\n                        v: datenum(o.v)\n                    } /*:any*/ ;\n                    o.z = opts.dateNF || table_fmt[14];\n                }\n            }\n            if (o.z === undefined && z != null) o.z = z;\n            /* The first link is used.  Links are assumed to be fully specified.\n\t\t\t * TODO: The right way to process relative links is to make a new <a> */ var l = \"\", Aelts = elt.getElementsByTagName(\"A\");\n            if (Aelts && Aelts.length) {\n                for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)if (Aelts[Aelti].hasAttribute(\"href\")) {\n                    l = Aelts[Aelti].getAttribute(\"href\");\n                    if (l.charAt(0) != \"#\") break;\n                }\n            }\n            if (l && l.charAt(0) != \"#\") o.l = {\n                Target: l\n            };\n            if (opts.dense) {\n                if (!ws[R + or_R]) ws[R + or_R] = [];\n                ws[R + or_R][C + or_C] = o;\n            } else ws[encode_cell({\n                c: C + or_C,\n                r: R + or_R\n            })] = o;\n            if (range.e.c < C + or_C) range.e.c = C + or_C;\n            C += CS;\n        }\n        ++R;\n    }\n    if (merges.length) ws[\"!merges\"] = (ws[\"!merges\"] || []).concat(merges);\n    range.e.r = Math.max(range.e.r, R - 1 + or_R);\n    ws[\"!ref\"] = encode_range(range);\n    if (R >= sheetRows) ws[\"!fullref\"] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range)); // We can count the real number of rows to parse but we don't to improve the performance\n    return ws;\n}\nfunction parse_dom_table(table /*:HTMLElement*/ , _opts /*:?any*/ ) /*:Worksheet*/ {\n    var opts = _opts || {};\n    var ws /*:Worksheet*/  = opts.dense ? [] : {} /*:any*/ ;\n    return sheet_add_dom(ws, table, _opts);\n}\nfunction table_to_book(table /*:HTMLElement*/ , opts /*:?any*/ ) /*:Workbook*/ {\n    return sheet_to_workbook(parse_dom_table(table, opts), opts);\n}\nfunction is_dom_element_hidden(element /*:HTMLElement*/ ) /*:boolean*/ {\n    var display /*:string*/  = \"\";\n    var get_computed_style /*:?function*/  = get_get_computed_style_function(element);\n    if (get_computed_style) display = get_computed_style(element).getPropertyValue(\"display\");\n    if (!display) display = element.style && element.style.display;\n    return display === \"none\";\n}\n/* global getComputedStyle */ function get_get_computed_style_function(element /*:HTMLElement*/ ) /*:?function*/ {\n    // The proper getComputedStyle implementation is the one defined in the element window\n    if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === \"function\") return element.ownerDocument.defaultView.getComputedStyle;\n    // If it is not available, try to get one from the global namespace\n    if (typeof getComputedStyle === \"function\") return getComputedStyle;\n    return null;\n}\n/* OpenDocument */ function parse_text_p(text /*:string*/  /*::, tag*/ ) /*:Array<any>*/ {\n    /* 6.1.2 White Space Characters */ var fixed = text.replace(/[\\t\\r\\n]/g, \" \").trim().replace(/ +/g, \" \").replace(/<text:s\\/>/g, \" \").replace(/<text:s text:c=\"(\\d+)\"\\/>/g, function($$, $1) {\n        return Array(parseInt($1, 10) + 1).join(\" \");\n    }).replace(/<text:tab[^>]*\\/>/g, \"\t\").replace(/<text:line-break\\/>/g, \"\\n\");\n    var v = unescapexml(fixed.replace(/<[^>]*>/g, \"\"));\n    return [\n        v\n    ];\n}\nvar number_formats_ods = {\n    /* ods name: [short ssf fmt, long ssf fmt] */ day: [\n        \"d\",\n        \"dd\"\n    ],\n    month: [\n        \"m\",\n        \"mm\"\n    ],\n    year: [\n        \"y\",\n        \"yy\"\n    ],\n    hours: [\n        \"h\",\n        \"hh\"\n    ],\n    minutes: [\n        \"m\",\n        \"mm\"\n    ],\n    seconds: [\n        \"s\",\n        \"ss\"\n    ],\n    \"am-pm\": [\n        \"A/P\",\n        \"AM/PM\"\n    ],\n    \"day-of-week\": [\n        \"ddd\",\n        \"dddd\"\n    ],\n    era: [\n        \"e\",\n        \"ee\"\n    ],\n    /* there is no native representation of LO \"Q\" format */ quarter: [\n        \"\\\\Qm\",\n        'm\\\\\"th quarter\"'\n    ]\n};\nfunction parse_content_xml(d /*:string*/ , _opts) /*:Workbook*/ {\n    var opts = _opts || {};\n    if (DENSE != null && opts.dense == null) opts.dense = DENSE;\n    var str = xlml_normalize(d);\n    var state /*:Array<any>*/  = [], tmp;\n    var tag /*:: = {}*/ ;\n    var NFtag = {\n        name: \"\"\n    }, NF = \"\", pidx = 0;\n    var sheetag /*:: = {name:\"\", '名称':\"\"}*/ ;\n    var rowtag /*:: = {'行号':\"\"}*/ ;\n    var Sheets = {}, SheetNames /*:Array<string>*/  = [];\n    var ws = opts.dense ? [] : {} /*:any*/ ;\n    var Rn, q /*:: :any = ({t:\"\", v:null, z:null, w:\"\",c:[],}:any)*/ ;\n    var ctag = {\n        value: \"\"\n    } /*:any*/ ;\n    var textp = \"\", textpidx = 0, textptag /*:: = {}*/ ;\n    var textR = [];\n    var R = -1, C = -1, range = {\n        s: {\n            r: 1000000,\n            c: 10000000\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    var row_ol = 0;\n    var number_format_map = {};\n    var merges /*:Array<Range>*/  = [], mrange = {}, mR = 0, mC = 0;\n    var rowinfo /*:Array<RowInfo>*/  = [], rowpeat = 1, colpeat = 1;\n    var arrayf /*:Array<[Range, string]>*/  = [];\n    var WB = {\n        Names: []\n    };\n    var atag = {} /*:any*/ ;\n    var _Ref /*:[string, string]*/  = [\n        \"\",\n        \"\"\n    ];\n    var comments /*:Array<Comment>*/  = [], comment /*:Comment*/  = {} /*:any*/ ;\n    var creator = \"\", creatoridx = 0;\n    var isstub = false, intable = false;\n    var i = 0;\n    xlmlregex.lastIndex = 0;\n    str = str.replace(/<!--([\\s\\S]*?)-->/mg, \"\").replace(/<!DOCTYPE[^\\[]*\\[[^\\]]*\\]>/gm, \"\");\n    while(Rn = xlmlregex.exec(str))switch(Rn[3] = Rn[3].replace(/_.*$/, \"\")){\n        case \"table\":\n        case \"工作表\":\n            if (Rn[1] === \"/\") {\n                if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws[\"!ref\"] = encode_range(range);\n                else ws[\"!ref\"] = \"A1:A1\";\n                if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {\n                    ws[\"!fullref\"] = ws[\"!ref\"];\n                    range.e.r = opts.sheetRows - 1;\n                    ws[\"!ref\"] = encode_range(range);\n                }\n                if (merges.length) ws[\"!merges\"] = merges;\n                if (rowinfo.length) ws[\"!rows\"] = rowinfo;\n                sheetag.name = sheetag[\"名称\"] || sheetag.name;\n                if (typeof JSON !== \"undefined\") JSON.stringify(sheetag);\n                SheetNames.push(sheetag.name);\n                Sheets[sheetag.name] = ws;\n                intable = false;\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") {\n                sheetag = parsexmltag(Rn[0], false);\n                R = C = -1;\n                range.s.r = range.s.c = 10000000;\n                range.e.r = range.e.c = 0;\n                ws = opts.dense ? [] : {} /*:any*/ ;\n                merges = [];\n                rowinfo = [];\n                intable = true;\n            }\n            break;\n        case \"table-row-group\":\n            if (Rn[1] === \"/\") --row_ol;\n            else ++row_ol;\n            break;\n        case \"table-row\":\n        case \"行\":\n            if (Rn[1] === \"/\") {\n                R += rowpeat;\n                rowpeat = 1;\n                break;\n            }\n            rowtag = parsexmltag(Rn[0], false);\n            if (rowtag[\"行号\"]) R = rowtag[\"行号\"] - 1;\n            else if (R == -1) R = 0;\n            rowpeat = +rowtag[\"number-rows-repeated\"] || 1;\n            /* TODO: remove magic */ if (rowpeat < 10) {\n                for(i = 0; i < rowpeat; ++i)if (row_ol > 0) rowinfo[R + i] = {\n                    level: row_ol\n                };\n            }\n            C = -1;\n            break;\n        case \"covered-table-cell\":\n            if (Rn[1] !== \"/\") ++C;\n            if (opts.sheetStubs) {\n                if (opts.dense) {\n                    if (!ws[R]) ws[R] = [];\n                    ws[R][C] = {\n                        t: \"z\"\n                    };\n                } else ws[encode_cell({\n                    r: R,\n                    c: C\n                })] = {\n                    t: \"z\"\n                };\n            }\n            textp = \"\";\n            textR = [];\n            break; /* stub */ \n        case \"table-cell\":\n        case \"数据\":\n            if (Rn[0].charAt(Rn[0].length - 2) === \"/\") {\n                ++C;\n                ctag = parsexmltag(Rn[0], false);\n                colpeat = parseInt(ctag[\"number-columns-repeated\"] || \"1\", 10);\n                q = {\n                    t: \"z\",\n                    v: null\n                } /*:any*/ ;\n                if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));\n                if ((ctag[\"数据类型\"] || ctag[\"value-type\"]) == \"string\") {\n                    q.t = \"s\";\n                    q.v = unescapexml(ctag[\"string-value\"] || \"\");\n                    if (opts.dense) {\n                        if (!ws[R]) ws[R] = [];\n                        ws[R][C] = q;\n                    } else {\n                        ws[encode_cell({\n                            r: R,\n                            c: C\n                        })] = q;\n                    }\n                }\n                C += colpeat - 1;\n            } else if (Rn[1] !== \"/\") {\n                ++C;\n                textp = \"\";\n                textpidx = 0;\n                textR = [];\n                colpeat = 1;\n                var rptR = rowpeat ? R + rowpeat - 1 : R;\n                if (C > range.e.c) range.e.c = C;\n                if (C < range.s.c) range.s.c = C;\n                if (R < range.s.r) range.s.r = R;\n                if (rptR > range.e.r) range.e.r = rptR;\n                ctag = parsexmltag(Rn[0], false);\n                comments = [];\n                comment = {} /*:any*/ ;\n                q = {\n                    t: ctag[\"数据类型\"] || ctag[\"value-type\"],\n                    v: null\n                } /*:any*/ ;\n                if (opts.cellFormula) {\n                    if (ctag.formula) ctag.formula = unescapexml(ctag.formula);\n                    if (ctag[\"number-matrix-columns-spanned\"] && ctag[\"number-matrix-rows-spanned\"]) {\n                        mR = parseInt(ctag[\"number-matrix-rows-spanned\"], 10) || 0;\n                        mC = parseInt(ctag[\"number-matrix-columns-spanned\"], 10) || 0;\n                        mrange = {\n                            s: {\n                                r: R,\n                                c: C\n                            },\n                            e: {\n                                r: R + mR - 1,\n                                c: C + mC - 1\n                            }\n                        };\n                        q.F = encode_range(mrange);\n                        arrayf.push([\n                            mrange,\n                            q.F\n                        ]);\n                    }\n                    if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);\n                    else for(i = 0; i < arrayf.length; ++i)if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) {\n                        if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1];\n                    }\n                }\n                if (ctag[\"number-columns-spanned\"] || ctag[\"number-rows-spanned\"]) {\n                    mR = parseInt(ctag[\"number-rows-spanned\"], 10) || 0;\n                    mC = parseInt(ctag[\"number-columns-spanned\"], 10) || 0;\n                    mrange = {\n                        s: {\n                            r: R,\n                            c: C\n                        },\n                        e: {\n                            r: R + mR - 1,\n                            c: C + mC - 1\n                        }\n                    };\n                    merges.push(mrange);\n                }\n                /* 19.675.2 table:number-columns-repeated */ if (ctag[\"number-columns-repeated\"]) colpeat = parseInt(ctag[\"number-columns-repeated\"], 10);\n                /* 19.385 office:value-type */ switch(q.t){\n                    case \"boolean\":\n                        q.t = \"b\";\n                        q.v = parsexmlbool(ctag[\"boolean-value\"]);\n                        break;\n                    case \"float\":\n                        q.t = \"n\";\n                        q.v = parseFloat(ctag.value);\n                        break;\n                    case \"percentage\":\n                        q.t = \"n\";\n                        q.v = parseFloat(ctag.value);\n                        break;\n                    case \"currency\":\n                        q.t = \"n\";\n                        q.v = parseFloat(ctag.value);\n                        break;\n                    case \"date\":\n                        q.t = \"d\";\n                        q.v = parseDate(ctag[\"date-value\"]);\n                        if (!opts.cellDates) {\n                            q.t = \"n\";\n                            q.v = datenum(q.v);\n                        }\n                        q.z = \"m/d/yy\";\n                        break;\n                    case \"time\":\n                        q.t = \"n\";\n                        q.v = parse_isodur(ctag[\"time-value\"]) / 86400;\n                        if (opts.cellDates) {\n                            q.t = \"d\";\n                            q.v = numdate(q.v);\n                        }\n                        q.z = \"HH:MM:SS\";\n                        break;\n                    case \"number\":\n                        q.t = \"n\";\n                        q.v = parseFloat(ctag[\"数据数值\"]);\n                        break;\n                    default:\n                        if (q.t === \"string\" || q.t === \"text\" || !q.t) {\n                            q.t = \"s\";\n                            if (ctag[\"string-value\"] != null) {\n                                textp = unescapexml(ctag[\"string-value\"]);\n                                textR = [];\n                            }\n                        } else throw new Error(\"Unsupported value type \" + q.t);\n                }\n            } else {\n                isstub = false;\n                if (q.t === \"s\") {\n                    q.v = textp || \"\";\n                    if (textR.length) q.R = textR;\n                    isstub = textpidx == 0;\n                }\n                if (atag.Target) q.l = atag;\n                if (comments.length > 0) {\n                    q.c = comments;\n                    comments = [];\n                }\n                if (textp && opts.cellText !== false) q.w = textp;\n                if (isstub) {\n                    q.t = \"z\";\n                    delete q.v;\n                }\n                if (!isstub || opts.sheetStubs) {\n                    if (!(opts.sheetRows && opts.sheetRows <= R)) {\n                        for(var rpt = 0; rpt < rowpeat; ++rpt){\n                            colpeat = parseInt(ctag[\"number-columns-repeated\"] || \"1\", 10);\n                            if (opts.dense) {\n                                if (!ws[R + rpt]) ws[R + rpt] = [];\n                                ws[R + rpt][C] = rpt == 0 ? q : dup(q);\n                                while(--colpeat > 0)ws[R + rpt][C + colpeat] = dup(q);\n                            } else {\n                                ws[encode_cell({\n                                    r: R + rpt,\n                                    c: C\n                                })] = q;\n                                while(--colpeat > 0)ws[encode_cell({\n                                    r: R + rpt,\n                                    c: C + colpeat\n                                })] = dup(q);\n                            }\n                            if (range.e.c <= C) range.e.c = C;\n                        }\n                    }\n                }\n                colpeat = parseInt(ctag[\"number-columns-repeated\"] || \"1\", 10);\n                C += colpeat - 1;\n                colpeat = 0;\n                q = {};\n                textp = \"\";\n                textR = [];\n            }\n            atag = {} /*:any*/ ;\n            break; // 9.1.4 <table:table-cell>\n        /* pure state */ case \"document\":\n        case \"document-content\":\n        case \"电子表格文档\":\n        case \"spreadsheet\":\n        case \"主体\":\n        case \"scripts\":\n        case \"styles\":\n        case \"font-face-decls\":\n        case \"master-styles\":\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") state.push([\n                Rn[3],\n                true\n            ]);\n            break;\n        case \"annotation\":\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n                comment.t = textp;\n                if (textR.length) /*::(*/ comment /*:: :any)*/ .R = textR;\n                comment.a = creator;\n                comments.push(comment);\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") {\n                state.push([\n                    Rn[3],\n                    false\n                ]);\n            }\n            creator = \"\";\n            creatoridx = 0;\n            textp = \"\";\n            textpidx = 0;\n            textR = [];\n            break;\n        case \"creator\":\n            if (Rn[1] === \"/\") {\n                creator = str.slice(creatoridx, Rn.index);\n            } else creatoridx = Rn.index + Rn[0].length;\n            break;\n        /* ignore state */ case \"meta\":\n        case \"元数据\":\n        case \"settings\":\n        case \"config-item-set\":\n        case \"config-item-map-indexed\":\n        case \"config-item-map-entry\":\n        case \"config-item-map-named\":\n        case \"shapes\":\n        case \"frame\":\n        case \"text-box\":\n        case \"image\":\n        case \"data-pilot-tables\":\n        case \"list-style\":\n        case \"form\":\n        case \"dde-links\":\n        case \"event-listeners\":\n        case \"chart\":\n            if (Rn[1] === \"/\") {\n                if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") state.push([\n                Rn[3],\n                false\n            ]);\n            textp = \"\";\n            textpidx = 0;\n            textR = [];\n            break;\n        case \"scientific-number\":\n            break;\n        case \"currency-symbol\":\n            break;\n        case \"currency-style\":\n            break;\n        case \"number-style\":\n        case \"percentage-style\":\n        case \"date-style\":\n        case \"time-style\":\n            if (Rn[1] === \"/\") {\n                number_format_map[NFtag.name] = NF;\n                if ((tmp = state.pop())[0] !== Rn[3]) throw \"Bad state: \" + tmp;\n            } else if (Rn[0].charAt(Rn[0].length - 2) !== \"/\") {\n                NF = \"\";\n                NFtag = parsexmltag(Rn[0], false);\n                state.push([\n                    Rn[3],\n                    true\n                ]);\n            }\n            break;\n        case \"script\":\n            break; // 3.13 <office:script>\n        case \"libraries\":\n            break; // TODO: <ooo:libraries>\n        case \"automatic-styles\":\n            break; // 3.15.3 <office:automatic-styles>\n        case \"default-style\":\n        case \"page-layout\":\n            break; // TODO: <style:page-layout>\n        case \"style\":\n            break;\n        case \"map\":\n            break; // 16.3 <style:map>\n        case \"font-face\":\n            break; // 16.21 <style:font-face>\n        case \"paragraph-properties\":\n            break; // 17.6 <style:paragraph-properties>\n        case \"table-properties\":\n            break; // 17.15 <style:table-properties>\n        case \"table-column-properties\":\n            break; // 17.16 <style:table-column-properties>\n        case \"table-row-properties\":\n            break; // 17.17 <style:table-row-properties>\n        case \"table-cell-properties\":\n            break; // 17.18 <style:table-cell-properties>\n        case \"number\":\n            switch(state[state.length - 1][0]){\n                case \"time-style\":\n                case \"date-style\":\n                    tag = parsexmltag(Rn[0], false);\n                    NF += number_formats_ods[Rn[3]][tag.style === \"long\" ? 1 : 0];\n                    break;\n            }\n            break;\n        case \"fraction\":\n            break; // TODO 16.27.6 <number:fraction>\n        case \"day\":\n        case \"month\":\n        case \"year\":\n        case \"era\":\n        case \"day-of-week\":\n        case \"week-of-year\":\n        case \"quarter\":\n        case \"hours\":\n        case \"minutes\":\n        case \"seconds\":\n        case \"am-pm\":\n            switch(state[state.length - 1][0]){\n                case \"time-style\":\n                case \"date-style\":\n                    tag = parsexmltag(Rn[0], false);\n                    NF += number_formats_ods[Rn[3]][tag.style === \"long\" ? 1 : 0];\n                    break;\n            }\n            break;\n        case \"boolean-style\":\n            break; // 16.27.23 <number:boolean-style>\n        case \"boolean\":\n            break; // 16.27.24 <number:boolean>\n        case \"text-style\":\n            break; // 16.27.25 <number:text-style>\n        case \"text\":\n            if (Rn[0].slice(-2) === \"/>\") break;\n            else if (Rn[1] === \"/\") switch(state[state.length - 1][0]){\n                case \"number-style\":\n                case \"date-style\":\n                case \"time-style\":\n                    NF += str.slice(pidx, Rn.index);\n                    break;\n            }\n            else pidx = Rn.index + Rn[0].length;\n            break;\n        case \"named-range\":\n            tag = parsexmltag(Rn[0], false);\n            _Ref = ods_to_csf_3D(tag[\"cell-range-address\"]);\n            var nrange = {\n                Name: tag.name,\n                Ref: _Ref[0] + \"!\" + _Ref[1]\n            } /*:any*/ ;\n            if (intable) nrange.Sheet = SheetNames.length;\n            WB.Names.push(nrange);\n            break;\n        case \"text-content\":\n            break; // 16.27.27 <number:text-content>\n        case \"text-properties\":\n            break; // 16.27.27 <style:text-properties>\n        case \"embedded-text\":\n            break; // 16.27.4 <number:embedded-text>\n        case \"body\":\n        case \"电子表格\":\n            break; // 3.3 16.9.6 19.726.3\n        case \"forms\":\n            break; // 12.25.2 13.2\n        case \"table-column\":\n            break; // 9.1.6 <table:table-column>\n        case \"table-header-rows\":\n            break; // 9.1.7 <table:table-header-rows>\n        case \"table-rows\":\n            break; // 9.1.12 <table:table-rows>\n        /* TODO: outline levels */ case \"table-column-group\":\n            break; // 9.1.10 <table:table-column-group>\n        case \"table-header-columns\":\n            break; // 9.1.11 <table:table-header-columns>\n        case \"table-columns\":\n            break; // 9.1.12 <table:table-columns>\n        case \"null-date\":\n            break; // 9.4.2 <table:null-date> TODO: date1904\n        case \"graphic-properties\":\n            break; // 17.21 <style:graphic-properties>\n        case \"calculation-settings\":\n            break; // 9.4.1 <table:calculation-settings>\n        case \"named-expressions\":\n            break; // 9.4.11 <table:named-expressions>\n        case \"label-range\":\n            break; // 9.4.9 <table:label-range>\n        case \"label-ranges\":\n            break; // 9.4.10 <table:label-ranges>\n        case \"named-expression\":\n            break; // 9.4.13 <table:named-expression>\n        case \"sort\":\n            break; // 9.4.19 <table:sort>\n        case \"sort-by\":\n            break; // 9.4.20 <table:sort-by>\n        case \"sort-groups\":\n            break; // 9.4.22 <table:sort-groups>\n        case \"tab\":\n            break; // 6.1.4 <text:tab>\n        case \"line-break\":\n            break; // 6.1.5 <text:line-break>\n        case \"span\":\n            break; // 6.1.7 <text:span>\n        case \"p\":\n        case \"文本串\":\n            if ([\n                \"master-styles\"\n            ].indexOf(state[state.length - 1][0]) > -1) break;\n            if (Rn[1] === \"/\" && (!ctag || !ctag[\"string-value\"])) {\n                var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);\n                textp = (textp.length > 0 ? textp + \"\\n\" : \"\") + ptp[0];\n            } else {\n                textptag = parsexmltag(Rn[0], false);\n                textpidx = Rn.index + Rn[0].length;\n            }\n            break; // <text:p>\n        case \"s\":\n            break; // <text:s>\n        case \"database-range\":\n            if (Rn[1] === \"/\") break;\n            try {\n                _Ref = ods_to_csf_3D(parsexmltag(Rn[0])[\"target-range-address\"]);\n                Sheets[_Ref[0]][\"!autofilter\"] = {\n                    ref: _Ref[1]\n                };\n            } catch (e) {}\n            break;\n        case \"date\":\n            break; // <*:date>\n        case \"object\":\n            break; // 10.4.6.2 <draw:object>\n        case \"title\":\n        case \"标题\":\n            break; // <*:title> OR <uof:标题>\n        case \"desc\":\n            break; // <*:desc>\n        case \"binary-data\":\n            break; // 10.4.5 TODO: b64 blob\n        /* 9.2 Advanced Tables */ case \"table-source\":\n            break; // 9.2.6\n        case \"scenario\":\n            break; // 9.2.6\n        case \"iteration\":\n            break; // 9.4.3 <table:iteration>\n        case \"content-validations\":\n            break; // 9.4.4 <table:\n        case \"content-validation\":\n            break; // 9.4.5 <table:\n        case \"help-message\":\n            break; // 9.4.6 <table:\n        case \"error-message\":\n            break; // 9.4.7 <table:\n        case \"database-ranges\":\n            break; // 9.4.14 <table:database-ranges>\n        case \"filter\":\n            break; // 9.5.2 <table:filter>\n        case \"filter-and\":\n            break; // 9.5.3 <table:filter-and>\n        case \"filter-or\":\n            break; // 9.5.4 <table:filter-or>\n        case \"filter-condition\":\n            break; // 9.5.5 <table:filter-condition>\n        case \"list-level-style-bullet\":\n            break; // 16.31 <text:\n        case \"list-level-style-number\":\n            break; // 16.32 <text:\n        case \"list-level-properties\":\n            break; // 17.19 <style:\n        /* 7.3 Document Fields */ case \"sender-firstname\":\n        case \"sender-lastname\":\n        case \"sender-initials\":\n        case \"sender-title\":\n        case \"sender-position\":\n        case \"sender-email\":\n        case \"sender-phone-private\":\n        case \"sender-fax\":\n        case \"sender-company\":\n        case \"sender-phone-work\":\n        case \"sender-street\":\n        case \"sender-city\":\n        case \"sender-postal-code\":\n        case \"sender-country\":\n        case \"sender-state-or-province\":\n        case \"author-name\":\n        case \"author-initials\":\n        case \"chapter\":\n        case \"file-name\":\n        case \"template-name\":\n        case \"sheet-name\":\n            break;\n        case \"event-listener\":\n            break;\n        /* TODO: FODS Properties */ case \"initial-creator\":\n        case \"creation-date\":\n        case \"print-date\":\n        case \"generator\":\n        case \"document-statistic\":\n        case \"user-defined\":\n        case \"editing-duration\":\n        case \"editing-cycles\":\n            break;\n        /* TODO: FODS Config */ case \"config-item\":\n            break;\n        /* TODO: style tokens */ case \"page-number\":\n            break; // TODO <text:page-number>\n        case \"page-count\":\n            break; // TODO <text:page-count>\n        case \"time\":\n            break; // TODO <text:time>\n        /* 9.3 Advanced Table Cells */ case \"cell-range-source\":\n            break; // 9.3.1 <table:\n        case \"detective\":\n            break; // 9.3.2 <table:\n        case \"operation\":\n            break; // 9.3.3 <table:\n        case \"highlighted-range\":\n            break; // 9.3.4 <table:\n        /* 9.6 Data Pilot Tables <table: */ case \"data-pilot-table\":\n        case \"source-cell-range\":\n        case \"source-service\":\n        case \"data-pilot-field\":\n        case \"data-pilot-level\":\n        case \"data-pilot-subtotals\":\n        case \"data-pilot-subtotal\":\n        case \"data-pilot-members\":\n        case \"data-pilot-member\":\n        case \"data-pilot-display-info\":\n        case \"data-pilot-sort-info\":\n        case \"data-pilot-layout-info\":\n        case \"data-pilot-field-reference\":\n        case \"data-pilot-groups\":\n        case \"data-pilot-group\":\n        case \"data-pilot-group-member\":\n            break;\n        /* 10.3 Drawing Shapes */ case \"rect\":\n            break;\n        /* 14.6 DDE Connections */ case \"dde-connection-decls\":\n        case \"dde-connection-decl\":\n        case \"dde-link\":\n        case \"dde-source\":\n            break;\n        case \"properties\":\n            break; // 13.7 <form:properties>\n        case \"property\":\n            break; // 13.8 <form:property>\n        case \"a\":\n            if (Rn[1] !== \"/\") {\n                atag = parsexmltag(Rn[0], false);\n                if (!atag.href) break;\n                atag.Target = unescapexml(atag.href);\n                delete atag.href;\n                if (atag.Target.charAt(0) == \"#\" && atag.Target.indexOf(\".\") > -1) {\n                    _Ref = ods_to_csf_3D(atag.Target.slice(1));\n                    atag.Target = \"#\" + _Ref[0] + \"!\" + _Ref[1];\n                } else if (atag.Target.match(/^\\.\\.[\\\\\\/]/)) atag.Target = atag.Target.slice(3);\n            }\n            break;\n        /* non-standard */ case \"table-protection\":\n            break;\n        case \"data-pilot-grand-total\":\n            break; // <table:\n        case \"office-document-common-attrs\":\n            break; // bare\n        default:\n            switch(Rn[2]){\n                case \"dc:\":\n                case \"calcext:\":\n                case \"loext:\":\n                case \"ooo:\":\n                case \"chartooo:\":\n                case \"draw:\":\n                case \"style:\":\n                case \"chart:\":\n                case \"form:\":\n                case \"uof:\":\n                case \"表:\":\n                case \"字:\":\n                    break;\n                default:\n                    if (opts.WTF) throw new Error(Rn);\n            }\n    }\n    var out /*:Workbook*/  = {\n        Sheets: Sheets,\n        SheetNames: SheetNames,\n        Workbook: WB\n    } /*:any*/ ;\n    if (opts.bookSheets) delete /*::(*/ out /*:: :any)*/ .Sheets;\n    return out;\n}\nfunction parse_ods(zip /*:ZIPFile*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    opts = opts || {} /*:any*/ ;\n    if (safegetzipfile(zip, \"META-INF/manifest.xml\")) parse_manifest(getzipdata(zip, \"META-INF/manifest.xml\"), opts);\n    var content = getzipstr(zip, \"content.xml\");\n    if (!content) throw new Error(\"Missing content.xml in ODS / UOF file\");\n    var wb = parse_content_xml(utf8read(content), opts);\n    if (safegetzipfile(zip, \"meta.xml\")) wb.Props = parse_core_props(getzipdata(zip, \"meta.xml\"));\n    return wb;\n}\nfunction parse_fods(data /*:string*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    return parse_content_xml(data, opts);\n}\n/* OpenDocument */ var write_styles_ods /*:{(wb:any, opts:any):string}*/  = /* @__PURE__ */ function() {\n    var master_styles = [\n        \"<office:master-styles>\",\n        '<style:master-page style:name=\"mp1\" style:page-layout-name=\"mp1\">',\n        \"<style:header/>\",\n        '<style:header-left style:display=\"false\"/>',\n        \"<style:footer/>\",\n        '<style:footer-left style:display=\"false\"/>',\n        \"</style:master-page>\",\n        \"</office:master-styles>\"\n    ].join(\"\");\n    var payload = \"<office:document-styles \" + wxt_helper({\n        \"xmlns:office\": \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\",\n        \"xmlns:table\": \"urn:oasis:names:tc:opendocument:xmlns:table:1.0\",\n        \"xmlns:style\": \"urn:oasis:names:tc:opendocument:xmlns:style:1.0\",\n        \"xmlns:text\": \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n        \"xmlns:draw\": \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n        \"xmlns:fo\": \"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\",\n        \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n        \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\",\n        \"xmlns:number\": \"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\",\n        \"xmlns:svg\": \"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\",\n        \"xmlns:of\": \"urn:oasis:names:tc:opendocument:xmlns:of:1.2\",\n        \"office:version\": \"1.2\"\n    }) + \">\" + master_styles + \"</office:document-styles>\";\n    return function wso() {\n        return XML_HEADER + payload;\n    };\n}();\nvar write_content_ods /*:{(wb:any, opts:any):string}*/  = /* @__PURE__ */ function() {\n    /* 6.1.2 White Space Characters */ var write_text_p = function(text /*:string*/ ) /*:string*/ {\n        return escapexml(text).replace(/  +/g, function($$) {\n            return '<text:s text:c=\"' + $$.length + '\"/>';\n        }).replace(/\\t/g, \"<text:tab/>\").replace(/\\n/g, \"</text:p><text:p>\").replace(/^ /, \"<text:s/>\").replace(/ $/, \"<text:s/>\");\n    };\n    var null_cell_xml = \"          <table:table-cell />\\n\";\n    var covered_cell_xml = \"          <table:covered-table-cell/>\\n\";\n    var write_ws = function(ws, wb /*:Workbook*/ , i /*:number*/  /*::, opts*/ ) /*:string*/ {\n        /* Section 9 Tables */ var o /*:Array<string>*/  = [];\n        o.push('      <table:table table:name=\"' + escapexml(wb.SheetNames[i]) + '\" table:style-name=\"ta1\">\\n');\n        var R = 0, C = 0, range = decode_range(ws[\"!ref\"] || \"A1\");\n        var marr /*:Array<Range>*/  = ws[\"!merges\"] || [], mi = 0;\n        var dense = Array.isArray(ws);\n        if (ws[\"!cols\"]) {\n            for(C = 0; C <= range.e.c; ++C)o.push(\"        <table:table-column\" + (ws[\"!cols\"][C] ? ' table:style-name=\"co' + ws[\"!cols\"][C].ods + '\"' : \"\") + \"></table:table-column>\\n\");\n        }\n        var H = \"\", ROWS = ws[\"!rows\"] || [];\n        for(R = 0; R < range.s.r; ++R){\n            H = ROWS[R] ? ' table:style-name=\"ro' + ROWS[R].ods + '\"' : \"\";\n            o.push(\"        <table:table-row\" + H + \"></table:table-row>\\n\");\n        }\n        for(; R <= range.e.r; ++R){\n            H = ROWS[R] ? ' table:style-name=\"ro' + ROWS[R].ods + '\"' : \"\";\n            o.push(\"        <table:table-row\" + H + \">\\n\");\n            for(C = 0; C < range.s.c; ++C)o.push(null_cell_xml);\n            for(; C <= range.e.c; ++C){\n                var skip = false, ct = {}, textp = \"\";\n                for(mi = 0; mi != marr.length; ++mi){\n                    if (marr[mi].s.c > C) continue;\n                    if (marr[mi].s.r > R) continue;\n                    if (marr[mi].e.c < C) continue;\n                    if (marr[mi].e.r < R) continue;\n                    if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;\n                    ct[\"table:number-columns-spanned\"] = marr[mi].e.c - marr[mi].s.c + 1;\n                    ct[\"table:number-rows-spanned\"] = marr[mi].e.r - marr[mi].s.r + 1;\n                    break;\n                }\n                if (skip) {\n                    o.push(covered_cell_xml);\n                    continue;\n                }\n                var ref = encode_cell({\n                    r: R,\n                    c: C\n                }), cell = dense ? (ws[R] || [])[C] : ws[ref];\n                if (cell && cell.f) {\n                    ct[\"table:formula\"] = escapexml(csf_to_ods_formula(cell.f));\n                    if (cell.F) {\n                        if (cell.F.slice(0, ref.length) == ref) {\n                            var _Fref = decode_range(cell.F);\n                            ct[\"table:number-matrix-columns-spanned\"] = _Fref.e.c - _Fref.s.c + 1;\n                            ct[\"table:number-matrix-rows-spanned\"] = _Fref.e.r - _Fref.s.r + 1;\n                        }\n                    }\n                }\n                if (!cell) {\n                    o.push(null_cell_xml);\n                    continue;\n                }\n                switch(cell.t){\n                    case \"b\":\n                        textp = cell.v ? \"TRUE\" : \"FALSE\";\n                        ct[\"office:value-type\"] = \"boolean\";\n                        ct[\"office:boolean-value\"] = cell.v ? \"true\" : \"false\";\n                        break;\n                    case \"n\":\n                        textp = cell.w || String(cell.v || 0);\n                        ct[\"office:value-type\"] = \"float\";\n                        ct[\"office:value\"] = cell.v || 0;\n                        break;\n                    case \"s\":\n                    case \"str\":\n                        textp = cell.v == null ? \"\" : cell.v;\n                        ct[\"office:value-type\"] = \"string\";\n                        break;\n                    case \"d\":\n                        textp = cell.w || parseDate(cell.v).toISOString();\n                        ct[\"office:value-type\"] = \"date\";\n                        ct[\"office:date-value\"] = parseDate(cell.v).toISOString();\n                        ct[\"table:style-name\"] = \"ce1\";\n                        break;\n                    //case 'e':\n                    default:\n                        o.push(null_cell_xml);\n                        continue;\n                }\n                var text_p = write_text_p(textp);\n                if (cell.l && cell.l.Target) {\n                    var _tgt = cell.l.Target;\n                    _tgt = _tgt.charAt(0) == \"#\" ? \"#\" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;\n                    // TODO: choose correct parent path format based on link delimiters\n                    if (_tgt.charAt(0) != \"#\" && !_tgt.match(/^\\w+:/)) _tgt = \"../\" + _tgt;\n                    text_p = writextag(\"text:a\", text_p, {\n                        \"xlink:href\": _tgt.replace(/&/g, \"&amp;\")\n                    });\n                }\n                o.push(\"          \" + writextag(\"table:table-cell\", writextag(\"text:p\", text_p, {}), ct) + \"\\n\");\n            }\n            o.push(\"        </table:table-row>\\n\");\n        }\n        o.push(\"      </table:table>\\n\");\n        return o.join(\"\");\n    };\n    var write_automatic_styles_ods = function(o /*:Array<string>*/ , wb) {\n        o.push(\" <office:automatic-styles>\\n\");\n        o.push('  <number:date-style style:name=\"N37\" number:automatic-order=\"true\">\\n');\n        o.push('   <number:month number:style=\"long\"/>\\n');\n        o.push(\"   <number:text>/</number:text>\\n\");\n        o.push('   <number:day number:style=\"long\"/>\\n');\n        o.push(\"   <number:text>/</number:text>\\n\");\n        o.push(\"   <number:year/>\\n\");\n        o.push(\"  </number:date-style>\\n\");\n        /* column styles */ var cidx = 0;\n        wb.SheetNames.map(function(n) {\n            return wb.Sheets[n];\n        }).forEach(function(ws) {\n            if (!ws) return;\n            if (ws[\"!cols\"]) {\n                for(var C = 0; C < ws[\"!cols\"].length; ++C)if (ws[\"!cols\"][C]) {\n                    var colobj = ws[\"!cols\"][C];\n                    if (colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;\n                    process_col(colobj);\n                    colobj.ods = cidx;\n                    var w = ws[\"!cols\"][C].wpx + \"px\";\n                    o.push('  <style:style style:name=\"co' + cidx + '\" style:family=\"table-column\">\\n');\n                    o.push('   <style:table-column-properties fo:break-before=\"auto\" style:column-width=\"' + w + '\"/>\\n');\n                    o.push(\"  </style:style>\\n\");\n                    ++cidx;\n                }\n            }\n        });\n        /* row styles */ var ridx = 0;\n        wb.SheetNames.map(function(n) {\n            return wb.Sheets[n];\n        }).forEach(function(ws) {\n            if (!ws) return;\n            if (ws[\"!rows\"]) {\n                for(var R = 0; R < ws[\"!rows\"].length; ++R)if (ws[\"!rows\"][R]) {\n                    ws[\"!rows\"][R].ods = ridx;\n                    var h = ws[\"!rows\"][R].hpx + \"px\";\n                    o.push('  <style:style style:name=\"ro' + ridx + '\" style:family=\"table-row\">\\n');\n                    o.push('   <style:table-row-properties fo:break-before=\"auto\" style:row-height=\"' + h + '\"/>\\n');\n                    o.push(\"  </style:style>\\n\");\n                    ++ridx;\n                }\n            }\n        });\n        /* table */ o.push('  <style:style style:name=\"ta1\" style:family=\"table\" style:master-page-name=\"mp1\">\\n');\n        o.push('   <style:table-properties table:display=\"true\" style:writing-mode=\"lr-tb\"/>\\n');\n        o.push(\"  </style:style>\\n\");\n        /* table cells, text */ o.push('  <style:style style:name=\"ce1\" style:family=\"table-cell\" style:parent-style-name=\"Default\" style:data-style-name=\"N37\"/>\\n');\n        /* page-layout */ o.push(\" </office:automatic-styles>\\n\");\n    };\n    return function wcx(wb, opts) {\n        var o = [\n            XML_HEADER\n        ];\n        /* 3.1.3.2 */ var attr = wxt_helper({\n            \"xmlns:office\": \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\",\n            \"xmlns:table\": \"urn:oasis:names:tc:opendocument:xmlns:table:1.0\",\n            \"xmlns:style\": \"urn:oasis:names:tc:opendocument:xmlns:style:1.0\",\n            \"xmlns:text\": \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n            \"xmlns:draw\": \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n            \"xmlns:fo\": \"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0\",\n            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n            \"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\",\n            \"xmlns:meta\": \"urn:oasis:names:tc:opendocument:xmlns:meta:1.0\",\n            \"xmlns:number\": \"urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0\",\n            \"xmlns:presentation\": \"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0\",\n            \"xmlns:svg\": \"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0\",\n            \"xmlns:chart\": \"urn:oasis:names:tc:opendocument:xmlns:chart:1.0\",\n            \"xmlns:dr3d\": \"urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0\",\n            \"xmlns:math\": \"http://www.w3.org/1998/Math/MathML\",\n            \"xmlns:form\": \"urn:oasis:names:tc:opendocument:xmlns:form:1.0\",\n            \"xmlns:script\": \"urn:oasis:names:tc:opendocument:xmlns:script:1.0\",\n            \"xmlns:ooo\": \"http://openoffice.org/2004/office\",\n            \"xmlns:ooow\": \"http://openoffice.org/2004/writer\",\n            \"xmlns:oooc\": \"http://openoffice.org/2004/calc\",\n            \"xmlns:dom\": \"http://www.w3.org/2001/xml-events\",\n            \"xmlns:xforms\": \"http://www.w3.org/2002/xforms\",\n            \"xmlns:xsd\": \"http://www.w3.org/2001/XMLSchema\",\n            \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n            \"xmlns:sheet\": \"urn:oasis:names:tc:opendocument:sh33tjs:1.0\",\n            \"xmlns:rpt\": \"http://openoffice.org/2005/report\",\n            \"xmlns:of\": \"urn:oasis:names:tc:opendocument:xmlns:of:1.2\",\n            \"xmlns:xhtml\": \"http://www.w3.org/1999/xhtml\",\n            \"xmlns:grddl\": \"http://www.w3.org/2003/g/data-view#\",\n            \"xmlns:tableooo\": \"http://openoffice.org/2009/table\",\n            \"xmlns:drawooo\": \"http://openoffice.org/2010/draw\",\n            \"xmlns:calcext\": \"urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0\",\n            \"xmlns:loext\": \"urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0\",\n            \"xmlns:field\": \"urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0\",\n            \"xmlns:formx\": \"urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0\",\n            \"xmlns:css3t\": \"http://www.w3.org/TR/css3-text/\",\n            \"office:version\": \"1.2\"\n        });\n        var fods = wxt_helper({\n            \"xmlns:config\": \"urn:oasis:names:tc:opendocument:xmlns:config:1.0\",\n            \"office:mimetype\": \"application/vnd.oasis.opendocument.spreadsheet\"\n        });\n        if (opts.bookType == \"fods\") {\n            o.push(\"<office:document\" + attr + fods + \">\\n\");\n            o.push(write_meta_ods().replace(/office:document-meta/g, \"office:meta\"));\n        // TODO: settings (equiv of settings.xml for ODS)\n        } else o.push(\"<office:document-content\" + attr + \">\\n\");\n        // o.push('  <office:scripts/>\\n');\n        write_automatic_styles_ods(o, wb);\n        o.push(\"  <office:body>\\n\");\n        o.push(\"    <office:spreadsheet>\\n\");\n        for(var i = 0; i != wb.SheetNames.length; ++i)o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));\n        o.push(\"    </office:spreadsheet>\\n\");\n        o.push(\"  </office:body>\\n\");\n        if (opts.bookType == \"fods\") o.push(\"</office:document>\");\n        else o.push(\"</office:document-content>\");\n        return o.join(\"\");\n    };\n}();\nfunction write_ods(wb /*:any*/ , opts /*:any*/ ) {\n    if (opts.bookType == \"fods\") return write_content_ods(wb, opts);\n    var zip = zip_new();\n    var f = \"\";\n    var manifest /*:Array<Array<string> >*/  = [];\n    var rdf /*:Array<[string, string]>*/  = [];\n    /* Part 3 Section 3.3 MIME Media Type */ f = \"mimetype\";\n    zip_add_file(zip, f, \"application/vnd.oasis.opendocument.spreadsheet\");\n    /* Part 1 Section 2.2 Documents */ f = \"content.xml\";\n    zip_add_file(zip, f, write_content_ods(wb, opts));\n    manifest.push([\n        f,\n        \"text/xml\"\n    ]);\n    rdf.push([\n        f,\n        \"ContentFile\"\n    ]);\n    /* TODO: these are hard-coded styles to satiate excel */ f = \"styles.xml\";\n    zip_add_file(zip, f, write_styles_ods(wb, opts));\n    manifest.push([\n        f,\n        \"text/xml\"\n    ]);\n    rdf.push([\n        f,\n        \"StylesFile\"\n    ]);\n    /* TODO: this is hard-coded to satiate excel */ f = \"meta.xml\";\n    zip_add_file(zip, f, XML_HEADER + write_meta_ods());\n    manifest.push([\n        f,\n        \"text/xml\"\n    ]);\n    rdf.push([\n        f,\n        \"MetadataFile\"\n    ]);\n    /* Part 3 Section 6 Metadata Manifest File */ f = \"manifest.rdf\";\n    zip_add_file(zip, f, write_rdf(rdf /*, opts*/ ));\n    manifest.push([\n        f,\n        \"application/rdf+xml\"\n    ]);\n    /* Part 3 Section 4 Manifest File */ f = \"META-INF/manifest.xml\";\n    zip_add_file(zip, f, write_manifest(manifest /*, opts*/ ));\n    return zip;\n}\n/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */ function u8_to_dataview(array) {\n    return new DataView(array.buffer, array.byteOffset, array.byteLength);\n}\nfunction u8str(u8) {\n    return typeof TextDecoder != \"undefined\" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));\n}\nfunction stru8(str) {\n    return typeof TextEncoder != \"undefined\" ? new TextEncoder().encode(str) : s2a(utf8write(str));\n}\nfunction u8contains(body, search) {\n    outer: for(var L = 0; L <= body.length - search.length; ++L){\n        for(var j = 0; j < search.length; ++j)if (body[L + j] != search[j]) continue outer;\n        return true;\n    }\n    return false;\n}\nfunction u8concat(u8a) {\n    var len = u8a.reduce(function(acc, x) {\n        return acc + x.length;\n    }, 0);\n    var out = new Uint8Array(len);\n    var off = 0;\n    u8a.forEach(function(u8) {\n        out.set(u8, off);\n        off += u8.length;\n    });\n    return out;\n}\nfunction popcnt(x) {\n    x -= x >> 1 & 1431655765;\n    x = (x & 858993459) + (x >> 2 & 858993459);\n    return (x + (x >> 4) & 252645135) * 16843009 >>> 24;\n}\nfunction readDecimal128LE(buf, offset) {\n    var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;\n    var mantissa = buf[offset + 14] & 1;\n    for(var j = offset + 13; j >= offset; --j)mantissa = mantissa * 256 + buf[j];\n    return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);\n}\nfunction writeDecimal128LE(buf, offset, value) {\n    var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 20;\n    var mantissa = value / Math.pow(10, exp - 6176);\n    buf[offset + 15] |= exp >> 7;\n    buf[offset + 14] |= (exp & 127) << 1;\n    for(var i = 0; mantissa >= 1; ++i, mantissa /= 256)buf[offset + i] = mantissa & 255;\n    buf[offset + 15] |= value >= 0 ? 0 : 128;\n}\nfunction parse_varint49(buf, ptr) {\n    var l = ptr ? ptr[0] : 0;\n    var usz = buf[l] & 127;\n    varint: if (buf[l++] >= 128) {\n        usz |= (buf[l] & 127) << 7;\n        if (buf[l++] < 128) break varint;\n        usz |= (buf[l] & 127) << 14;\n        if (buf[l++] < 128) break varint;\n        usz |= (buf[l] & 127) << 21;\n        if (buf[l++] < 128) break varint;\n        usz += (buf[l] & 127) * Math.pow(2, 28);\n        ++l;\n        if (buf[l++] < 128) break varint;\n        usz += (buf[l] & 127) * Math.pow(2, 35);\n        ++l;\n        if (buf[l++] < 128) break varint;\n        usz += (buf[l] & 127) * Math.pow(2, 42);\n        ++l;\n        if (buf[l++] < 128) break varint;\n    }\n    if (ptr) ptr[0] = l;\n    return usz;\n}\nfunction write_varint49(v) {\n    var usz = new Uint8Array(7);\n    usz[0] = v & 127;\n    var L = 1;\n    sz: if (v > 127) {\n        usz[L - 1] |= 128;\n        usz[L] = v >> 7 & 127;\n        ++L;\n        if (v <= 16383) break sz;\n        usz[L - 1] |= 128;\n        usz[L] = v >> 14 & 127;\n        ++L;\n        if (v <= 2097151) break sz;\n        usz[L - 1] |= 128;\n        usz[L] = v >> 21 & 127;\n        ++L;\n        if (v <= 268435455) break sz;\n        usz[L - 1] |= 128;\n        usz[L] = v / 256 >>> 21 & 127;\n        ++L;\n        if (v <= 34359738367) break sz;\n        usz[L - 1] |= 128;\n        usz[L] = v / 65536 >>> 21 & 127;\n        ++L;\n        if (v <= 4398046511103) break sz;\n        usz[L - 1] |= 128;\n        usz[L] = v / 16777216 >>> 21 & 127;\n        ++L;\n    }\n    return usz.slice(0, L);\n}\nfunction varint_to_i32(buf) {\n    var l = 0, i32 = buf[l] & 127;\n    varint: if (buf[l++] >= 128) {\n        i32 |= (buf[l] & 127) << 7;\n        if (buf[l++] < 128) break varint;\n        i32 |= (buf[l] & 127) << 14;\n        if (buf[l++] < 128) break varint;\n        i32 |= (buf[l] & 127) << 21;\n        if (buf[l++] < 128) break varint;\n        i32 |= (buf[l] & 127) << 28;\n    }\n    return i32;\n}\nfunction parse_shallow(buf) {\n    var out = [], ptr = [\n        0\n    ];\n    while(ptr[0] < buf.length){\n        var off = ptr[0];\n        var num = parse_varint49(buf, ptr);\n        var type = num & 7;\n        num = Math.floor(num / 8);\n        var len = 0;\n        var res;\n        if (num == 0) break;\n        switch(type){\n            case 0:\n                {\n                    var l = ptr[0];\n                    while(buf[ptr[0]++] >= 128);\n                    res = buf.slice(l, ptr[0]);\n                }\n                break;\n            case 5:\n                len = 4;\n                res = buf.slice(ptr[0], ptr[0] + len);\n                ptr[0] += len;\n                break;\n            case 1:\n                len = 8;\n                res = buf.slice(ptr[0], ptr[0] + len);\n                ptr[0] += len;\n                break;\n            case 2:\n                len = parse_varint49(buf, ptr);\n                res = buf.slice(ptr[0], ptr[0] + len);\n                ptr[0] += len;\n                break;\n            case 3:\n            case 4:\n            default:\n                throw new Error(\"PB Type \".concat(type, \" for Field \").concat(num, \" at offset \").concat(off));\n        }\n        var v = {\n            data: res,\n            type: type\n        };\n        if (out[num] == null) out[num] = [\n            v\n        ];\n        else out[num].push(v);\n    }\n    return out;\n}\nfunction write_shallow(proto) {\n    var out = [];\n    proto.forEach(function(field, idx) {\n        field.forEach(function(item) {\n            if (!item.data) return;\n            out.push(write_varint49(idx * 8 + item.type));\n            if (item.type == 2) out.push(write_varint49(item.data.length));\n            out.push(item.data);\n        });\n    });\n    return u8concat(out);\n}\nfunction mappa(data, cb) {\n    return (data == null ? void 0 : data.map(function(d) {\n        return cb(d.data);\n    })) || [];\n}\nfunction parse_iwa_file(buf) {\n    var _a;\n    var out = [], ptr = [\n        0\n    ];\n    while(ptr[0] < buf.length){\n        var len = parse_varint49(buf, ptr);\n        var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));\n        ptr[0] += len;\n        var res = {\n            id: varint_to_i32(ai[1][0].data),\n            messages: []\n        };\n        ai[2].forEach(function(b) {\n            var mi = parse_shallow(b.data);\n            var fl = varint_to_i32(mi[3][0].data);\n            res.messages.push({\n                meta: mi,\n                data: buf.slice(ptr[0], ptr[0] + fl)\n            });\n            ptr[0] += fl;\n        });\n        if ((_a = ai[3]) == null ? void 0 : _a[0]) res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;\n        out.push(res);\n    }\n    return out;\n}\nfunction write_iwa_file(ias) {\n    var bufs = [];\n    ias.forEach(function(ia) {\n        var ai = [];\n        ai[1] = [\n            {\n                data: write_varint49(ia.id),\n                type: 0\n            }\n        ];\n        ai[2] = [];\n        if (ia.merge != null) ai[3] = [\n            {\n                data: write_varint49(+!!ia.merge),\n                type: 0\n            }\n        ];\n        var midata = [];\n        ia.messages.forEach(function(mi) {\n            midata.push(mi.data);\n            mi.meta[3] = [\n                {\n                    type: 0,\n                    data: write_varint49(mi.data.length)\n                }\n            ];\n            ai[2].push({\n                data: write_shallow(mi.meta),\n                type: 2\n            });\n        });\n        var aipayload = write_shallow(ai);\n        bufs.push(write_varint49(aipayload.length));\n        bufs.push(aipayload);\n        midata.forEach(function(mid) {\n            return bufs.push(mid);\n        });\n    });\n    return u8concat(bufs);\n}\nfunction parse_snappy_chunk(type, buf) {\n    if (type != 0) throw new Error(\"Unexpected Snappy chunk type \".concat(type));\n    var ptr = [\n        0\n    ];\n    var usz = parse_varint49(buf, ptr);\n    var chunks = [];\n    while(ptr[0] < buf.length){\n        var tag = buf[ptr[0]] & 3;\n        if (tag == 0) {\n            var len = buf[ptr[0]++] >> 2;\n            if (len < 60) ++len;\n            else {\n                var c = len - 59;\n                len = buf[ptr[0]];\n                if (c > 1) len |= buf[ptr[0] + 1] << 8;\n                if (c > 2) len |= buf[ptr[0] + 2] << 16;\n                if (c > 3) len |= buf[ptr[0] + 3] << 24;\n                len >>>= 0;\n                len++;\n                ptr[0] += c;\n            }\n            chunks.push(buf.slice(ptr[0], ptr[0] + len));\n            ptr[0] += len;\n            continue;\n        } else {\n            var offset = 0, length = 0;\n            if (tag == 1) {\n                length = (buf[ptr[0]] >> 2 & 7) + 4;\n                offset = (buf[ptr[0]++] & 224) << 3;\n                offset |= buf[ptr[0]++];\n            } else {\n                length = (buf[ptr[0]++] >> 2) + 1;\n                if (tag == 2) {\n                    offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;\n                    ptr[0] += 2;\n                } else {\n                    offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;\n                    ptr[0] += 4;\n                }\n            }\n            chunks = [\n                u8concat(chunks)\n            ];\n            if (offset == 0) throw new Error(\"Invalid offset 0\");\n            if (offset > chunks[0].length) throw new Error(\"Invalid offset beyond length\");\n            if (length >= offset) {\n                chunks.push(chunks[0].slice(-offset));\n                length -= offset;\n                while(length >= chunks[chunks.length - 1].length){\n                    chunks.push(chunks[chunks.length - 1]);\n                    length -= chunks[chunks.length - 1].length;\n                }\n            }\n            chunks.push(chunks[0].slice(-offset, -offset + length));\n        }\n    }\n    var o = u8concat(chunks);\n    if (o.length != usz) throw new Error(\"Unexpected length: \".concat(o.length, \" != \").concat(usz));\n    return o;\n}\nfunction decompress_iwa_file(buf) {\n    var out = [];\n    var l = 0;\n    while(l < buf.length){\n        var t = buf[l++];\n        var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;\n        l += 3;\n        out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));\n        l += len;\n    }\n    if (l !== buf.length) throw new Error(\"data is not a valid framed stream!\");\n    return u8concat(out);\n}\nfunction compress_iwa_file(buf) {\n    var out = [];\n    var l = 0;\n    while(l < buf.length){\n        var c = Math.min(buf.length - l, 268435455);\n        var frame = new Uint8Array(4);\n        out.push(frame);\n        var usz = write_varint49(c);\n        var L = usz.length;\n        out.push(usz);\n        if (c <= 60) {\n            L++;\n            out.push(new Uint8Array([\n                c - 1 << 2\n            ]));\n        } else if (c <= 256) {\n            L += 2;\n            out.push(new Uint8Array([\n                240,\n                c - 1 & 255\n            ]));\n        } else if (c <= 65536) {\n            L += 3;\n            out.push(new Uint8Array([\n                244,\n                c - 1 & 255,\n                c - 1 >> 8 & 255\n            ]));\n        } else if (c <= 16777216) {\n            L += 4;\n            out.push(new Uint8Array([\n                248,\n                c - 1 & 255,\n                c - 1 >> 8 & 255,\n                c - 1 >> 16 & 255\n            ]));\n        } else if (c <= 4294967296) {\n            L += 5;\n            out.push(new Uint8Array([\n                252,\n                c - 1 & 255,\n                c - 1 >> 8 & 255,\n                c - 1 >> 16 & 255,\n                c - 1 >>> 24 & 255\n            ]));\n        }\n        out.push(buf.slice(l, l + c));\n        L += c;\n        frame[0] = 0;\n        frame[1] = L & 255;\n        frame[2] = L >> 8 & 255;\n        frame[3] = L >> 16 & 255;\n        l += c;\n    }\n    return u8concat(out);\n}\nfunction parse_old_storage(buf, sst, rsst, v) {\n    var dv = u8_to_dataview(buf);\n    var flags = dv.getUint32(4, true);\n    var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;\n    var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);\n    if (flags & 512) {\n        ridx = dv.getUint32(data_offset, true);\n        data_offset += 4;\n    }\n    data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;\n    if (flags & 16) {\n        sidx = dv.getUint32(data_offset, true);\n        data_offset += 4;\n    }\n    if (flags & 32) {\n        ieee = dv.getFloat64(data_offset, true);\n        data_offset += 8;\n    }\n    if (flags & 64) {\n        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);\n        data_offset += 8;\n    }\n    var ret;\n    switch(buf[2]){\n        case 0:\n            break;\n        case 2:\n            ret = {\n                t: \"n\",\n                v: ieee\n            };\n            break;\n        case 3:\n            ret = {\n                t: \"s\",\n                v: sst[sidx]\n            };\n            break;\n        case 5:\n            ret = {\n                t: \"d\",\n                v: dt\n            };\n            break;\n        case 6:\n            ret = {\n                t: \"b\",\n                v: ieee > 0\n            };\n            break;\n        case 7:\n            ret = {\n                t: \"n\",\n                v: ieee / 86400\n            };\n            break;\n        case 8:\n            ret = {\n                t: \"e\",\n                v: 0\n            };\n            break;\n        case 9:\n            {\n                if (ridx > -1) ret = {\n                    t: \"s\",\n                    v: rsst[ridx]\n                };\n                else if (sidx > -1) ret = {\n                    t: \"s\",\n                    v: sst[sidx]\n                };\n                else if (!isNaN(ieee)) ret = {\n                    t: \"n\",\n                    v: ieee\n                };\n                else throw new Error(\"Unsupported cell type \".concat(buf.slice(0, 4)));\n            }\n            break;\n        default:\n            throw new Error(\"Unsupported cell type \".concat(buf.slice(0, 4)));\n    }\n    return ret;\n}\nfunction parse_new_storage(buf, sst, rsst) {\n    var dv = u8_to_dataview(buf);\n    var flags = dv.getUint32(8, true);\n    var data_offset = 12;\n    var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);\n    if (flags & 1) {\n        d128 = readDecimal128LE(buf, data_offset);\n        data_offset += 16;\n    }\n    if (flags & 2) {\n        ieee = dv.getFloat64(data_offset, true);\n        data_offset += 8;\n    }\n    if (flags & 4) {\n        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);\n        data_offset += 8;\n    }\n    if (flags & 8) {\n        sidx = dv.getUint32(data_offset, true);\n        data_offset += 4;\n    }\n    if (flags & 16) {\n        ridx = dv.getUint32(data_offset, true);\n        data_offset += 4;\n    }\n    var ret;\n    switch(buf[1]){\n        case 0:\n            break;\n        case 2:\n            ret = {\n                t: \"n\",\n                v: d128\n            };\n            break;\n        case 3:\n            ret = {\n                t: \"s\",\n                v: sst[sidx]\n            };\n            break;\n        case 5:\n            ret = {\n                t: \"d\",\n                v: dt\n            };\n            break;\n        case 6:\n            ret = {\n                t: \"b\",\n                v: ieee > 0\n            };\n            break;\n        case 7:\n            ret = {\n                t: \"n\",\n                v: ieee / 86400\n            };\n            break;\n        case 8:\n            ret = {\n                t: \"e\",\n                v: 0\n            };\n            break;\n        case 9:\n            {\n                if (ridx > -1) ret = {\n                    t: \"s\",\n                    v: rsst[ridx]\n                };\n                else throw new Error(\"Unsupported cell type \".concat(buf[1], \" : \").concat(flags & 31, \" : \").concat(buf.slice(0, 4)));\n            }\n            break;\n        case 10:\n            ret = {\n                t: \"n\",\n                v: d128\n            };\n            break;\n        default:\n            throw new Error(\"Unsupported cell type \".concat(buf[1], \" : \").concat(flags & 31, \" : \").concat(buf.slice(0, 4)));\n    }\n    return ret;\n}\nfunction write_new_storage(cell, sst) {\n    var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;\n    out[0] = 5;\n    switch(cell.t){\n        case \"n\":\n            out[1] = 2;\n            writeDecimal128LE(out, l, cell.v);\n            flags |= 1;\n            l += 16;\n            break;\n        case \"b\":\n            out[1] = 6;\n            dv.setFloat64(l, cell.v ? 1 : 0, true);\n            flags |= 2;\n            l += 8;\n            break;\n        case \"s\":\n            if (sst.indexOf(cell.v) == -1) throw new Error(\"Value \".concat(cell.v, \" missing from SST!\"));\n            out[1] = 3;\n            dv.setUint32(l, sst.indexOf(cell.v), true);\n            flags |= 8;\n            l += 4;\n            break;\n        default:\n            throw \"unsupported cell type \" + cell.t;\n    }\n    dv.setUint32(8, flags, true);\n    return out.slice(0, l);\n}\nfunction write_old_storage(cell, sst) {\n    var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;\n    out[0] = 3;\n    switch(cell.t){\n        case \"n\":\n            out[2] = 2;\n            dv.setFloat64(l, cell.v, true);\n            flags |= 32;\n            l += 8;\n            break;\n        case \"b\":\n            out[2] = 6;\n            dv.setFloat64(l, cell.v ? 1 : 0, true);\n            flags |= 32;\n            l += 8;\n            break;\n        case \"s\":\n            if (sst.indexOf(cell.v) == -1) throw new Error(\"Value \".concat(cell.v, \" missing from SST!\"));\n            out[2] = 3;\n            dv.setUint32(l, sst.indexOf(cell.v), true);\n            flags |= 16;\n            l += 4;\n            break;\n        default:\n            throw \"unsupported cell type \" + cell.t;\n    }\n    dv.setUint32(4, flags, true);\n    return out.slice(0, l);\n}\nfunction parse_cell_storage(buf, sst, rsst) {\n    switch(buf[0]){\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n            return parse_old_storage(buf, sst, rsst, buf[0]);\n        case 5:\n            return parse_new_storage(buf, sst, rsst);\n        default:\n            throw new Error(\"Unsupported payload version \".concat(buf[0]));\n    }\n}\nfunction parse_TSP_Reference(buf) {\n    var pb = parse_shallow(buf);\n    return parse_varint49(pb[1][0].data);\n}\nfunction write_TSP_Reference(idx) {\n    var out = [];\n    out[1] = [\n        {\n            type: 0,\n            data: write_varint49(idx)\n        }\n    ];\n    return write_shallow(out);\n}\nfunction parse_TST_TableDataList(M, root) {\n    var pb = parse_shallow(root.data);\n    var type = varint_to_i32(pb[1][0].data);\n    var entries = pb[3];\n    var data = [];\n    (entries || []).forEach(function(entry) {\n        var le = parse_shallow(entry.data);\n        var key = varint_to_i32(le[1][0].data) >>> 0;\n        switch(type){\n            case 1:\n                data[key] = u8str(le[3][0].data);\n                break;\n            case 8:\n                {\n                    var rt = M[parse_TSP_Reference(le[9][0].data)][0];\n                    var rtp = parse_shallow(rt.data);\n                    var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];\n                    var mtype = varint_to_i32(rtpref.meta[1][0].data);\n                    if (mtype != 2001) throw new Error(\"2000 unexpected reference to \".concat(mtype));\n                    var tswpsa = parse_shallow(rtpref.data);\n                    data[key] = tswpsa[3].map(function(x) {\n                        return u8str(x.data);\n                    }).join(\"\");\n                }\n                break;\n        }\n    });\n    return data;\n}\nfunction parse_TST_TileRowInfo(u8, type) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    var pb = parse_shallow(u8);\n    var R = varint_to_i32(pb[1][0].data) >>> 0;\n    var cnt = varint_to_i32(pb[2][0].data) >>> 0;\n    var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;\n    var used_storage_u8, used_storage;\n    if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {\n        used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;\n        used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;\n    } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {\n        used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;\n        used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;\n    } else throw \"NUMBERS Tile missing \".concat(type, \" cell storage\");\n    var width = wide_offsets ? 4 : 1;\n    var used_storage_offsets = u8_to_dataview(used_storage_u8);\n    var offsets = [];\n    for(var C = 0; C < used_storage_u8.length / 2; ++C){\n        var off = used_storage_offsets.getUint16(C * 2, true);\n        if (off < 65535) offsets.push([\n            C,\n            off\n        ]);\n    }\n    if (offsets.length != cnt) throw \"Expected \".concat(cnt, \" cells, found \").concat(offsets.length);\n    var cells = [];\n    for(C = 0; C < offsets.length - 1; ++C)cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);\n    if (offsets.length >= 1) cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);\n    return {\n        R: R,\n        cells: cells\n    };\n}\nfunction parse_TST_Tile(M, root) {\n    var _a;\n    var pb = parse_shallow(root.data);\n    var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;\n    var ri = mappa(pb[5], function(u8) {\n        return parse_TST_TileRowInfo(u8, storage);\n    });\n    return {\n        nrows: varint_to_i32(pb[4][0].data) >>> 0,\n        data: ri.reduce(function(acc, x) {\n            if (!acc[x.R]) acc[x.R] = [];\n            x.cells.forEach(function(cell, C) {\n                if (acc[x.R][C]) throw new Error(\"Duplicate cell r=\".concat(x.R, \" c=\").concat(C));\n                acc[x.R][C] = cell;\n            });\n            return acc;\n        }, [])\n    };\n}\nfunction parse_TST_TableModelArchive(M, root, ws) {\n    var _a;\n    var pb = parse_shallow(root.data);\n    var range = {\n        s: {\n            r: 0,\n            c: 0\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;\n    if (range.e.r < 0) throw new Error(\"Invalid row varint \".concat(pb[6][0].data));\n    range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;\n    if (range.e.c < 0) throw new Error(\"Invalid col varint \".concat(pb[7][0].data));\n    ws[\"!ref\"] = encode_range(range);\n    var store = parse_shallow(pb[4][0].data);\n    var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);\n    var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];\n    var tile = parse_shallow(store[3][0].data);\n    var _R = 0;\n    tile[1].forEach(function(t) {\n        var tl = parse_shallow(t.data);\n        var ref = M[parse_TSP_Reference(tl[2][0].data)][0];\n        var mtype = varint_to_i32(ref.meta[1][0].data);\n        if (mtype != 6002) throw new Error(\"6001 unexpected reference to \".concat(mtype));\n        var _tile = parse_TST_Tile(M, ref);\n        _tile.data.forEach(function(row, R) {\n            row.forEach(function(buf, C) {\n                var addr = encode_cell({\n                    r: _R + R,\n                    c: C\n                });\n                var res = parse_cell_storage(buf, sst, rsst);\n                if (res) ws[addr] = res;\n            });\n        });\n        _R += _tile.nrows;\n    });\n}\nfunction parse_TST_TableInfoArchive(M, root) {\n    var pb = parse_shallow(root.data);\n    var out = {\n        \"!ref\": \"A1\"\n    };\n    var tableref = M[parse_TSP_Reference(pb[2][0].data)];\n    var mtype = varint_to_i32(tableref[0].meta[1][0].data);\n    if (mtype != 6001) throw new Error(\"6000 unexpected reference to \".concat(mtype));\n    parse_TST_TableModelArchive(M, tableref[0], out);\n    return out;\n}\nfunction parse_TN_SheetArchive(M, root) {\n    var _a;\n    var pb = parse_shallow(root.data);\n    var out = {\n        name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : \"\",\n        sheets: []\n    };\n    var shapeoffs = mappa(pb[2], parse_TSP_Reference);\n    shapeoffs.forEach(function(off) {\n        M[off].forEach(function(m) {\n            var mtype = varint_to_i32(m.meta[1][0].data);\n            if (mtype == 6e3) out.sheets.push(parse_TST_TableInfoArchive(M, m));\n        });\n    });\n    return out;\n}\nfunction parse_TN_DocumentArchive(M, root) {\n    var out = book_new();\n    var pb = parse_shallow(root.data);\n    var sheetoffs = mappa(pb[1], parse_TSP_Reference);\n    sheetoffs.forEach(function(off) {\n        M[off].forEach(function(m) {\n            var mtype = varint_to_i32(m.meta[1][0].data);\n            if (mtype == 2) {\n                var root2 = parse_TN_SheetArchive(M, m);\n                root2.sheets.forEach(function(sheet, idx) {\n                    book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + \"_\" + idx, true);\n                });\n            }\n        });\n    });\n    if (out.SheetNames.length == 0) throw new Error(\"Empty NUMBERS file\");\n    return out;\n}\nfunction parse_numbers_iwa(cfb) {\n    var _a, _b, _c, _d;\n    var M = {}, indices = [];\n    cfb.FullPaths.forEach(function(p) {\n        if (p.match(/\\.iwpv2/)) throw new Error(\"Unsupported password protection\");\n    });\n    cfb.FileIndex.forEach(function(s) {\n        if (!s.name.match(/\\.iwa$/)) return;\n        var o;\n        try {\n            o = decompress_iwa_file(s.content);\n        } catch (e) {\n            return console.log(\"?? \" + s.content.length + \" \" + (e.message || e));\n        }\n        var packets;\n        try {\n            packets = parse_iwa_file(o);\n        } catch (e) {\n            return console.log(\"## \" + (e.message || e));\n        }\n        packets.forEach(function(packet) {\n            M[packet.id] = packet.messages;\n            indices.push(packet.id);\n        });\n    });\n    if (!indices.length) throw new Error(\"File has no messages\");\n    var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];\n    if (!docroot) indices.forEach(function(idx) {\n        M[idx].forEach(function(iwam) {\n            var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;\n            if (mtype == 1) {\n                if (!docroot) docroot = iwam;\n                else throw new Error(\"Document has multiple roots\");\n            }\n        });\n    });\n    if (!docroot) throw new Error(\"Cannot find Document root\");\n    return parse_TN_DocumentArchive(M, docroot);\n}\nfunction write_tile_row(tri, data, SST) {\n    var _a, _b, _c, _d;\n    if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0])) throw \"Mutation only works on post-BNC storages!\";\n    var wide_offsets = ((_d = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && varint_to_i32(tri[8][0].data) > 0 || false;\n    if (wide_offsets) throw \"Math only works with normal offsets\";\n    var cnt = 0;\n    var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];\n    var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];\n    for(var C = 0; C < data.length; ++C){\n        if (data[C] == null) {\n            dv.setUint16(C * 2, 65535, true);\n            _dv.setUint16(C * 2, 65535);\n            continue;\n        }\n        dv.setUint16(C * 2, last_offset, true);\n        _dv.setUint16(C * 2, _last_offset, true);\n        var celload, _celload;\n        switch(typeof data[C]){\n            case \"string\":\n                celload = write_new_storage({\n                    t: \"s\",\n                    v: data[C]\n                }, SST);\n                _celload = write_old_storage({\n                    t: \"s\",\n                    v: data[C]\n                }, SST);\n                break;\n            case \"number\":\n                celload = write_new_storage({\n                    t: \"n\",\n                    v: data[C]\n                }, SST);\n                _celload = write_old_storage({\n                    t: \"n\",\n                    v: data[C]\n                }, SST);\n                break;\n            case \"boolean\":\n                celload = write_new_storage({\n                    t: \"b\",\n                    v: data[C]\n                }, SST);\n                _celload = write_old_storage({\n                    t: \"b\",\n                    v: data[C]\n                }, SST);\n                break;\n            default:\n                throw new Error(\"Unsupported value \" + data[C]);\n        }\n        cell_storage.push(celload);\n        last_offset += celload.length;\n        _cell_storage.push(_celload);\n        _last_offset += _celload.length;\n        ++cnt;\n    }\n    tri[2][0].data = write_varint49(cnt);\n    for(; C < tri[7][0].data.length / 2; ++C){\n        dv.setUint16(C * 2, 65535, true);\n        _dv.setUint16(C * 2, 65535, true);\n    }\n    tri[6][0].data = u8concat(cell_storage);\n    tri[3][0].data = u8concat(_cell_storage);\n    return cnt;\n}\nfunction write_numbers_iwa(wb, opts) {\n    if (!opts || !opts.numbers) throw new Error(\"Must pass a `numbers` option -- check the README\");\n    var ws = wb.Sheets[wb.SheetNames[0]];\n    if (wb.SheetNames.length > 1) console.error(\"The Numbers writer currently writes only the first table\");\n    var range = decode_range(ws[\"!ref\"]);\n    range.s.r = range.s.c = 0;\n    var trunc = false;\n    if (range.e.c > 9) {\n        trunc = true;\n        range.e.c = 9;\n    }\n    if (range.e.r > 49) {\n        trunc = true;\n        range.e.r = 49;\n    }\n    if (trunc) console.error(\"The Numbers writer is currently limited to \".concat(encode_range(range)));\n    var data = sheet_to_json(ws, {\n        range: range,\n        header: 1\n    });\n    var SST = [\n        \"~Sh33tJ5~\"\n    ];\n    data.forEach(function(row) {\n        return row.forEach(function(cell) {\n            if (typeof cell == \"string\") SST.push(cell);\n        });\n    });\n    var dependents = {};\n    var indices = [];\n    var cfb = CFB.read(opts.numbers, {\n        type: \"base64\"\n    });\n    cfb.FileIndex.map(function(fi, idx) {\n        return [\n            fi,\n            cfb.FullPaths[idx]\n        ];\n    }).forEach(function(row) {\n        var fi = row[0], fp = row[1];\n        if (fi.type != 2) return;\n        if (!fi.name.match(/\\.iwa/)) return;\n        var old_content = fi.content;\n        var raw1 = decompress_iwa_file(old_content);\n        var x2 = parse_iwa_file(raw1);\n        x2.forEach(function(packet2) {\n            indices.push(packet2.id);\n            dependents[packet2.id] = {\n                deps: [],\n                location: fp,\n                type: varint_to_i32(packet2.messages[0].meta[1][0].data)\n            };\n        });\n    });\n    indices.sort(function(x2, y2) {\n        return x2 - y2;\n    });\n    var indices_varint = indices.filter(function(x2) {\n        return x2 > 1;\n    }).map(function(x2) {\n        return [\n            x2,\n            write_varint49(x2)\n        ];\n    });\n    cfb.FileIndex.map(function(fi, idx) {\n        return [\n            fi,\n            cfb.FullPaths[idx]\n        ];\n    }).forEach(function(row) {\n        var fi = row[0], fp = row[1];\n        if (!fi.name.match(/\\.iwa/)) return;\n        var x2 = parse_iwa_file(decompress_iwa_file(fi.content));\n        x2.forEach(function(ia) {\n            ia.messages.forEach(function(m) {\n                indices_varint.forEach(function(ivi) {\n                    if (ia.messages.some(function(mess) {\n                        return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);\n                    })) {\n                        dependents[ivi[0]].deps.push(ia.id);\n                    }\n                });\n            });\n        });\n    });\n    function get_unique_msgid() {\n        for(var i = 927262; i < 2e6; ++i)if (!dependents[i]) return i;\n        throw new Error(\"Too many messages\");\n    }\n    var entry = CFB.find(cfb, dependents[1].location);\n    var x = parse_iwa_file(decompress_iwa_file(entry.content));\n    var docroot;\n    for(var xi = 0; xi < x.length; ++xi){\n        var packet = x[xi];\n        if (packet.id == 1) docroot = packet;\n    }\n    var sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);\n    entry = CFB.find(cfb, dependents[sheetrootref].location);\n    x = parse_iwa_file(decompress_iwa_file(entry.content));\n    for(xi = 0; xi < x.length; ++xi){\n        packet = x[xi];\n        if (packet.id == sheetrootref) docroot = packet;\n    }\n    sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);\n    entry = CFB.find(cfb, dependents[sheetrootref].location);\n    x = parse_iwa_file(decompress_iwa_file(entry.content));\n    for(xi = 0; xi < x.length; ++xi){\n        packet = x[xi];\n        if (packet.id == sheetrootref) docroot = packet;\n    }\n    sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);\n    entry = CFB.find(cfb, dependents[sheetrootref].location);\n    x = parse_iwa_file(decompress_iwa_file(entry.content));\n    for(xi = 0; xi < x.length; ++xi){\n        packet = x[xi];\n        if (packet.id == sheetrootref) docroot = packet;\n    }\n    var pb = parse_shallow(docroot.messages[0].data);\n    {\n        pb[6][0].data = write_varint49(range.e.r + 1);\n        pb[7][0].data = write_varint49(range.e.c + 1);\n        var cruidsref = parse_TSP_Reference(pb[46][0].data);\n        var oldbucket = CFB.find(cfb, dependents[cruidsref].location);\n        var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));\n        {\n            for(var j = 0; j < _x.length; ++j){\n                if (_x[j].id == cruidsref) break;\n            }\n            if (_x[j].id != cruidsref) throw \"Bad ColumnRowUIDMapArchive\";\n            var cruids = parse_shallow(_x[j].messages[0].data);\n            cruids[1] = [];\n            cruids[2] = [], cruids[3] = [];\n            for(var C = 0; C <= range.e.c; ++C){\n                var uuid = [];\n                uuid[1] = uuid[2] = [\n                    {\n                        type: 0,\n                        data: write_varint49(C + 420690)\n                    }\n                ];\n                cruids[1].push({\n                    type: 2,\n                    data: write_shallow(uuid)\n                });\n                cruids[2].push({\n                    type: 0,\n                    data: write_varint49(C)\n                });\n                cruids[3].push({\n                    type: 0,\n                    data: write_varint49(C)\n                });\n            }\n            cruids[4] = [];\n            cruids[5] = [], cruids[6] = [];\n            for(var R = 0; R <= range.e.r; ++R){\n                uuid = [];\n                uuid[1] = uuid[2] = [\n                    {\n                        type: 0,\n                        data: write_varint49(R + 726270)\n                    }\n                ];\n                cruids[4].push({\n                    type: 2,\n                    data: write_shallow(uuid)\n                });\n                cruids[5].push({\n                    type: 0,\n                    data: write_varint49(R)\n                });\n                cruids[6].push({\n                    type: 0,\n                    data: write_varint49(R)\n                });\n            }\n            _x[j].messages[0].data = write_shallow(cruids);\n        }\n        oldbucket.content = compress_iwa_file(write_iwa_file(_x));\n        oldbucket.size = oldbucket.content.length;\n        delete pb[46];\n        var store = parse_shallow(pb[4][0].data);\n        {\n            store[7][0].data = write_varint49(range.e.r + 1);\n            var row_headers = parse_shallow(store[1][0].data);\n            var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);\n            oldbucket = CFB.find(cfb, dependents[row_header_ref].location);\n            _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));\n            {\n                if (_x[0].id != row_header_ref) throw \"Bad HeaderStorageBucket\";\n                var base_bucket = parse_shallow(_x[0].messages[0].data);\n                for(R = 0; R < data.length; ++R){\n                    var _bucket = parse_shallow(base_bucket[2][0].data);\n                    _bucket[1][0].data = write_varint49(R);\n                    _bucket[4][0].data = write_varint49(data[R].length);\n                    base_bucket[2][R] = {\n                        type: base_bucket[2][0].type,\n                        data: write_shallow(_bucket)\n                    };\n                }\n                _x[0].messages[0].data = write_shallow(base_bucket);\n            }\n            oldbucket.content = compress_iwa_file(write_iwa_file(_x));\n            oldbucket.size = oldbucket.content.length;\n            var col_header_ref = parse_TSP_Reference(store[2][0].data);\n            oldbucket = CFB.find(cfb, dependents[col_header_ref].location);\n            _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));\n            {\n                if (_x[0].id != col_header_ref) throw \"Bad HeaderStorageBucket\";\n                base_bucket = parse_shallow(_x[0].messages[0].data);\n                for(C = 0; C <= range.e.c; ++C){\n                    _bucket = parse_shallow(base_bucket[2][0].data);\n                    _bucket[1][0].data = write_varint49(C);\n                    _bucket[4][0].data = write_varint49(range.e.r + 1);\n                    base_bucket[2][C] = {\n                        type: base_bucket[2][0].type,\n                        data: write_shallow(_bucket)\n                    };\n                }\n                _x[0].messages[0].data = write_shallow(base_bucket);\n            }\n            oldbucket.content = compress_iwa_file(write_iwa_file(_x));\n            oldbucket.size = oldbucket.content.length;\n            var sstref = parse_TSP_Reference(store[4][0].data);\n            (function() {\n                var sentry = CFB.find(cfb, dependents[sstref].location);\n                var sx = parse_iwa_file(decompress_iwa_file(sentry.content));\n                var sstroot;\n                for(var sxi = 0; sxi < sx.length; ++sxi){\n                    var packet2 = sx[sxi];\n                    if (packet2.id == sstref) sstroot = packet2;\n                }\n                var sstdata = parse_shallow(sstroot.messages[0].data);\n                {\n                    sstdata[3] = [];\n                    var newsst = [];\n                    SST.forEach(function(str, i) {\n                        newsst[1] = [\n                            {\n                                type: 0,\n                                data: write_varint49(i)\n                            }\n                        ];\n                        newsst[2] = [\n                            {\n                                type: 0,\n                                data: write_varint49(1)\n                            }\n                        ];\n                        newsst[3] = [\n                            {\n                                type: 2,\n                                data: stru8(str)\n                            }\n                        ];\n                        sstdata[3].push({\n                            type: 2,\n                            data: write_shallow(newsst)\n                        });\n                    });\n                }\n                sstroot.messages[0].data = write_shallow(sstdata);\n                var sy = write_iwa_file(sx);\n                var raw32 = compress_iwa_file(sy);\n                sentry.content = raw32;\n                sentry.size = sentry.content.length;\n            })();\n            var tile = parse_shallow(store[3][0].data);\n            {\n                var t = tile[1][0];\n                delete tile[2];\n                var tl = parse_shallow(t.data);\n                {\n                    var tileref = parse_TSP_Reference(tl[2][0].data);\n                    (function() {\n                        var tentry = CFB.find(cfb, dependents[tileref].location);\n                        var tx = parse_iwa_file(decompress_iwa_file(tentry.content));\n                        var tileroot;\n                        for(var sxi = 0; sxi < tx.length; ++sxi){\n                            var packet2 = tx[sxi];\n                            if (packet2.id == tileref) tileroot = packet2;\n                        }\n                        var tiledata = parse_shallow(tileroot.messages[0].data);\n                        {\n                            delete tiledata[6];\n                            delete tile[7];\n                            var rowload = new Uint8Array(tiledata[5][0].data);\n                            tiledata[5] = [];\n                            var cnt = 0;\n                            for(var R2 = 0; R2 <= range.e.r; ++R2){\n                                var tilerow = parse_shallow(rowload);\n                                cnt += write_tile_row(tilerow, data[R2], SST);\n                                tilerow[1][0].data = write_varint49(R2);\n                                tiledata[5].push({\n                                    data: write_shallow(tilerow),\n                                    type: 2\n                                });\n                            }\n                            tiledata[1] = [\n                                {\n                                    type: 0,\n                                    data: write_varint49(range.e.c + 1)\n                                }\n                            ];\n                            tiledata[2] = [\n                                {\n                                    type: 0,\n                                    data: write_varint49(range.e.r + 1)\n                                }\n                            ];\n                            tiledata[3] = [\n                                {\n                                    type: 0,\n                                    data: write_varint49(cnt)\n                                }\n                            ];\n                            tiledata[4] = [\n                                {\n                                    type: 0,\n                                    data: write_varint49(range.e.r + 1)\n                                }\n                            ];\n                        }\n                        tileroot.messages[0].data = write_shallow(tiledata);\n                        var ty = write_iwa_file(tx);\n                        var raw32 = compress_iwa_file(ty);\n                        tentry.content = raw32;\n                        tentry.size = tentry.content.length;\n                    })();\n                }\n                t.data = write_shallow(tl);\n            }\n            store[3][0].data = write_shallow(tile);\n        }\n        pb[4][0].data = write_shallow(store);\n    }\n    docroot.messages[0].data = write_shallow(pb);\n    var y = write_iwa_file(x);\n    var raw3 = compress_iwa_file(y);\n    entry.content = raw3;\n    entry.size = entry.content.length;\n    return cfb;\n}\nfunction fix_opts_func(defaults /*:Array<Array<any> >*/ ) /*:{(o:any):void}*/ {\n    return function fix_opts(opts) {\n        for(var i = 0; i != defaults.length; ++i){\n            var d = defaults[i];\n            if (opts[d[0]] === undefined) opts[d[0]] = d[1];\n            if (d[2] === \"n\") opts[d[0]] = Number(opts[d[0]]);\n        }\n    };\n}\nfunction fix_read_opts(opts) {\n    fix_opts_func([\n        [\n            \"cellNF\",\n            false\n        ],\n        /* emit cell number format string as .z */ [\n            \"cellHTML\",\n            true\n        ],\n        /* emit html string as .h */ [\n            \"cellFormula\",\n            true\n        ],\n        /* emit formulae as .f */ [\n            \"cellStyles\",\n            false\n        ],\n        /* emits style/theme as .s */ [\n            \"cellText\",\n            true\n        ],\n        /* emit formatted text as .w */ [\n            \"cellDates\",\n            false\n        ],\n        /* emit date cells with type `d` */ [\n            \"sheetStubs\",\n            false\n        ],\n        /* emit empty cells */ [\n            \"sheetRows\",\n            0,\n            \"n\"\n        ],\n        /* read n rows (0 = read all rows) */ [\n            \"bookDeps\",\n            false\n        ],\n        /* parse calculation chains */ [\n            \"bookSheets\",\n            false\n        ],\n        /* only try to get sheet names (no Sheets) */ [\n            \"bookProps\",\n            false\n        ],\n        /* only try to get properties (no Sheets) */ [\n            \"bookFiles\",\n            false\n        ],\n        /* include raw file structure (keys, files, cfb) */ [\n            \"bookVBA\",\n            false\n        ],\n        /* include vba raw data (vbaraw) */ [\n            \"password\",\n            \"\"\n        ],\n        /* password */ [\n            \"WTF\",\n            false\n        ]\n    ])(opts);\n}\nfunction fix_write_opts(opts) {\n    fix_opts_func([\n        [\n            \"cellDates\",\n            false\n        ],\n        /* write date cells with type `d` */ [\n            \"bookSST\",\n            false\n        ],\n        /* Generate Shared String Table */ [\n            \"bookType\",\n            \"xlsx\"\n        ],\n        /* Type of workbook (xlsx/m/b) */ [\n            \"compression\",\n            false\n        ],\n        /* Use file compression */ [\n            \"WTF\",\n            false\n        ]\n    ])(opts);\n}\nfunction get_sheet_type(n /*:string*/ ) /*:string*/ {\n    if (RELS.WS.indexOf(n) > -1) return \"sheet\";\n    if (RELS.CS && n == RELS.CS) return \"chart\";\n    if (RELS.DS && n == RELS.DS) return \"dialog\";\n    if (RELS.MS && n == RELS.MS) return \"macro\";\n    return n && n.length ? n : \"sheet\";\n}\nfunction safe_parse_wbrels(wbrels, sheets) {\n    if (!wbrels) return 0;\n    try {\n        wbrels = sheets.map(function pwbr(w) {\n            if (!w.id) w.id = w.strRelID;\n            return [\n                w.name,\n                wbrels[\"!id\"][w.id].Target,\n                get_sheet_type(wbrels[\"!id\"][w.id].Type)\n            ];\n        });\n    } catch (e) {\n        return null;\n    }\n    return !wbrels || wbrels.length === 0 ? null : wbrels;\n}\nfunction safe_parse_sheet(zip, path /*:string*/ , relsPath /*:string*/ , sheet, idx /*:number*/ , sheetRels, sheets, stype /*:string*/ , opts, wb, themes, styles) {\n    try {\n        sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);\n        var data = getzipdata(zip, path);\n        var _ws;\n        switch(stype){\n            case \"sheet\":\n                _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n                break;\n            case \"chart\":\n                _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n                if (!_ws || !_ws[\"!drawel\"]) break;\n                var dfile = resolve_path(_ws[\"!drawel\"].Target, path);\n                var drelsp = get_rels_path(dfile);\n                var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));\n                var chartp = resolve_path(draw, dfile);\n                var crelsp = get_rels_path(chartp);\n                _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);\n                break;\n            case \"macro\":\n                _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n                break;\n            case \"dialog\":\n                _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);\n                break;\n            default:\n                throw new Error(\"Unrecognized sheet type \" + stype);\n        }\n        sheets[sheet] = _ws;\n        /* scan rels for comments and threaded comments */ var tcomments = [];\n        if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {\n            var dfile = \"\";\n            if (sheetRels[sheet][n].Type == RELS.CMNT) {\n                dfile = resolve_path(sheetRels[sheet][n].Target, path);\n                var comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);\n                if (!comments || !comments.length) return;\n                sheet_insert_comments(_ws, comments, false);\n            }\n            if (sheetRels[sheet][n].Type == RELS.TCMNT) {\n                dfile = resolve_path(sheetRels[sheet][n].Target, path);\n                tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));\n            }\n        });\n        if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);\n    } catch (e) {\n        if (opts.WTF) throw e;\n    }\n}\nfunction strip_front_slash(x /*:string*/ ) /*:string*/ {\n    return x.charAt(0) == \"/\" ? x.slice(1) : x;\n}\nfunction parse_zip(zip /*:ZIP*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    make_ssf();\n    opts = opts || {};\n    fix_read_opts(opts);\n    /* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */ if (safegetzipfile(zip, \"META-INF/manifest.xml\")) return parse_ods(zip, opts);\n    /* UOC */ if (safegetzipfile(zip, \"objectdata.xml\")) return parse_ods(zip, opts);\n    /* Numbers */ if (safegetzipfile(zip, \"Index/Document.iwa\")) {\n        if (typeof Uint8Array == \"undefined\") throw new Error(\"NUMBERS file parsing requires Uint8Array support\");\n        if (typeof parse_numbers_iwa != \"undefined\") {\n            if (zip.FileIndex) return parse_numbers_iwa(zip);\n            var _zip = CFB.utils.cfb_new();\n            zipentries(zip).forEach(function(e) {\n                zip_add_file(_zip, e, getzipbin(zip, e));\n            });\n            return parse_numbers_iwa(_zip);\n        }\n        throw new Error(\"Unsupported NUMBERS file\");\n    }\n    if (!safegetzipfile(zip, \"[Content_Types].xml\")) {\n        if (safegetzipfile(zip, \"index.xml.gz\")) throw new Error(\"Unsupported NUMBERS 08 file\");\n        if (safegetzipfile(zip, \"index.xml\")) throw new Error(\"Unsupported NUMBERS 09 file\");\n        throw new Error(\"Unsupported ZIP file\");\n    }\n    var entries = zipentries(zip);\n    var dir = parse_ct(getzipstr(zip, \"[Content_Types].xml\"));\n    var xlsb = false;\n    var sheets, binname;\n    if (dir.workbooks.length === 0) {\n        binname = \"xl/workbook.xml\";\n        if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);\n    }\n    if (dir.workbooks.length === 0) {\n        binname = \"xl/workbook.bin\";\n        if (!getzipdata(zip, binname, true)) throw new Error(\"Could not find workbook\");\n        dir.workbooks.push(binname);\n        xlsb = true;\n    }\n    if (dir.workbooks[0].slice(-3) == \"bin\") xlsb = true;\n    var themes = {} /*:any*/ ;\n    var styles = {} /*:any*/ ;\n    if (!opts.bookSheets && !opts.bookProps) {\n        strs = [];\n        if (dir.sst) try {\n            strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);\n        } catch (e) {\n            if (opts.WTF) throw e;\n        }\n        if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\\//, \"\"), true) || \"\", dir.themes[0], opts);\n        if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);\n    }\n    /*var externbooks = */ dir.links.map(function(link) {\n        try {\n            var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);\n            return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);\n        } catch (e) {}\n    });\n    var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);\n    var props = {}, propdata = \"\";\n    if (dir.coreprops.length) {\n        propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);\n        if (propdata) props = parse_core_props(propdata);\n        if (dir.extprops.length !== 0) {\n            propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);\n            if (propdata) parse_ext_props(propdata, props, opts);\n        }\n    }\n    var custprops = {};\n    if (!opts.bookSheets || opts.bookProps) {\n        if (dir.custprops.length !== 0) {\n            propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);\n            if (propdata) custprops = parse_cust_props(propdata, opts);\n        }\n    }\n    var out = {} /*:any*/ ;\n    if (opts.bookSheets || opts.bookProps) {\n        if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) {\n            return x.name;\n        });\n        else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;\n        if (opts.bookProps) {\n            out.Props = props;\n            out.Custprops = custprops;\n        }\n        if (opts.bookSheets && typeof sheets !== \"undefined\") out.SheetNames = sheets;\n        if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;\n    }\n    sheets = {};\n    var deps = {};\n    if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);\n    var i = 0;\n    var sheetRels = {} /*:any*/ ;\n    var path, relsPath;\n    {\n        var wbsheets = wb.Sheets;\n        props.Worksheets = wbsheets.length;\n        props.SheetNames = [];\n        for(var j = 0; j != wbsheets.length; ++j){\n            props.SheetNames[j] = wbsheets[j].name;\n        }\n    }\n    var wbext = xlsb ? \"bin\" : \"xml\";\n    var wbrelsi = dir.workbooks[0].lastIndexOf(\"/\");\n    var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + \"_rels/\" + dir.workbooks[0].slice(wbrelsi + 1) + \".rels\").replace(/^\\//, \"\");\n    if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = \"xl/_rels/workbook.\" + wbext + \".rels\";\n    var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, \"s5s\"));\n    if ((dir.metadata || []).length >= 1) {\n        /* TODO: MDX and other types of metadata */ opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);\n    }\n    if ((dir.people || []).length >= 1) {\n        opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);\n    }\n    if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);\n    /* Numbers iOS hack */ var nmode = getzipdata(zip, \"xl/worksheets/sheet.xml\", true) ? 1 : 0;\n    wsloop: for(i = 0; i != props.Worksheets; ++i){\n        var stype = \"sheet\";\n        if (wbrels && wbrels[i]) {\n            path = \"xl/\" + wbrels[i][1].replace(/[\\/]?xl\\//, \"\");\n            if (!safegetzipfile(zip, path)) path = wbrels[i][1];\n            if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\\/.*$/, \"\") + wbrels[i][1];\n            stype = wbrels[i][2];\n        } else {\n            path = \"xl/worksheets/sheet\" + (i + 1 - nmode) + \".\" + wbext;\n            path = path.replace(/sheet0\\./, \"sheet.\");\n        }\n        relsPath = path.replace(/^(.*)(\\/)([^\\/]*)$/, \"$1/_rels/$3.rels\");\n        if (opts && opts.sheets != null) switch(typeof opts.sheets){\n            case \"number\":\n                if (i != opts.sheets) continue wsloop;\n                break;\n            case \"string\":\n                if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;\n                break;\n            default:\n                if (Array.isArray && Array.isArray(opts.sheets)) {\n                    var snjseen = false;\n                    for(var snj = 0; snj != opts.sheets.length; ++snj){\n                        if (typeof opts.sheets[snj] == \"number\" && opts.sheets[snj] == i) snjseen = 1;\n                        if (typeof opts.sheets[snj] == \"string\" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;\n                    }\n                    if (!snjseen) continue wsloop;\n                }\n        }\n        safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);\n    }\n    out = {\n        Directory: dir,\n        Workbook: wb,\n        Props: props,\n        Custprops: custprops,\n        Deps: deps,\n        Sheets: sheets,\n        SheetNames: props.SheetNames,\n        Strings: strs,\n        Styles: styles,\n        Themes: themes,\n        SSF: dup(table_fmt)\n    } /*:any*/ ;\n    if (opts && opts.bookFiles) {\n        if (zip.files) {\n            out.keys = entries;\n            out.files = zip.files;\n        } else {\n            out.keys = [];\n            out.files = {};\n            zip.FullPaths.forEach(function(p, idx) {\n                p = p.replace(/^Root Entry[\\/]/, \"\");\n                out.keys.push(p);\n                out.files[p] = zip.FileIndex[idx];\n            });\n        }\n    }\n    if (opts && opts.bookVBA) {\n        if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);\n        else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, \"xl/vbaProject.bin\", true);\n    }\n    return out;\n}\n/* [MS-OFFCRYPTO] 2.1.1 */ function parse_xlsxcfb(cfb, _opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    var opts = _opts || {};\n    var f = \"Workbook\", data = CFB.find(cfb, f);\n    try {\n        f = \"/!DataSpaces/Version\";\n        data = CFB.find(cfb, f);\n        if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n        /*var version = */ parse_DataSpaceVersionInfo(data.content);\n        /* 2.3.4.1 */ f = \"/!DataSpaces/DataSpaceMap\";\n        data = CFB.find(cfb, f);\n        if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n        var dsm = parse_DataSpaceMap(data.content);\n        if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== \"StrongEncryptionDataSpace\" || dsm[0].comps[0].v !== \"EncryptedPackage\") throw new Error(\"ECMA-376 Encrypted file bad \" + f);\n        /* 2.3.4.2 */ f = \"/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace\";\n        data = CFB.find(cfb, f);\n        if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n        var seds = parse_DataSpaceDefinition(data.content);\n        if (seds.length != 1 || seds[0] != \"StrongEncryptionTransform\") throw new Error(\"ECMA-376 Encrypted file bad \" + f);\n        /* 2.3.4.3 */ f = \"/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary\";\n        data = CFB.find(cfb, f);\n        if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n        /*var hdr = */ parse_Primary(data.content);\n    } catch (e) {}\n    f = \"/EncryptionInfo\";\n    data = CFB.find(cfb, f);\n    if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n    var einfo = parse_EncryptionInfo(data.content);\n    /* 2.3.4.4 */ f = \"/EncryptedPackage\";\n    data = CFB.find(cfb, f);\n    if (!data || !data.content) throw new Error(\"ECMA-376 Encrypted file missing \" + f);\n    /*global decrypt_agile */ /*:: declare var decrypt_agile:any; */ if (einfo[0] == 0x04 && typeof decrypt_agile !== \"undefined\") return decrypt_agile(einfo[1], data.content, opts.password || \"\", opts);\n    /*global decrypt_std76 */ /*:: declare var decrypt_std76:any; */ if (einfo[0] == 0x02 && typeof decrypt_std76 !== \"undefined\") return decrypt_std76(einfo[1], data.content, opts.password || \"\", opts);\n    throw new Error(\"File is password-protected\");\n}\nfunction write_zip(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {\n    if (opts.bookType == \"ods\") return write_ods(wb, opts);\n    if (opts.bookType == \"numbers\") return write_numbers_iwa(wb, opts);\n    if (opts.bookType == \"xlsb\") return write_zip_xlsxb(wb, opts);\n    return write_zip_xlsx(wb, opts);\n}\n/* XLSX and XLSB writing are very similar.  Originally they were unified in one\n   export function.  This is horrible for tree shaking in the common case (most\n   applications need to export files in one format) so this function supports\n   both formats while write_zip_xlsx only handles XLSX */ function write_zip_xlsxb(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {\n    _shapeid = 1024;\n    if (wb && !wb.SSF) {\n        wb.SSF = dup(table_fmt);\n    }\n    if (wb && wb.SSF) {\n        make_ssf();\n        SSF_load_table(wb.SSF);\n        // $FlowIgnore\n        opts.revssf = evert_num(wb.SSF);\n        opts.revssf[wb.SSF[65535]] = 0;\n        opts.ssf = wb.SSF;\n    }\n    opts.rels = {};\n    opts.wbrels = {};\n    opts.Strings = /*::((*/ [] /*:: :any):SST)*/ ;\n    opts.Strings.Count = 0;\n    opts.Strings.Unique = 0;\n    if (browser_has_Map) opts.revStrings = new Map();\n    else {\n        opts.revStrings = {};\n        opts.revStrings.foo = [];\n        delete opts.revStrings.foo;\n    }\n    var wbext = opts.bookType == \"xlsb\" ? \"bin\" : \"xml\";\n    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;\n    var ct = new_ct();\n    fix_write_opts(opts = opts || {});\n    var zip = zip_new();\n    var f = \"\", rId = 0;\n    opts.cellXfs = [];\n    get_cell_style(opts.cellXfs, {}, {\n        revssf: {\n            \"General\": 0\n        }\n    });\n    if (!wb.Props) wb.Props = {};\n    f = \"docProps/core.xml\";\n    zip_add_file(zip, f, write_core_props(wb.Props, opts));\n    ct.coreprops.push(f);\n    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n    /*::if(!wb.Props) throw \"unreachable\"; */ f = \"docProps/app.xml\";\n    if (wb.Props && wb.Props.SheetNames) {} else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;\n    else {\n        var _sn = [];\n        for(var _i = 0; _i < wb.SheetNames.length; ++_i)if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);\n        wb.Props.SheetNames = _sn;\n    }\n    wb.Props.Worksheets = wb.Props.SheetNames.length;\n    zip_add_file(zip, f, write_ext_props(wb.Props, opts));\n    ct.extprops.push(f);\n    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {\n        f = \"docProps/custom.xml\";\n        zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));\n        ct.custprops.push(f);\n        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n    }\n    for(rId = 1; rId <= wb.SheetNames.length; ++rId){\n        var wsrels = {\n            \"!id\": {}\n        };\n        var ws = wb.Sheets[wb.SheetNames[rId - 1]];\n        var _type = (ws || {})[\"!type\"] || \"sheet\";\n        switch(_type){\n            case \"chart\":\n            /* falls through */ default:\n                f = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n                zip_add_file(zip, f, write_ws(rId - 1, f, opts, wb, wsrels));\n                ct.sheets.push(f);\n                add_rels(opts.wbrels, -1, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS[0]);\n        }\n        if (ws) {\n            var comments = ws[\"!comments\"];\n            var need_vml = false;\n            var cf = \"\";\n            if (comments && comments.length > 0) {\n                cf = \"xl/comments\" + rId + \".\" + wbext;\n                zip_add_file(zip, cf, write_cmnt(comments, cf, opts));\n                ct.comments.push(cf);\n                add_rels(wsrels, -1, \"../comments\" + rId + \".\" + wbext, RELS.CMNT);\n                need_vml = true;\n            }\n            if (ws[\"!legacy\"]) {\n                if (need_vml) zip_add_file(zip, \"xl/drawings/vmlDrawing\" + rId + \".vml\", write_comments_vml(rId, ws[\"!comments\"]));\n            }\n            delete ws[\"!comments\"];\n            delete ws[\"!legacy\"];\n        }\n        if (wsrels[\"!id\"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));\n    }\n    if (opts.Strings != null && opts.Strings.length > 0) {\n        f = \"xl/sharedStrings.\" + wbext;\n        zip_add_file(zip, f, write_sst(opts.Strings, f, opts));\n        ct.strs.push(f);\n        add_rels(opts.wbrels, -1, \"sharedStrings.\" + wbext, RELS.SST);\n    }\n    f = \"xl/workbook.\" + wbext;\n    zip_add_file(zip, f, write_wb(wb, f, opts));\n    ct.workbooks.push(f);\n    add_rels(opts.rels, 1, f, RELS.WB);\n    /* TODO: something more intelligent with themes */ f = \"xl/theme/theme1.xml\";\n    zip_add_file(zip, f, write_theme(wb.Themes, opts));\n    ct.themes.push(f);\n    add_rels(opts.wbrels, -1, \"theme/theme1.xml\", RELS.THEME);\n    /* TODO: something more intelligent with styles */ f = \"xl/styles.\" + wbext;\n    zip_add_file(zip, f, write_sty(wb, f, opts));\n    ct.styles.push(f);\n    add_rels(opts.wbrels, -1, \"styles.\" + wbext, RELS.STY);\n    if (wb.vbaraw && vbafmt) {\n        f = \"xl/vbaProject.bin\";\n        zip_add_file(zip, f, wb.vbaraw);\n        ct.vba.push(f);\n        add_rels(opts.wbrels, -1, \"vbaProject.bin\", RELS.VBA);\n    }\n    f = \"xl/metadata.\" + wbext;\n    zip_add_file(zip, f, write_xlmeta(f));\n    ct.metadata.push(f);\n    add_rels(opts.wbrels, -1, \"metadata.\" + wbext, RELS.XLMETA);\n    zip_add_file(zip, \"[Content_Types].xml\", write_ct(ct, opts));\n    zip_add_file(zip, \"_rels/.rels\", write_rels(opts.rels));\n    zip_add_file(zip, \"xl/_rels/workbook.\" + wbext + \".rels\", write_rels(opts.wbrels));\n    delete opts.revssf;\n    delete opts.ssf;\n    return zip;\n}\nfunction write_zip_xlsx(wb /*:Workbook*/ , opts /*:WriteOpts*/ ) /*:ZIP*/ {\n    _shapeid = 1024;\n    if (wb && !wb.SSF) {\n        wb.SSF = dup(table_fmt);\n    }\n    if (wb && wb.SSF) {\n        make_ssf();\n        SSF_load_table(wb.SSF);\n        // $FlowIgnore\n        opts.revssf = evert_num(wb.SSF);\n        opts.revssf[wb.SSF[65535]] = 0;\n        opts.ssf = wb.SSF;\n    }\n    opts.rels = {};\n    opts.wbrels = {};\n    opts.Strings = /*::((*/ [] /*:: :any):SST)*/ ;\n    opts.Strings.Count = 0;\n    opts.Strings.Unique = 0;\n    if (browser_has_Map) opts.revStrings = new Map();\n    else {\n        opts.revStrings = {};\n        opts.revStrings.foo = [];\n        delete opts.revStrings.foo;\n    }\n    var wbext = \"xml\";\n    var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;\n    var ct = new_ct();\n    fix_write_opts(opts = opts || {});\n    var zip = zip_new();\n    var f = \"\", rId = 0;\n    opts.cellXfs = [];\n    get_cell_style(opts.cellXfs, {}, {\n        revssf: {\n            \"General\": 0\n        }\n    });\n    if (!wb.Props) wb.Props = {};\n    f = \"docProps/core.xml\";\n    zip_add_file(zip, f, write_core_props(wb.Props, opts));\n    ct.coreprops.push(f);\n    add_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n    /*::if(!wb.Props) throw \"unreachable\"; */ f = \"docProps/app.xml\";\n    if (wb.Props && wb.Props.SheetNames) {} else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;\n    else {\n        var _sn = [];\n        for(var _i = 0; _i < wb.SheetNames.length; ++_i)if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);\n        wb.Props.SheetNames = _sn;\n    }\n    wb.Props.Worksheets = wb.Props.SheetNames.length;\n    zip_add_file(zip, f, write_ext_props(wb.Props, opts));\n    ct.extprops.push(f);\n    add_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n    if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {\n        f = \"docProps/custom.xml\";\n        zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));\n        ct.custprops.push(f);\n        add_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n    }\n    var people = [\n        \"SheetJ5\"\n    ];\n    opts.tcid = 0;\n    for(rId = 1; rId <= wb.SheetNames.length; ++rId){\n        var wsrels = {\n            \"!id\": {}\n        };\n        var ws = wb.Sheets[wb.SheetNames[rId - 1]];\n        var _type = (ws || {})[\"!type\"] || \"sheet\";\n        switch(_type){\n            case \"chart\":\n            /* falls through */ default:\n                f = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n                zip_add_file(zip, f, write_ws_xml(rId - 1, opts, wb, wsrels));\n                ct.sheets.push(f);\n                add_rels(opts.wbrels, -1, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS[0]);\n        }\n        if (ws) {\n            var comments = ws[\"!comments\"];\n            var need_vml = false;\n            var cf = \"\";\n            if (comments && comments.length > 0) {\n                var needtc = false;\n                comments.forEach(function(carr) {\n                    carr[1].forEach(function(c) {\n                        if (c.T == true) needtc = true;\n                    });\n                });\n                if (needtc) {\n                    cf = \"xl/threadedComments/threadedComment\" + rId + \".\" + wbext;\n                    zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));\n                    ct.threadedcomments.push(cf);\n                    add_rels(wsrels, -1, \"../threadedComments/threadedComment\" + rId + \".\" + wbext, RELS.TCMNT);\n                }\n                cf = \"xl/comments\" + rId + \".\" + wbext;\n                zip_add_file(zip, cf, write_comments_xml(comments, opts));\n                ct.comments.push(cf);\n                add_rels(wsrels, -1, \"../comments\" + rId + \".\" + wbext, RELS.CMNT);\n                need_vml = true;\n            }\n            if (ws[\"!legacy\"]) {\n                if (need_vml) zip_add_file(zip, \"xl/drawings/vmlDrawing\" + rId + \".vml\", write_comments_vml(rId, ws[\"!comments\"]));\n            }\n            delete ws[\"!comments\"];\n            delete ws[\"!legacy\"];\n        }\n        if (wsrels[\"!id\"].rId1) zip_add_file(zip, get_rels_path(f), write_rels(wsrels));\n    }\n    if (opts.Strings != null && opts.Strings.length > 0) {\n        f = \"xl/sharedStrings.\" + wbext;\n        zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));\n        ct.strs.push(f);\n        add_rels(opts.wbrels, -1, \"sharedStrings.\" + wbext, RELS.SST);\n    }\n    f = \"xl/workbook.\" + wbext;\n    zip_add_file(zip, f, write_wb_xml(wb, opts));\n    ct.workbooks.push(f);\n    add_rels(opts.rels, 1, f, RELS.WB);\n    /* TODO: something more intelligent with themes */ f = \"xl/theme/theme1.xml\";\n    zip_add_file(zip, f, write_theme(wb.Themes, opts));\n    ct.themes.push(f);\n    add_rels(opts.wbrels, -1, \"theme/theme1.xml\", RELS.THEME);\n    /* TODO: something more intelligent with styles */ f = \"xl/styles.\" + wbext;\n    zip_add_file(zip, f, write_sty_xml(wb, opts));\n    ct.styles.push(f);\n    add_rels(opts.wbrels, -1, \"styles.\" + wbext, RELS.STY);\n    if (wb.vbaraw && vbafmt) {\n        f = \"xl/vbaProject.bin\";\n        zip_add_file(zip, f, wb.vbaraw);\n        ct.vba.push(f);\n        add_rels(opts.wbrels, -1, \"vbaProject.bin\", RELS.VBA);\n    }\n    f = \"xl/metadata.\" + wbext;\n    zip_add_file(zip, f, write_xlmeta_xml());\n    ct.metadata.push(f);\n    add_rels(opts.wbrels, -1, \"metadata.\" + wbext, RELS.XLMETA);\n    if (people.length > 1) {\n        f = \"xl/persons/person.xml\";\n        zip_add_file(zip, f, write_people_xml(people, opts));\n        ct.people.push(f);\n        add_rels(opts.wbrels, -1, \"persons/person.xml\", RELS.PEOPLE);\n    }\n    zip_add_file(zip, \"[Content_Types].xml\", write_ct(ct, opts));\n    zip_add_file(zip, \"_rels/.rels\", write_rels(opts.rels));\n    zip_add_file(zip, \"xl/_rels/workbook.\" + wbext + \".rels\", write_rels(opts.wbrels));\n    delete opts.revssf;\n    delete opts.ssf;\n    return zip;\n}\nfunction firstbyte(f /*:RawData*/ , o /*:?TypeOpts*/ ) /*:Array<number>*/ {\n    var x = \"\";\n    switch((o || {}).type || \"base64\"){\n        case \"buffer\":\n            return [\n                f[0],\n                f[1],\n                f[2],\n                f[3],\n                f[4],\n                f[5],\n                f[6],\n                f[7]\n            ];\n        case \"base64\":\n            x = Base64_decode(f.slice(0, 12));\n            break;\n        case \"binary\":\n            x = f;\n            break;\n        case \"array\":\n            return [\n                f[0],\n                f[1],\n                f[2],\n                f[3],\n                f[4],\n                f[5],\n                f[6],\n                f[7]\n            ];\n        default:\n            throw new Error(\"Unrecognized type \" + (o && o.type || \"undefined\"));\n    }\n    return [\n        x.charCodeAt(0),\n        x.charCodeAt(1),\n        x.charCodeAt(2),\n        x.charCodeAt(3),\n        x.charCodeAt(4),\n        x.charCodeAt(5),\n        x.charCodeAt(6),\n        x.charCodeAt(7)\n    ];\n}\nfunction read_cfb(cfb /*:CFBContainer*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    if (CFB.find(cfb, \"EncryptedPackage\")) return parse_xlsxcfb(cfb, opts);\n    return parse_xlscfb(cfb, opts);\n}\nfunction read_zip(data /*:RawData*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    var zip, d = data;\n    var o = opts || {};\n    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? \"buffer\" : \"base64\";\n    zip = zip_read(d, o);\n    return parse_zip(zip, o);\n}\nfunction read_plaintext(data /*:string*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {\n    var i = 0;\n    main: while(i < data.length)switch(data.charCodeAt(i)){\n        case 0x0A:\n        case 0x0D:\n        case 0x20:\n            ++i;\n            break;\n        case 0x3C:\n            return parse_xlml(data.slice(i), o);\n        default:\n            break main;\n    }\n    return PRN.to_workbook(data, o);\n}\nfunction read_plaintext_raw(data /*:RawData*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {\n    var str = \"\", bytes = firstbyte(data, o);\n    switch(o.type){\n        case \"base64\":\n            str = Base64_decode(data);\n            break;\n        case \"binary\":\n            str = data;\n            break;\n        case \"buffer\":\n            str = data.toString(\"binary\");\n            break;\n        case \"array\":\n            str = cc2str(data);\n            break;\n        default:\n            throw new Error(\"Unrecognized type \" + o.type);\n    }\n    if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);\n    o.type = \"binary\";\n    return read_plaintext(str, o);\n}\nfunction read_utf16(data /*:RawData*/ , o /*:ParseOpts*/ ) /*:Workbook*/ {\n    var d = data;\n    if (o.type == \"base64\") d = Base64_decode(d);\n    d = $cptable.utils.decode(1200, d.slice(2), \"str\");\n    o.type = \"binary\";\n    return read_plaintext(d, o);\n}\nfunction bstrify(data /*:string*/ ) /*:string*/ {\n    return !data.match(/[^\\x00-\\x7F]/) ? data : utf8write(data);\n}\nfunction read_prn(data, d, o, str) {\n    if (str) {\n        o.type = \"string\";\n        return PRN.to_workbook(data, o);\n    }\n    return PRN.to_workbook(d, o);\n}\nfunction readSync(data /*:RawData*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    reset_cp();\n    var o = opts || {};\n    if (typeof ArrayBuffer !== \"undefined\" && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = \"array\", o));\n    if (typeof Uint8Array !== \"undefined\" && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== \"undefined\" ? \"buffer\" : \"array\";\n    var d = data, n = [\n        0,\n        0,\n        0,\n        0\n    ], str = false;\n    if (o.cellStyles) {\n        o.cellNF = true;\n        o.sheetStubs = true;\n    }\n    _ssfopts = {};\n    if (o.dateNF) _ssfopts.dateNF = o.dateNF;\n    if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? \"buffer\" : \"base64\";\n    if (o.type == \"file\") {\n        o.type = has_buf ? \"buffer\" : \"binary\";\n        d = read_binary(data);\n        if (typeof Uint8Array !== \"undefined\" && !has_buf) o.type = \"array\";\n    }\n    if (o.type == \"string\") {\n        str = true;\n        o.type = \"binary\";\n        o.codepage = 65001;\n        d = bstrify(data);\n    }\n    if (o.type == \"array\" && typeof Uint8Array !== \"undefined\" && data instanceof Uint8Array && typeof ArrayBuffer !== \"undefined\") {\n        // $FlowIgnore\n        var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);\n        vu.foo = \"bar\";\n        // $FlowIgnore\n        if (!vu.foo) {\n            o = dup(o);\n            o.type = \"array\";\n            return readSync(ab2a(d), o);\n        }\n    }\n    switch((n = firstbyte(d, o))[0]){\n        case 0xD0:\n            if (n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o);\n            break;\n        case 0x09:\n            if (n[1] <= 0x08) return parse_xlscfb(d, o);\n            break;\n        case 0x3C:\n            return parse_xlml(d, o);\n        case 0x49:\n            if (n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error(\"TIFF Image File is not a spreadsheet\");\n            if (n[1] === 0x44) return read_wb_ID(d, o);\n            break;\n        case 0x54:\n            if (n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o);\n            break;\n        case 0x50:\n            return n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09 ? read_zip(d, o) : read_prn(data, d, o, str);\n        case 0xEF:\n            return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);\n        case 0xFF:\n            if (n[1] === 0xFE) {\n                return read_utf16(d, o);\n            } else if (n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);\n            break;\n        case 0x00:\n            if (n[1] === 0x00) {\n                if (n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);\n                if (n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);\n            }\n            break;\n        case 0x03:\n        case 0x83:\n        case 0x8B:\n        case 0x8C:\n            return DBF.to_workbook(d, o);\n        case 0x7B:\n            if (n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o);\n            break;\n        case 0x0A:\n        case 0x0D:\n        case 0x20:\n            return read_plaintext_raw(d, o);\n        case 0x89:\n            if (n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error(\"PNG Image File is not a spreadsheet\");\n            break;\n    }\n    if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);\n    return read_prn(data, d, o, str);\n}\nfunction readFileSync(filename /*:string*/ , opts /*:?ParseOpts*/ ) /*:Workbook*/ {\n    var o = opts || {};\n    o.type = \"file\";\n    return readSync(filename, o);\n}\nfunction write_cfb_ctr(cfb /*:CFBContainer*/ , o /*:WriteOpts*/ ) /*:any*/ {\n    switch(o.type){\n        case \"base64\":\n        case \"binary\":\n            break;\n        case \"buffer\":\n        case \"array\":\n            o.type = \"\";\n            break;\n        case \"file\":\n            return write_dl(o.file, CFB.write(cfb, {\n                type: has_buf ? \"buffer\" : \"\"\n            }));\n        case \"string\":\n            throw new Error(\"'string' output type invalid for '\" + o.bookType + \"' files\");\n        default:\n            throw new Error(\"Unrecognized type \" + o.type);\n    }\n    return CFB.write(cfb, o);\n}\n/*:: declare var encrypt_agile:any; */ function write_zip_type(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {\n    var o = dup(opts || {});\n    var z = write_zip(wb, o);\n    return write_zip_denouement(z, o);\n}\nfunction write_zip_typeXLSX(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {\n    var o = dup(opts || {});\n    var z = write_zip_xlsx(wb, o);\n    return write_zip_denouement(z, o);\n}\nfunction write_zip_denouement(z /*:any*/ , o /*:?WriteOpts*/ ) /*:any*/ {\n    var oopts = {};\n    var ftype = has_buf ? \"nodebuffer\" : typeof Uint8Array !== \"undefined\" ? \"array\" : \"string\";\n    if (o.compression) oopts.compression = \"DEFLATE\";\n    if (o.password) oopts.type = ftype;\n    else switch(o.type){\n        case \"base64\":\n            oopts.type = \"base64\";\n            break;\n        case \"binary\":\n            oopts.type = \"string\";\n            break;\n        case \"string\":\n            throw new Error(\"'string' output type invalid for '\" + o.bookType + \"' files\");\n        case \"buffer\":\n        case \"file\":\n            oopts.type = ftype;\n            break;\n        default:\n            throw new Error(\"Unrecognized type \" + o.type);\n    }\n    var out = z.FullPaths ? CFB.write(z, {\n        fileType: \"zip\",\n        type: /*::(*/ {\n            \"nodebuffer\": \"buffer\",\n            \"string\": \"binary\"\n        } /*:: :any)*/ [oopts.type] || oopts.type,\n        compression: !!o.compression\n    }) : z.generate(oopts);\n    if (typeof Deno !== \"undefined\") {\n        if (typeof out == \"string\") {\n            if (o.type == \"binary\" || o.type == \"base64\") return out;\n            out = new Uint8Array(s2ab(out));\n        }\n    }\n    /*jshint -W083 */ if (o.password && typeof encrypt_agile !== \"undefined\") return write_cfb_ctr(encrypt_agile(out, o.password), o); // eslint-disable-line no-undef\n    /*jshint +W083 */ if (o.type === \"file\") return write_dl(o.file, out);\n    return o.type == \"string\" ? utf8read(/*::(*/ out /*:: :any)*/ ) : out;\n}\nfunction write_cfb_type(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) /*:any*/ {\n    var o = opts || {};\n    var cfb /*:CFBContainer*/  = write_xlscfb(wb, o);\n    return write_cfb_ctr(cfb, o);\n}\nfunction write_string_type(out /*:string*/ , opts /*:WriteOpts*/ , bom /*:?string*/ ) /*:any*/ {\n    if (!bom) bom = \"\";\n    var o = bom + out;\n    switch(opts.type){\n        case \"base64\":\n            return Base64_encode(utf8write(o));\n        case \"binary\":\n            return utf8write(o);\n        case \"string\":\n            return out;\n        case \"file\":\n            return write_dl(opts.file, o, \"utf8\");\n        case \"buffer\":\n            {\n                if (has_buf) return Buffer_from(o, \"utf8\");\n                else if (typeof TextEncoder !== \"undefined\") return new TextEncoder().encode(o);\n                else return write_string_type(o, {\n                    type: \"binary\"\n                }).split(\"\").map(function(c) {\n                    return c.charCodeAt(0);\n                });\n            }\n    }\n    throw new Error(\"Unrecognized type \" + opts.type);\n}\nfunction write_stxt_type(out /*:string*/ , opts /*:WriteOpts*/ ) /*:any*/ {\n    switch(opts.type){\n        case \"base64\":\n            return Base64_encode(out);\n        case \"binary\":\n            return out;\n        case \"string\":\n            return out; /* override in sheet_to_txt */ \n        case \"file\":\n            return write_dl(opts.file, out, \"binary\");\n        case \"buffer\":\n            {\n                if (has_buf) return Buffer_from(out, \"binary\");\n                else return out.split(\"\").map(function(c) {\n                    return c.charCodeAt(0);\n                });\n            }\n    }\n    throw new Error(\"Unrecognized type \" + opts.type);\n}\n/* TODO: test consistency */ function write_binary_type(out, opts /*:WriteOpts*/ ) /*:any*/ {\n    switch(opts.type){\n        case \"string\":\n        case \"base64\":\n        case \"binary\":\n            var bstr = \"\";\n            // $FlowIgnore\n            for(var i = 0; i < out.length; ++i)bstr += String.fromCharCode(out[i]);\n            return opts.type == \"base64\" ? Base64_encode(bstr) : opts.type == \"string\" ? utf8read(bstr) : bstr;\n        case \"file\":\n            return write_dl(opts.file, out);\n        case \"buffer\":\n            return out;\n        default:\n            throw new Error(\"Unrecognized type \" + opts.type);\n    }\n}\nfunction writeSyncXLSX(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) {\n    reset_cp();\n    check_wb(wb);\n    var o = dup(opts || {});\n    if (o.cellStyles) {\n        o.cellNF = true;\n        o.sheetStubs = true;\n    }\n    if (o.type == \"array\") {\n        o.type = \"binary\";\n        var out /*:string*/  = writeSyncXLSX(wb, o);\n        o.type = \"array\";\n        return s2ab(out);\n    }\n    return write_zip_typeXLSX(wb, o);\n}\nfunction writeSync(wb /*:Workbook*/ , opts /*:?WriteOpts*/ ) {\n    reset_cp();\n    check_wb(wb);\n    var o = dup(opts || {});\n    if (o.cellStyles) {\n        o.cellNF = true;\n        o.sheetStubs = true;\n    }\n    if (o.type == \"array\") {\n        o.type = \"binary\";\n        var out /*:string*/  = writeSync(wb, o);\n        o.type = \"array\";\n        return s2ab(out);\n    }\n    var idx = 0;\n    if (o.sheet) {\n        if (typeof o.sheet == \"number\") idx = o.sheet;\n        else idx = wb.SheetNames.indexOf(o.sheet);\n        if (!wb.SheetNames[idx]) throw new Error(\"Sheet not found: \" + o.sheet + \" : \" + typeof o.sheet);\n    }\n    switch(o.bookType || \"xlsb\"){\n        case \"xml\":\n        case \"xlml\":\n            return write_string_type(write_xlml(wb, o), o);\n        case \"slk\":\n        case \"sylk\":\n            return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"htm\":\n        case \"html\":\n            return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"txt\":\n            return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"csv\":\n            return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, \"\\uFEFF\");\n        case \"dif\":\n            return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"dbf\":\n            return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"prn\":\n            return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"rtf\":\n            return write_string_type(RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"eth\":\n            return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"fods\":\n            return write_string_type(write_ods(wb, o), o);\n        case \"wk1\":\n            return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);\n        case \"wk3\":\n            return write_binary_type(WK_.book_to_wk3(wb, o), o);\n        case \"biff2\":\n            if (!o.biff) o.biff = 2; /* falls through */ \n        case \"biff3\":\n            if (!o.biff) o.biff = 3; /* falls through */ \n        case \"biff4\":\n            if (!o.biff) o.biff = 4;\n            return write_binary_type(write_biff_buf(wb, o), o);\n        case \"biff5\":\n            if (!o.biff) o.biff = 5; /* falls through */ \n        case \"biff8\":\n        case \"xla\":\n        case \"xls\":\n            if (!o.biff) o.biff = 8;\n            return write_cfb_type(wb, o);\n        case \"xlsx\":\n        case \"xlsm\":\n        case \"xlam\":\n        case \"xlsb\":\n        case \"numbers\":\n        case \"ods\":\n            return write_zip_type(wb, o);\n        default:\n            throw new Error(\"Unrecognized bookType |\" + o.bookType + \"|\");\n    }\n}\nfunction resolve_book_type(o /*:WriteFileOpts*/ ) {\n    if (o.bookType) return;\n    var _BT = {\n        \"xls\": \"biff8\",\n        \"htm\": \"html\",\n        \"slk\": \"sylk\",\n        \"socialcalc\": \"eth\",\n        \"Sh33tJS\": \"WTF\"\n    };\n    var ext = o.file.slice(o.file.lastIndexOf(\".\")).toLowerCase();\n    if (ext.match(/^\\.[a-z]+$/)) o.bookType = ext.slice(1);\n    o.bookType = _BT[o.bookType] || o.bookType;\n}\nfunction writeFileSync(wb /*:Workbook*/ , filename /*:string*/ , opts /*:?WriteFileOpts*/ ) {\n    var o = opts || {};\n    o.type = \"file\";\n    o.file = filename;\n    resolve_book_type(o);\n    return writeSync(wb, o);\n}\nfunction writeFileSyncXLSX(wb /*:Workbook*/ , filename /*:string*/ , opts /*:?WriteFileOpts*/ ) {\n    var o = opts || {};\n    o.type = \"file\";\n    o.file = filename;\n    resolve_book_type(o);\n    return writeSyncXLSX(wb, o);\n}\nfunction writeFileAsync(filename /*:string*/ , wb /*:Workbook*/ , opts /*:?WriteFileOpts*/ , cb /*:?(e?:ErrnoError)=>void*/ ) {\n    var o = opts || {};\n    o.type = \"file\";\n    o.file = filename;\n    resolve_book_type(o);\n    o.type = \"buffer\";\n    var _cb = cb;\n    if (!(_cb instanceof Function)) _cb = opts /*:any*/ ;\n    return _fs.writeFile(filename, writeSync(wb, o), _cb);\n}\n/*::\ntype MJRObject = {\n\trow: any;\n\tisempty: boolean;\n};\n*/ function make_json_row(sheet /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , cols /*:Array<string>*/ , header /*:number*/ , hdr /*:Array<any>*/ , dense /*:boolean*/ , o /*:Sheet2JSONOpts*/ ) /*:MJRObject*/ {\n    var rr = encode_row(R);\n    var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, \"raw\");\n    var isempty = true;\n    var row /*:any*/  = header === 1 ? [] : {};\n    if (header !== 1) {\n        if (Object.defineProperty) try {\n            Object.defineProperty(row, \"__rowNum__\", {\n                value: R,\n                enumerable: false\n            });\n        } catch (e) {\n            row.__rowNum__ = R;\n        }\n        else row.__rowNum__ = R;\n    }\n    if (!dense || sheet[R]) for(var C = r.s.c; C <= r.e.c; ++C){\n        var val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n        if (val === undefined || val.t === undefined) {\n            if (defval === undefined) continue;\n            if (hdr[C] != null) {\n                row[hdr[C]] = defval;\n            }\n            continue;\n        }\n        var v = val.v;\n        switch(val.t){\n            case \"z\":\n                if (v == null) break;\n                continue;\n            case \"e\":\n                v = v == 0 ? null : void 0;\n                break;\n            case \"s\":\n            case \"d\":\n            case \"b\":\n            case \"n\":\n                break;\n            default:\n                throw new Error(\"unrecognized type \" + val.t);\n        }\n        if (hdr[C] != null) {\n            if (v == null) {\n                if (val.t == \"e\" && v === null) row[hdr[C]] = null;\n                else if (defval !== undefined) row[hdr[C]] = defval;\n                else if (raw && v === null) row[hdr[C]] = null;\n                else continue;\n            } else {\n                row[hdr[C]] = raw && (val.t !== \"n\" || val.t === \"n\" && o.rawNumbers !== false) ? v : format_cell(val, v, o);\n            }\n            if (v != null) isempty = false;\n        }\n    }\n    return {\n        row: row,\n        isempty: isempty\n    };\n}\nfunction sheet_to_json(sheet /*:Worksheet*/ , opts /*:?Sheet2JSONOpts*/ ) {\n    if (sheet == null || sheet[\"!ref\"] == null) return [];\n    var val = {\n        t: \"n\",\n        v: 0\n    }, header = 0, offset = 1, hdr /*:Array<any>*/  = [], v = 0, vv = \"\";\n    var r = {\n        s: {\n            r: 0,\n            c: 0\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    var o = opts || {};\n    var range = o.range != null ? o.range : sheet[\"!ref\"];\n    if (o.header === 1) header = 1;\n    else if (o.header === \"A\") header = 2;\n    else if (Array.isArray(o.header)) header = 3;\n    else if (o.header == null) header = 0;\n    switch(typeof range){\n        case \"string\":\n            r = safe_decode_range(range);\n            break;\n        case \"number\":\n            r = safe_decode_range(sheet[\"!ref\"]);\n            r.s.r = range;\n            break;\n        default:\n            r = range;\n    }\n    if (header > 0) offset = 0;\n    var rr = encode_row(r.s.r);\n    var cols /*:Array<string>*/  = [];\n    var out /*:Array<any>*/  = [];\n    var outi = 0, counter = 0;\n    var dense = Array.isArray(sheet);\n    var R = r.s.r, C = 0;\n    var header_cnt = {};\n    if (dense && !sheet[R]) sheet[R] = [];\n    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet[\"!cols\"] || [];\n    var rowinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet[\"!rows\"] || [];\n    for(C = r.s.c; C <= r.e.c; ++C){\n        if ((colinfo[C] || {}).hidden) continue;\n        cols[C] = encode_col(C);\n        val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n        switch(header){\n            case 1:\n                hdr[C] = C - r.s.c;\n                break;\n            case 2:\n                hdr[C] = cols[C];\n                break;\n            case 3:\n                hdr[C] = o.header[C - r.s.c];\n                break;\n            default:\n                if (val == null) val = {\n                    w: \"__EMPTY\",\n                    t: \"s\"\n                };\n                vv = v = format_cell(val, null, o);\n                counter = header_cnt[v] || 0;\n                if (!counter) header_cnt[v] = 1;\n                else {\n                    do {\n                        vv = v + \"_\" + counter++;\n                    }while (header_cnt[vv]);\n                    header_cnt[v] = counter;\n                    header_cnt[vv] = 1;\n                }\n                hdr[C] = vv;\n        }\n    }\n    for(R = r.s.r + offset; R <= r.e.r; ++R){\n        if ((rowinfo[R] || {}).hidden) continue;\n        var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);\n        if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;\n    }\n    out.length = outi;\n    return out;\n}\nvar qreg = /\"/g;\nfunction make_csv_row(sheet /*:Worksheet*/ , r /*:Range*/ , R /*:number*/ , cols /*:Array<string>*/ , fs /*:number*/ , rs /*:number*/ , FS /*:string*/ , o /*:Sheet2CSVOpts*/ ) /*:?string*/ {\n    var isempty = true;\n    var row /*:Array<string>*/  = [], txt = \"\", rr = encode_row(R);\n    for(var C = r.s.c; C <= r.e.c; ++C){\n        if (!cols[C]) continue;\n        var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];\n        if (val == null) txt = \"\";\n        else if (val.v != null) {\n            isempty = false;\n            txt = \"\" + (o.rawNumbers && val.t == \"n\" ? val.v : format_cell(val, null, o));\n            for(var i = 0, cc = 0; i !== txt.length; ++i)if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {\n                txt = '\"' + txt.replace(qreg, '\"\"') + '\"';\n                break;\n            }\n            if (txt == \"ID\") txt = '\"ID\"';\n        } else if (val.f != null && !val.F) {\n            isempty = false;\n            txt = \"=\" + val.f;\n            if (txt.indexOf(\",\") >= 0) txt = '\"' + txt.replace(qreg, '\"\"') + '\"';\n        } else txt = \"\";\n        /* NOTE: Excel CSV does not support array formulae */ row.push(txt);\n    }\n    if (o.blankrows === false && isempty) return null;\n    return row.join(FS);\n}\nfunction sheet_to_csv(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) /*:string*/ {\n    var out /*:Array<string>*/  = [];\n    var o = opts == null ? {} : opts;\n    if (sheet == null || sheet[\"!ref\"] == null) return \"\";\n    var r = safe_decode_range(sheet[\"!ref\"]);\n    var FS = o.FS !== undefined ? o.FS : \",\", fs = FS.charCodeAt(0);\n    var RS = o.RS !== undefined ? o.RS : \"\\n\", rs = RS.charCodeAt(0);\n    var endregex = new RegExp((FS == \"|\" ? \"\\\\|\" : FS) + \"+$\");\n    var row = \"\", cols /*:Array<string>*/  = [];\n    o.dense = Array.isArray(sheet);\n    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet[\"!cols\"] || [];\n    var rowinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet[\"!rows\"] || [];\n    for(var C = r.s.c; C <= r.e.c; ++C)if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);\n    var w = 0;\n    for(var R = r.s.r; R <= r.e.r; ++R){\n        if ((rowinfo[R] || {}).hidden) continue;\n        row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);\n        if (row == null) {\n            continue;\n        }\n        if (o.strip) row = row.replace(endregex, \"\");\n        if (row || o.blankrows !== false) out.push((w++ ? RS : \"\") + row);\n    }\n    delete o.dense;\n    return out.join(\"\");\n}\nfunction sheet_to_txt(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {\n    if (!opts) opts = {};\n    opts.FS = \"\t\";\n    opts.RS = \"\\n\";\n    var s = sheet_to_csv(sheet, opts);\n    if (typeof $cptable == \"undefined\" || opts.type == \"string\") return s;\n    var o = $cptable.utils.encode(1200, s, \"str\");\n    return String.fromCharCode(255) + String.fromCharCode(254) + o;\n}\nfunction sheet_to_formulae(sheet /*:Worksheet*/ ) /*:Array<string>*/ {\n    var y = \"\", x, val = \"\";\n    if (sheet == null || sheet[\"!ref\"] == null) return [];\n    var r = safe_decode_range(sheet[\"!ref\"]), rr = \"\", cols /*:Array<string>*/  = [], C;\n    var cmds /*:Array<string>*/  = [];\n    var dense = Array.isArray(sheet);\n    for(C = r.s.c; C <= r.e.c; ++C)cols[C] = encode_col(C);\n    for(var R = r.s.r; R <= r.e.r; ++R){\n        rr = encode_row(R);\n        for(C = r.s.c; C <= r.e.c; ++C){\n            y = cols[C] + rr;\n            x = dense ? (sheet[R] || [])[C] : sheet[y];\n            val = \"\";\n            if (x === undefined) continue;\n            else if (x.F != null) {\n                y = x.F;\n                if (!x.f) continue;\n                val = x.f;\n                if (y.indexOf(\":\") == -1) y = y + \":\" + y;\n            }\n            if (x.f != null) val = x.f;\n            else if (x.t == \"z\") continue;\n            else if (x.t == \"n\" && x.v != null) val = \"\" + x.v;\n            else if (x.t == \"b\") val = x.v ? \"TRUE\" : \"FALSE\";\n            else if (x.w !== undefined) val = \"'\" + x.w;\n            else if (x.v === undefined) continue;\n            else if (x.t == \"s\") val = \"'\" + x.v;\n            else val = \"\" + x.v;\n            cmds[cmds.length] = y + \"=\" + val;\n        }\n    }\n    return cmds;\n}\nfunction sheet_add_json(_ws /*:?Worksheet*/ , js /*:Array<any>*/ , opts) /*:Worksheet*/ {\n    var o = opts || {};\n    var offset = +!o.skipHeader;\n    var ws /*:Worksheet*/  = _ws || {} /*:any*/ ;\n    var _R = 0, _C = 0;\n    if (ws && o.origin != null) {\n        if (typeof o.origin == \"number\") _R = o.origin;\n        else {\n            var _origin /*:CellAddress*/  = typeof o.origin == \"string\" ? decode_cell(o.origin) : o.origin;\n            _R = _origin.r;\n            _C = _origin.c;\n        }\n    }\n    var cell /*:Cell*/ ;\n    var range /*:Range*/  = {\n        s: {\n            c: 0,\n            r: 0\n        },\n        e: {\n            c: _C,\n            r: _R + js.length - 1 + offset\n        }\n    } /*:any*/ ;\n    if (ws[\"!ref\"]) {\n        var _range = safe_decode_range(ws[\"!ref\"]);\n        range.e.c = Math.max(range.e.c, _range.e.c);\n        range.e.r = Math.max(range.e.r, _range.e.r);\n        if (_R == -1) {\n            _R = _range.e.r + 1;\n            range.e.r = _R + js.length - 1 + offset;\n        }\n    } else {\n        if (_R == -1) {\n            _R = 0;\n            range.e.r = js.length - 1 + offset;\n        }\n    }\n    var hdr /*:Array<string>*/  = o.header || [], C = 0;\n    js.forEach(function(JS, R /*:number*/ ) {\n        keys(JS).forEach(function(k) {\n            if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;\n            var v = JS[k];\n            var t = \"z\";\n            var z = \"\";\n            var ref = encode_cell({\n                c: _C + C,\n                r: _R + R + offset\n            });\n            cell = ws_get_cell_stub(ws, ref);\n            if (v && typeof v === \"object\" && !(v instanceof Date)) {\n                ws[ref] = v;\n            } else {\n                if (typeof v == \"number\") t = \"n\";\n                else if (typeof v == \"boolean\") t = \"b\";\n                else if (typeof v == \"string\") t = \"s\";\n                else if (v instanceof Date) {\n                    t = \"d\";\n                    if (!o.cellDates) {\n                        t = \"n\";\n                        v = datenum(v);\n                    }\n                    z = o.dateNF || table_fmt[14];\n                } else if (v === null && o.nullError) {\n                    t = \"e\";\n                    v = 0;\n                }\n                if (!cell) ws[ref] = cell = {\n                    t: t,\n                    v: v\n                } /*:any*/ ;\n                else {\n                    cell.t = t;\n                    cell.v = v;\n                    delete cell.w;\n                    delete cell.R;\n                    if (z) cell.z = z;\n                }\n                if (z) cell.z = z;\n            }\n        });\n    });\n    range.e.c = Math.max(range.e.c, _C + hdr.length - 1);\n    var __R = encode_row(_R);\n    if (offset) for(C = 0; C < hdr.length; ++C)ws[encode_col(C + _C) + __R] = {\n        t: \"s\",\n        v: hdr[C]\n    };\n    ws[\"!ref\"] = encode_range(range);\n    return ws;\n}\nfunction json_to_sheet(js /*:Array<any>*/ , opts) /*:Worksheet*/ {\n    return sheet_add_json(null, js, opts);\n}\n/* get cell, creating a stub if necessary */ function ws_get_cell_stub(ws /*:Worksheet*/ , R, C /*:?number*/ ) /*:Cell*/ {\n    /* A1 cell address */ if (typeof R == \"string\") {\n        /* dense */ if (Array.isArray(ws)) {\n            var RC = decode_cell(R);\n            if (!ws[RC.r]) ws[RC.r] = [];\n            return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {\n                t: \"z\"\n            });\n        }\n        return ws[R] || (ws[R] = {\n            t: \"z\"\n        });\n    }\n    /* cell address object */ if (typeof R != \"number\") return ws_get_cell_stub(ws, encode_cell(R));\n    /* R and C are 0-based indices */ return ws_get_cell_stub(ws, encode_cell({\n        r: R,\n        c: C || 0\n    }));\n}\n/* find sheet index for given name / validate index */ function wb_sheet_idx(wb /*:Workbook*/ , sh /*:number|string*/ ) {\n    if (typeof sh == \"number\") {\n        if (sh >= 0 && wb.SheetNames.length > sh) return sh;\n        throw new Error(\"Cannot find sheet # \" + sh);\n    } else if (typeof sh == \"string\") {\n        var idx = wb.SheetNames.indexOf(sh);\n        if (idx > -1) return idx;\n        throw new Error(\"Cannot find sheet name |\" + sh + \"|\");\n    } else throw new Error(\"Cannot find sheet |\" + sh + \"|\");\n}\n/* simple blank workbook object */ function book_new() /*:Workbook*/ {\n    return {\n        SheetNames: [],\n        Sheets: {}\n    };\n}\n/* add a worksheet to the end of a given workbook */ function book_append_sheet(wb /*:Workbook*/ , ws /*:Worksheet*/ , name /*:?string*/ , roll /*:?boolean*/ ) /*:string*/ {\n    var i = 1;\n    if (!name) {\n        for(; i <= 0xFFFF; ++i, name = undefined)if (wb.SheetNames.indexOf(name = \"Sheet\" + i) == -1) break;\n    }\n    if (!name || wb.SheetNames.length >= 0xFFFF) throw new Error(\"Too many worksheets\");\n    if (roll && wb.SheetNames.indexOf(name) >= 0) {\n        var m = name.match(/(^.*?)(\\d+)$/);\n        i = m && +m[2] || 0;\n        var root = m && m[1] || name;\n        for(++i; i <= 0xFFFF; ++i)if (wb.SheetNames.indexOf(name = root + i) == -1) break;\n    }\n    check_ws_name(name);\n    if (wb.SheetNames.indexOf(name) >= 0) throw new Error(\"Worksheet with name |\" + name + \"| already exists!\");\n    wb.SheetNames.push(name);\n    wb.Sheets[name] = ws;\n    return name;\n}\n/* set sheet visibility (visible/hidden/very hidden) */ function book_set_sheet_visibility(wb /*:Workbook*/ , sh /*:number|string*/ , vis /*:number*/ ) {\n    if (!wb.Workbook) wb.Workbook = {};\n    if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];\n    var idx = wb_sheet_idx(wb, sh);\n    // $FlowIgnore\n    if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};\n    switch(vis){\n        case 0:\n        case 1:\n        case 2:\n            break;\n        default:\n            throw new Error(\"Bad sheet visibility setting \" + vis);\n    }\n    // $FlowIgnore\n    wb.Workbook.Sheets[idx].Hidden = vis;\n}\n/* set number format */ function cell_set_number_format(cell /*:Cell*/ , fmt /*:string|number*/ ) {\n    cell.z = fmt;\n    return cell;\n}\n/* set cell hyperlink */ function cell_set_hyperlink(cell /*:Cell*/ , target /*:string*/ , tooltip /*:?string*/ ) {\n    if (!target) {\n        delete cell.l;\n    } else {\n        cell.l = {\n            Target: target\n        } /*:Hyperlink*/ ;\n        if (tooltip) cell.l.Tooltip = tooltip;\n    }\n    return cell;\n}\nfunction cell_set_internal_link(cell /*:Cell*/ , range /*:string*/ , tooltip /*:?string*/ ) {\n    return cell_set_hyperlink(cell, \"#\" + range, tooltip);\n}\n/* add to cell comments */ function cell_add_comment(cell /*:Cell*/ , text /*:string*/ , author /*:?string*/ ) {\n    if (!cell.c) cell.c = [];\n    cell.c.push({\n        t: text,\n        a: author || \"SheetJS\"\n    });\n}\n/* set array formula and flush related cells */ function sheet_set_array_formula(ws /*:Worksheet*/ , range, formula /*:string*/ , dynamic /*:boolean*/ ) {\n    var rng = typeof range != \"string\" ? range : safe_decode_range(range);\n    var rngstr = typeof range == \"string\" ? range : encode_range(range);\n    for(var R = rng.s.r; R <= rng.e.r; ++R)for(var C = rng.s.c; C <= rng.e.c; ++C){\n        var cell = ws_get_cell_stub(ws, R, C);\n        cell.t = \"n\";\n        cell.F = rngstr;\n        delete cell.v;\n        if (R == rng.s.r && C == rng.s.c) {\n            cell.f = formula;\n            if (dynamic) cell.D = true;\n        }\n    }\n    return ws;\n}\nvar utils /*:any*/  = {\n    encode_col: encode_col,\n    encode_row: encode_row,\n    encode_cell: encode_cell,\n    encode_range: encode_range,\n    decode_col: decode_col,\n    decode_row: decode_row,\n    split_cell: split_cell,\n    decode_cell: decode_cell,\n    decode_range: decode_range,\n    format_cell: format_cell,\n    sheet_add_aoa: sheet_add_aoa,\n    sheet_add_json: sheet_add_json,\n    sheet_add_dom: sheet_add_dom,\n    aoa_to_sheet: aoa_to_sheet,\n    json_to_sheet: json_to_sheet,\n    table_to_sheet: parse_dom_table,\n    table_to_book: table_to_book,\n    sheet_to_csv: sheet_to_csv,\n    sheet_to_txt: sheet_to_txt,\n    sheet_to_json: sheet_to_json,\n    sheet_to_html: sheet_to_html,\n    sheet_to_formulae: sheet_to_formulae,\n    sheet_to_row_object_array: sheet_to_json,\n    sheet_get_cell: ws_get_cell_stub,\n    book_new: book_new,\n    book_append_sheet: book_append_sheet,\n    book_set_sheet_visibility: book_set_sheet_visibility,\n    cell_set_number_format: cell_set_number_format,\n    cell_set_hyperlink: cell_set_hyperlink,\n    cell_set_internal_link: cell_set_internal_link,\n    cell_add_comment: cell_add_comment,\n    sheet_set_array_formula: sheet_set_array_formula,\n    consts: {\n        SHEET_VISIBLE: 0,\n        SHEET_HIDDEN: 1,\n        SHEET_VERY_HIDDEN: 2\n    }\n};\nvar _Readable;\nfunction set_readable(R) {\n    _Readable = R;\n}\nfunction write_csv_stream(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {\n    var stream = _Readable();\n    var o = opts == null ? {} : opts;\n    if (sheet == null || sheet[\"!ref\"] == null) {\n        stream.push(null);\n        return stream;\n    }\n    var r = safe_decode_range(sheet[\"!ref\"]);\n    var FS = o.FS !== undefined ? o.FS : \",\", fs = FS.charCodeAt(0);\n    var RS = o.RS !== undefined ? o.RS : \"\\n\", rs = RS.charCodeAt(0);\n    var endregex = new RegExp((FS == \"|\" ? \"\\\\|\" : FS) + \"+$\");\n    var row /*:?string*/  = \"\", cols /*:Array<string>*/  = [];\n    o.dense = Array.isArray(sheet);\n    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet[\"!cols\"] || [];\n    var rowinfo /*:Array<RowInfo>*/  = o.skipHidden && sheet[\"!rows\"] || [];\n    for(var C = r.s.c; C <= r.e.c; ++C)if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);\n    var R = r.s.r;\n    var BOM = false, w = 0;\n    stream._read = function() {\n        if (!BOM) {\n            BOM = true;\n            return stream.push(\"\\uFEFF\");\n        }\n        while(R <= r.e.r){\n            ++R;\n            if ((rowinfo[R - 1] || {}).hidden) continue;\n            row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);\n            if (row != null) {\n                if (o.strip) row = row.replace(endregex, \"\");\n                if (row || o.blankrows !== false) return stream.push((w++ ? RS : \"\") + row);\n            }\n        }\n        return stream.push(null);\n    };\n    return stream;\n}\nfunction write_html_stream(ws /*:Worksheet*/ , opts /*:?Sheet2HTMLOpts*/ ) {\n    var stream = _Readable();\n    var o = opts || {};\n    var header = o.header != null ? o.header : HTML_BEGIN;\n    var footer = o.footer != null ? o.footer : HTML_END;\n    stream.push(header);\n    var r = decode_range(ws[\"!ref\"]);\n    o.dense = Array.isArray(ws);\n    stream.push(make_html_preamble(ws, r, o));\n    var R = r.s.r;\n    var end = false;\n    stream._read = function() {\n        if (R > r.e.r) {\n            if (!end) {\n                end = true;\n                stream.push(\"</table>\" + footer);\n            }\n            return stream.push(null);\n        }\n        while(R <= r.e.r){\n            stream.push(make_html_row(ws, r, R, o));\n            ++R;\n            break;\n        }\n    };\n    return stream;\n}\nfunction write_json_stream(sheet /*:Worksheet*/ , opts /*:?Sheet2CSVOpts*/ ) {\n    var stream = _Readable({\n        objectMode: true\n    });\n    if (sheet == null || sheet[\"!ref\"] == null) {\n        stream.push(null);\n        return stream;\n    }\n    var val = {\n        t: \"n\",\n        v: 0\n    }, header = 0, offset = 1, hdr /*:Array<any>*/  = [], v = 0, vv = \"\";\n    var r = {\n        s: {\n            r: 0,\n            c: 0\n        },\n        e: {\n            r: 0,\n            c: 0\n        }\n    };\n    var o = opts || {};\n    var range = o.range != null ? o.range : sheet[\"!ref\"];\n    if (o.header === 1) header = 1;\n    else if (o.header === \"A\") header = 2;\n    else if (Array.isArray(o.header)) header = 3;\n    switch(typeof range){\n        case \"string\":\n            r = safe_decode_range(range);\n            break;\n        case \"number\":\n            r = safe_decode_range(sheet[\"!ref\"]);\n            r.s.r = range;\n            break;\n        default:\n            r = range;\n    }\n    if (header > 0) offset = 0;\n    var rr = encode_row(r.s.r);\n    var cols /*:Array<string>*/  = [];\n    var counter = 0;\n    var dense = Array.isArray(sheet);\n    var R = r.s.r, C = 0;\n    var header_cnt = {};\n    if (dense && !sheet[R]) sheet[R] = [];\n    var colinfo /*:Array<ColInfo>*/  = o.skipHidden && sheet[\"!cols\"] || [];\n    var rowinfo /*:Array<RowInfo>*/  = o.skipHidden && sheet[\"!rows\"] || [];\n    for(C = r.s.c; C <= r.e.c; ++C){\n        if ((colinfo[C] || {}).hidden) continue;\n        cols[C] = encode_col(C);\n        val = dense ? sheet[R][C] : sheet[cols[C] + rr];\n        switch(header){\n            case 1:\n                hdr[C] = C - r.s.c;\n                break;\n            case 2:\n                hdr[C] = cols[C];\n                break;\n            case 3:\n                hdr[C] = o.header[C - r.s.c];\n                break;\n            default:\n                if (val == null) val = {\n                    w: \"__EMPTY\",\n                    t: \"s\"\n                };\n                vv = v = format_cell(val, null, o);\n                counter = header_cnt[v] || 0;\n                if (!counter) header_cnt[v] = 1;\n                else {\n                    do {\n                        vv = v + \"_\" + counter++;\n                    }while (header_cnt[vv]);\n                    header_cnt[v] = counter;\n                    header_cnt[vv] = 1;\n                }\n                hdr[C] = vv;\n        }\n    }\n    R = r.s.r + offset;\n    stream._read = function() {\n        while(R <= r.e.r){\n            if ((rowinfo[R - 1] || {}).hidden) continue;\n            var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);\n            ++R;\n            if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {\n                stream.push(row.row);\n                return;\n            }\n        }\n        return stream.push(null);\n    };\n    return stream;\n}\nvar __stream = {\n    to_json: write_json_stream,\n    to_html: write_html_stream,\n    to_csv: write_csv_stream,\n    set_readable: set_readable\n};\nconst version = XLSX.version;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xlsx@0.18.5/node_modules/xlsx/xlsx.mjs\n");

/***/ })

};
;